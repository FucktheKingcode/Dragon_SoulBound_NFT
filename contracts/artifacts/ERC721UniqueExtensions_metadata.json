{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "eth",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sub",
								"type": "uint256"
							}
						],
						"internalType": "struct CrossAddress",
						"name": "approved",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "approveCross",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "eth",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sub",
								"type": "uint256"
							}
						],
						"internalType": "struct CrossAddress",
						"name": "from",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "burnFromCross",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "collectionHelperAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "crossOwnerOf",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "eth",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sub",
								"type": "uint256"
							}
						],
						"internalType": "struct CrossAddress",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "description",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "eth",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sub",
								"type": "uint256"
							}
						],
						"internalType": "struct CrossAddress",
						"name": "to",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "key",
								"type": "string"
							},
							{
								"internalType": "bytes",
								"name": "value",
								"type": "bytes"
							}
						],
						"internalType": "struct Property[]",
						"name": "properties",
						"type": "tuple[]"
					}
				],
				"name": "mintCross",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "name",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "nextTokenId",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "string[]",
						"name": "keys",
						"type": "string[]"
					}
				],
				"name": "properties",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "key",
								"type": "string"
							},
							{
								"internalType": "bytes",
								"name": "value",
								"type": "bytes"
							}
						],
						"internalType": "struct Property[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceID",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "symbol",
				"outputs": [
					{
						"internalType": "string",
						"name": "",
						"type": "string"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transfer",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "eth",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sub",
								"type": "uint256"
							}
						],
						"internalType": "struct CrossAddress",
						"name": "to",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferCross",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "eth",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sub",
								"type": "uint256"
							}
						],
						"internalType": "struct CrossAddress",
						"name": "from",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "eth",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "sub",
								"type": "uint256"
							}
						],
						"internalType": "struct CrossAddress",
						"name": "to",
						"type": "tuple"
					},
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "transferFromCross",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "the ERC-165 identifier for this interface is 0x16de3152",
			"kind": "dev",
			"methods": {
				"approveCross((address,uint256),uint256)": {
					"details": "The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x0ecd0ab0,  or in textual repr: approveCross((address,uint256),uint256)",
					"params": {
						"approved": "The new substrate address approved NFT controller",
						"tokenId": "The NFT to approve"
					}
				},
				"burnFromCross((address,uint256),uint256)": {
					"details": "Throws unless `msg.sender` is the current owner or an authorized  operator for this NFT. Throws if `from` is not the current owner. Throws  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xbb2f5a58,  or in textual repr: burnFromCross((address,uint256),uint256)",
					"params": {
						"from": "The current owner of the NFT",
						"tokenId": "The NFT to transfer"
					}
				},
				"collectionHelperAddress()": {
					"details": "EVM selector for this function is: 0x1896cce6,  or in textual repr: collectionHelperAddress()"
				},
				"crossOwnerOf(uint256)": {
					"details": "EVM selector for this function is: 0x2b29dace,  or in textual repr: crossOwnerOf(uint256)",
					"params": {
						"tokenId": "Id for the token."
					}
				},
				"description()": {
					"details": "EVM selector for this function is: 0x7284e416,  or in textual repr: description()"
				},
				"mintCross((address,uint256),(string,bytes)[])": {
					"details": "EVM selector for this function is: 0xb904db03,  or in textual repr: mintCross((address,uint256),(string,bytes)[])",
					"params": {
						"properties": "Properties of minted token",
						"to": "The new owner crossAccountId"
					},
					"returns": {
						"_0": "uint256 The id of the newly minted token"
					}
				},
				"name()": {
					"details": "EVM selector for this function is: 0x06fdde03,  or in textual repr: name()"
				},
				"nextTokenId()": {
					"details": "EVM selector for this function is: 0x75794a3c,  or in textual repr: nextTokenId()"
				},
				"properties(uint256,string[])": {
					"details": "EVM selector for this function is: 0xe07ede7e,  or in textual repr: properties(uint256,string[])",
					"params": {
						"keys": "Properties keys. Empty keys for all propertyes.",
						"tokenId": "Id for the token."
					},
					"returns": {
						"_0": "Vector of properties key/value pairs."
					}
				},
				"symbol()": {
					"details": "EVM selector for this function is: 0x95d89b41,  or in textual repr: symbol()"
				},
				"transfer(address,uint256)": {
					"details": "Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xa9059cbb,  or in textual repr: transfer(address,uint256)",
					"params": {
						"to": "The new owner",
						"tokenId": "The NFT to transfer"
					}
				},
				"transferCross((address,uint256),uint256)": {
					"details": "Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0x2ada85ff,  or in textual repr: transferCross((address,uint256),uint256)",
					"params": {
						"to": "The new owner",
						"tokenId": "The NFT to transfer"
					}
				},
				"transferFromCross((address,uint256),(address,uint256),uint256)": {
					"details": "Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xd5cf430b,  or in textual repr: transferFromCross((address,uint256),(address,uint256),uint256)",
					"params": {
						"from": "Cross acccount address of current owner",
						"to": "Cross acccount address of new owner",
						"tokenId": "The NFT to transfer"
					}
				}
			},
			"title": "Unique extensions for ERC721.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approveCross((address,uint256),uint256)": {
					"notice": "Set or reaffirm the approved address for an NFT"
				},
				"burnFromCross((address,uint256),uint256)": {
					"notice": "Burns a specific ERC721 token."
				},
				"collectionHelperAddress()": {
					"notice": "Returns collection helper contract address"
				},
				"crossOwnerOf(uint256)": {
					"notice": "Returns the owner (in cross format) of the token."
				},
				"description()": {
					"notice": "A description for the collection."
				},
				"mintCross((address,uint256),(string,bytes)[])": {
					"notice": "Function to mint a token."
				},
				"name()": {
					"notice": "A descriptive name for a collection of NFTs in this contract"
				},
				"nextTokenId()": {
					"notice": "Returns next free NFT ID."
				},
				"properties(uint256,string[])": {
					"notice": "Returns the token properties."
				},
				"symbol()": {
					"notice": "An abbreviated name for NFTs in this contract"
				},
				"transfer(address,uint256)": {
					"notice": "Transfer ownership of an NFT"
				},
				"transferCross((address,uint256),uint256)": {
					"notice": "Transfer ownership of an NFT"
				},
				"transferFromCross((address,uint256),(address,uint256),uint256)": {
					"notice": "Transfer ownership of an NFT from cross account address to cross account address"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/UniqueNFT.sol": "ERC721UniqueExtensions"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/UniqueNFT.sol": {
			"keccak256": "0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06",
			"license": "OTHER",
			"urls": [
				"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82",
				"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8"
			]
		}
	},
	"version": 1
}