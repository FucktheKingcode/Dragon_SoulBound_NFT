{
	"compiler": {
		"version": "0.8.24+commit.e11b9ed9"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					}
				],
				"name": "TokenChanged",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "string[]",
						"name": "keys",
						"type": "string[]"
					}
				],
				"name": "deleteProperties",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"internalType": "string",
						"name": "key",
						"type": "string"
					}
				],
				"name": "property",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "tokenId",
						"type": "uint256"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "key",
								"type": "string"
							},
							{
								"internalType": "bytes",
								"name": "value",
								"type": "bytes"
							}
						],
						"internalType": "struct Property[]",
						"name": "properties",
						"type": "tuple[]"
					}
				],
				"name": "setProperties",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "key",
								"type": "string"
							},
							{
								"components": [
									{
										"internalType": "enum TokenPermissionField",
										"name": "code",
										"type": "uint8"
									},
									{
										"internalType": "bool",
										"name": "value",
										"type": "bool"
									}
								],
								"internalType": "struct PropertyPermission[]",
								"name": "permissions",
								"type": "tuple[]"
							}
						],
						"internalType": "struct TokenPropertyPermission[]",
						"name": "permissions",
						"type": "tuple[]"
					}
				],
				"name": "setTokenPropertyPermissions",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes4",
						"name": "interfaceID",
						"type": "bytes4"
					}
				],
				"name": "supportsInterface",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenPropertyPermissions",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "key",
								"type": "string"
							},
							{
								"components": [
									{
										"internalType": "enum TokenPermissionField",
										"name": "code",
										"type": "uint8"
									},
									{
										"internalType": "bool",
										"name": "value",
										"type": "bool"
									}
								],
								"internalType": "struct PropertyPermission[]",
								"name": "permissions",
								"type": "tuple[]"
							}
						],
						"internalType": "struct TokenPropertyPermission[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "the ERC-165 identifier for this interface is 0xde0695c2",
			"kind": "dev",
			"methods": {
				"deleteProperties(uint256,string[])": {
					"details": "Throws error if `msg.sender` has no permission to edit the property.EVM selector for this function is: 0xc472d371,  or in textual repr: deleteProperties(uint256,string[])",
					"params": {
						"keys": "Properties key.",
						"tokenId": "ID of the token."
					}
				},
				"property(uint256,string)": {
					"details": "Throws error if key not foundEVM selector for this function is: 0x7228c327,  or in textual repr: property(uint256,string)",
					"params": {
						"key": "Property key.",
						"tokenId": "ID of the token."
					},
					"returns": {
						"_0": "Property value bytes"
					}
				},
				"setProperties(uint256,(string,bytes)[])": {
					"details": "Throws error if `msg.sender` has no permission to edit the property.EVM selector for this function is: 0x14ed3a6e,  or in textual repr: setProperties(uint256,(string,bytes)[])",
					"params": {
						"properties": "settable properties",
						"tokenId": "ID of the token."
					}
				},
				"setTokenPropertyPermissions((string,(uint8,bool)[])[])": {
					"details": "Throws error if `msg.sender` is not admin or owner of the collection.EVM selector for this function is: 0xbd92983a,  or in textual repr: setTokenPropertyPermissions((string,(uint8,bool)[])[])",
					"params": {
						"permissions": "Permissions for keys."
					}
				},
				"tokenPropertyPermissions()": {
					"details": "EVM selector for this function is: 0xf23d7790,  or in textual repr: tokenPropertyPermissions()"
				}
			},
			"title": "A contract that allows to set and delete token properties and change token property permissions.",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"deleteProperties(uint256,string[])": {
					"notice": "Delete token properties value."
				},
				"property(uint256,string)": {
					"notice": "Get token property value."
				},
				"setProperties(uint256,(string,bytes)[])": {
					"notice": "Set token properties value."
				},
				"setTokenPropertyPermissions((string,(uint8,bool)[])[])": {
					"notice": "Set permissions for token property."
				},
				"tokenPropertyPermissions()": {
					"notice": "Get permissions for token properties."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/UniqueNFT.sol": "TokenProperties"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/UniqueNFT.sol": {
			"keccak256": "0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06",
			"license": "OTHER",
			"urls": [
				"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82",
				"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8"
			]
		}
	},
	"version": 1
}