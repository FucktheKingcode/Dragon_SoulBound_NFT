{
	"id": "e915afdf4da8ca7a48f3fccce48e1bee",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.24",
	"solcLongVersion": "0.8.24+commit.e11b9ed9",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts/UniqueNFT.sol": {
				"content": "// SPDX-License-Identifier: OTHER\r\n// This code is automatically generated\r\n\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\n/// @dev common stubs holder\r\ninterface Dummy {\r\n\r\n}\r\n\r\ninterface ERC165 is Dummy {\r\n\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\r\n}\r\n\r\n/// @dev inlined interface\r\ninterface ERC721TokenEvent {\r\n\tevent TokenChanged(uint256 indexed tokenId);\r\n}\r\n\r\n/// @title A contract that allows to set and delete token properties and change token property permissions.\r\n/// @dev the ERC-165 identifier for this interface is 0xde0695c2\r\ninterface TokenProperties is Dummy, ERC165, ERC721TokenEvent {\r\n\t// /// @notice Set permissions for token property.\r\n\t// /// @dev Throws error if `msg.sender` is not admin or owner of the collection.\r\n\t// /// @param key Property key.\r\n\t// /// @param isMutable Permission to mutate property.\r\n\t// /// @param collectionAdmin Permission to mutate property by collection admin if property is mutable.\r\n\t// /// @param tokenOwner Permission to mutate property by token owner if property is mutable.\r\n\t// /// @dev EVM selector for this function is: 0x222d97fa,\r\n\t// ///  or in textual repr: setTokenPropertyPermission(string,bool,bool,bool)\r\n\t// function setTokenPropertyPermission(string memory key, bool isMutable, bool collectionAdmin, bool tokenOwner) external;\r\n\r\n\t/// @notice Set permissions for token property.\r\n\t/// @dev Throws error if `msg.sender` is not admin or owner of the collection.\r\n\t/// @param permissions Permissions for keys.\r\n\t/// @dev EVM selector for this function is: 0xbd92983a,\r\n\t///  or in textual repr: setTokenPropertyPermissions((string,(uint8,bool)[])[])\r\n\tfunction setTokenPropertyPermissions(TokenPropertyPermission[] memory permissions) external;\r\n\r\n\t/// @notice Get permissions for token properties.\r\n\t/// @dev EVM selector for this function is: 0xf23d7790,\r\n\t///  or in textual repr: tokenPropertyPermissions()\r\n\tfunction tokenPropertyPermissions() external view returns (TokenPropertyPermission[] memory);\r\n\r\n\t// /// @notice Set token property value.\r\n\t// /// @dev Throws error if `msg.sender` has no permission to edit the property.\r\n\t// /// @param tokenId ID of the token.\r\n\t// /// @param key Property key.\r\n\t// /// @param value Property value.\r\n\t// /// @dev EVM selector for this function is: 0x1752d67b,\r\n\t// ///  or in textual repr: setProperty(uint256,string,bytes)\r\n\t// function setProperty(uint256 tokenId, string memory key, bytes memory value) external;\r\n\r\n\t/// @notice Set token properties value.\r\n\t/// @dev Throws error if `msg.sender` has no permission to edit the property.\r\n\t/// @param tokenId ID of the token.\r\n\t/// @param properties settable properties\r\n\t/// @dev EVM selector for this function is: 0x14ed3a6e,\r\n\t///  or in textual repr: setProperties(uint256,(string,bytes)[])\r\n\tfunction setProperties(uint256 tokenId, Property[] memory properties) external;\r\n\r\n\t// /// @notice Delete token property value.\r\n\t// /// @dev Throws error if `msg.sender` has no permission to edit the property.\r\n\t// /// @param tokenId ID of the token.\r\n\t// /// @param key Property key.\r\n\t// /// @dev EVM selector for this function is: 0x066111d1,\r\n\t// ///  or in textual repr: deleteProperty(uint256,string)\r\n\t// function deleteProperty(uint256 tokenId, string memory key) external;\r\n\r\n\t/// @notice Delete token properties value.\r\n\t/// @dev Throws error if `msg.sender` has no permission to edit the property.\r\n\t/// @param tokenId ID of the token.\r\n\t/// @param keys Properties key.\r\n\t/// @dev EVM selector for this function is: 0xc472d371,\r\n\t///  or in textual repr: deleteProperties(uint256,string[])\r\n\tfunction deleteProperties(uint256 tokenId, string[] memory keys) external;\r\n\r\n\t/// @notice Get token property value.\r\n\t/// @dev Throws error if key not found\r\n\t/// @param tokenId ID of the token.\r\n\t/// @param key Property key.\r\n\t/// @return Property value bytes\r\n\t/// @dev EVM selector for this function is: 0x7228c327,\r\n\t///  or in textual repr: property(uint256,string)\r\n\tfunction property(uint256 tokenId, string memory key) external view returns (bytes memory);\r\n}\r\n\r\n/// Ethereum representation of collection [`PropertyKey`](up_data_structs::PropertyKey) and [`PropertyValue`](up_data_structs::PropertyValue).\r\nstruct Property {\r\n\tstring key;\r\n\tbytes value;\r\n}\r\n\r\n/// Ethereum representation of Token Property Permissions.\r\nstruct TokenPropertyPermission {\r\n\t/// Token property key.\r\n\tstring key;\r\n\t/// Token property permissions.\r\n\tPropertyPermission[] permissions;\r\n}\r\n\r\n/// Ethereum representation of TokenPermissions (see [`up_data_structs::PropertyPermission`]) as an key and value.\r\nstruct PropertyPermission {\r\n\t/// TokenPermission field.\r\n\tTokenPermissionField code;\r\n\t/// TokenPermission value.\r\n\tbool value;\r\n}\r\n\r\n/// Ethereum representation of TokenPermissions (see [`up_data_structs::PropertyPermission`]) fields as an enumeration.\r\nenum TokenPermissionField {\r\n\t/// Permission to change the property and property permission. See [`up_data_structs::PropertyPermission::mutable`]\r\n\tMutable,\r\n\t/// Change permission for the collection administrator. See [`up_data_structs::PropertyPermission::token_owner`]\r\n\tTokenOwner,\r\n\t/// Permission to change the property for the owner of the token. See [`up_data_structs::PropertyPermission::collection_admin`]\r\n\tCollectionAdmin\r\n}\r\n\r\n/// @title A contract that allows you to work with collections.\r\n/// @dev the ERC-165 identifier for this interface is 0x2a14cfd1\r\ninterface Collection is Dummy, ERC165 {\r\n\t// /// Set collection property.\r\n\t// ///\r\n\t// /// @param key Property key.\r\n\t// /// @param value Propery value.\r\n\t// /// @dev EVM selector for this function is: 0x2f073f66,\r\n\t// ///  or in textual repr: setCollectionProperty(string,bytes)\r\n\t// function setCollectionProperty(string memory key, bytes memory value) external;\r\n\r\n\t/// Set collection properties.\r\n\t///\r\n\t/// @param properties Vector of properties key/value pair.\r\n\t/// @dev EVM selector for this function is: 0x50b26b2a,\r\n\t///  or in textual repr: setCollectionProperties((string,bytes)[])\r\n\tfunction setCollectionProperties(Property[] memory properties) external;\r\n\r\n\t// /// Delete collection property.\r\n\t// ///\r\n\t// /// @param key Property key.\r\n\t// /// @dev EVM selector for this function is: 0x7b7debce,\r\n\t// ///  or in textual repr: deleteCollectionProperty(string)\r\n\t// function deleteCollectionProperty(string memory key) external;\r\n\r\n\t/// Delete collection properties.\r\n\t///\r\n\t/// @param keys Properties keys.\r\n\t/// @dev EVM selector for this function is: 0xee206ee3,\r\n\t///  or in textual repr: deleteCollectionProperties(string[])\r\n\tfunction deleteCollectionProperties(string[] memory keys) external;\r\n\r\n\t/// Get collection property.\r\n\t///\r\n\t/// @dev Throws error if key not found.\r\n\t///\r\n\t/// @param key Property key.\r\n\t/// @return bytes The property corresponding to the key.\r\n\t/// @dev EVM selector for this function is: 0xcf24fd6d,\r\n\t///  or in textual repr: collectionProperty(string)\r\n\tfunction collectionProperty(string memory key) external view returns (bytes memory);\r\n\r\n\t/// Get collection properties.\r\n\t///\r\n\t/// @param keys Properties keys. Empty keys for all propertyes.\r\n\t/// @return Vector of properties key/value pairs.\r\n\t/// @dev EVM selector for this function is: 0x285fb8e6,\r\n\t///  or in textual repr: collectionProperties(string[])\r\n\tfunction collectionProperties(string[] memory keys) external view returns (Property[] memory);\r\n\r\n\t// /// Set the sponsor of the collection.\r\n\t// ///\r\n\t// /// @dev In order for sponsorship to work, it must be confirmed on behalf of the sponsor.\r\n\t// ///\r\n\t// /// @param sponsor Address of the sponsor from whose account funds will be debited for operations with the contract.\r\n\t// /// @dev EVM selector for this function is: 0x7623402e,\r\n\t// ///  or in textual repr: setCollectionSponsor(address)\r\n\t// function setCollectionSponsor(address sponsor) external;\r\n\r\n\t/// Set the sponsor of the collection.\r\n\t///\r\n\t/// @dev In order for sponsorship to work, it must be confirmed on behalf of the sponsor.\r\n\t///\r\n\t/// @param sponsor Cross account address of the sponsor from whose account funds will be debited for operations with the contract.\r\n\t/// @dev EVM selector for this function is: 0x84a1d5a8,\r\n\t///  or in textual repr: setCollectionSponsorCross((address,uint256))\r\n\tfunction setCollectionSponsorCross(CrossAddress memory sponsor) external;\r\n\r\n\t/// Whether there is a pending sponsor.\r\n\t/// @dev EVM selector for this function is: 0x058ac185,\r\n\t///  or in textual repr: hasCollectionPendingSponsor()\r\n\tfunction hasCollectionPendingSponsor() external view returns (bool);\r\n\r\n\t/// Collection sponsorship confirmation.\r\n\t///\r\n\t/// @dev After setting the sponsor for the collection, it must be confirmed with this function.\r\n\t/// @dev EVM selector for this function is: 0x3c50e97a,\r\n\t///  or in textual repr: confirmCollectionSponsorship()\r\n\tfunction confirmCollectionSponsorship() external;\r\n\r\n\t/// Remove collection sponsor.\r\n\t/// @dev EVM selector for this function is: 0x6e0326a3,\r\n\t///  or in textual repr: removeCollectionSponsor()\r\n\tfunction removeCollectionSponsor() external;\r\n\r\n\t/// Get current sponsor.\r\n\t///\r\n\t/// @return Tuble with sponsor address and his substrate mirror. If there is no confirmed sponsor error \"Contract has no sponsor\" throw.\r\n\t/// @dev EVM selector for this function is: 0x6ec0a9f1,\r\n\t///  or in textual repr: collectionSponsor()\r\n\tfunction collectionSponsor() external view returns (CrossAddress memory);\r\n\r\n\t/// Get current collection limits.\r\n\t///\r\n\t/// @return Array of collection limits\r\n\t/// @dev EVM selector for this function is: 0xf63bc572,\r\n\t///  or in textual repr: collectionLimits()\r\n\tfunction collectionLimits() external view returns (CollectionLimit[] memory);\r\n\r\n\t/// Set limits for the collection.\r\n\t/// @dev Throws error if limit not found.\r\n\t/// @param limit Some limit.\r\n\t/// @dev EVM selector for this function is: 0x2316ee74,\r\n\t///  or in textual repr: setCollectionLimit((uint8,(bool,uint256)))\r\n\tfunction setCollectionLimit(CollectionLimit memory limit) external;\r\n\r\n\t/// Get contract address.\r\n\t/// @dev EVM selector for this function is: 0xf6b4dfb4,\r\n\t///  or in textual repr: contractAddress()\r\n\tfunction contractAddress() external view returns (address);\r\n\r\n\t/// Add collection admin.\r\n\t/// @param newAdmin Cross account administrator address.\r\n\t/// @dev EVM selector for this function is: 0x859aa7d6,\r\n\t///  or in textual repr: addCollectionAdminCross((address,uint256))\r\n\tfunction addCollectionAdminCross(CrossAddress memory newAdmin) external;\r\n\r\n\t/// Remove collection admin.\r\n\t/// @param admin Cross account administrator address.\r\n\t/// @dev EVM selector for this function is: 0x6c0cd173,\r\n\t///  or in textual repr: removeCollectionAdminCross((address,uint256))\r\n\tfunction removeCollectionAdminCross(CrossAddress memory admin) external;\r\n\r\n\t// /// Add collection admin.\r\n\t// /// @param newAdmin Address of the added administrator.\r\n\t// /// @dev EVM selector for this function is: 0x92e462c7,\r\n\t// ///  or in textual repr: addCollectionAdmin(address)\r\n\t// function addCollectionAdmin(address newAdmin) external;\r\n\r\n\t// /// Remove collection admin.\r\n\t// ///\r\n\t// /// @param admin Address of the removed administrator.\r\n\t// /// @dev EVM selector for this function is: 0xfafd7b42,\r\n\t// ///  or in textual repr: removeCollectionAdmin(address)\r\n\t// function removeCollectionAdmin(address admin) external;\r\n\r\n\t/// Toggle accessibility of collection nesting.\r\n\t///\r\n\t/// @param enable If \"true\" degenerates to nesting: 'Owner' else to nesting: 'Disabled'\r\n\t/// @dev EVM selector for this function is: 0x112d4586,\r\n\t///  or in textual repr: setCollectionNesting(bool)\r\n\tfunction setCollectionNesting(bool enable) external;\r\n\r\n\t/// Toggle accessibility of collection nesting.\r\n\t///\r\n\t/// @param enable If \"true\" degenerates to nesting: {OwnerRestricted: [1, 2, 3]} else to nesting: 'Disabled'\r\n\t/// @param collections Addresses of collections that will be available for nesting.\r\n\t/// @dev EVM selector for this function is: 0x64872396,\r\n\t///  or in textual repr: setCollectionNesting(bool,address[])\r\n\tfunction setCollectionNesting(bool enable, address[] memory collections) external;\r\n\r\n\t/// Returns nesting for a collection\r\n\t/// @dev EVM selector for this function is: 0x22d25bfe,\r\n\t///  or in textual repr: collectionNestingRestrictedCollectionIds()\r\n\tfunction collectionNestingRestrictedCollectionIds() external view returns (CollectionNesting memory);\r\n\r\n\t/// Returns permissions for a collection\r\n\t/// @dev EVM selector for this function is: 0x5b2eaf4b,\r\n\t///  or in textual repr: collectionNestingPermissions()\r\n\tfunction collectionNestingPermissions() external view returns (CollectionNestingPermission[] memory);\r\n\r\n\t/// Set the collection access method.\r\n\t/// @param mode Access mode\r\n\t/// @dev EVM selector for this function is: 0x41835d4c,\r\n\t///  or in textual repr: setCollectionAccess(uint8)\r\n\tfunction setCollectionAccess(AccessMode mode) external;\r\n\r\n\t/// Checks that user allowed to operate with collection.\r\n\t///\r\n\t/// @param user User address to check.\r\n\t/// @dev EVM selector for this function is: 0x91b6df49,\r\n\t///  or in textual repr: allowlistedCross((address,uint256))\r\n\tfunction allowlistedCross(CrossAddress memory user) external view returns (bool);\r\n\r\n\t// /// Add the user to the allowed list.\r\n\t// ///\r\n\t// /// @param user Address of a trusted user.\r\n\t// /// @dev EVM selector for this function is: 0x67844fe6,\r\n\t// ///  or in textual repr: addToCollectionAllowList(address)\r\n\t// function addToCollectionAllowList(address user) external;\r\n\r\n\t/// Add user to allowed list.\r\n\t///\r\n\t/// @param user User cross account address.\r\n\t/// @dev EVM selector for this function is: 0xa0184a3a,\r\n\t///  or in textual repr: addToCollectionAllowListCross((address,uint256))\r\n\tfunction addToCollectionAllowListCross(CrossAddress memory user) external;\r\n\r\n\t// /// Remove the user from the allowed list.\r\n\t// ///\r\n\t// /// @param user Address of a removed user.\r\n\t// /// @dev EVM selector for this function is: 0x85c51acb,\r\n\t// ///  or in textual repr: removeFromCollectionAllowList(address)\r\n\t// function removeFromCollectionAllowList(address user) external;\r\n\r\n\t/// Remove user from allowed list.\r\n\t///\r\n\t/// @param user User cross account address.\r\n\t/// @dev EVM selector for this function is: 0x09ba452a,\r\n\t///  or in textual repr: removeFromCollectionAllowListCross((address,uint256))\r\n\tfunction removeFromCollectionAllowListCross(CrossAddress memory user) external;\r\n\r\n\t/// Switch permission for minting.\r\n\t///\r\n\t/// @param mode Enable if \"true\".\r\n\t/// @dev EVM selector for this function is: 0x00018e84,\r\n\t///  or in textual repr: setCollectionMintMode(bool)\r\n\tfunction setCollectionMintMode(bool mode) external;\r\n\r\n\t// /// Check that account is the owner or admin of the collection\r\n\t// ///\r\n\t// /// @param user account to verify\r\n\t// /// @return \"true\" if account is the owner or admin\r\n\t// /// @dev EVM selector for this function is: 0x9811b0c7,\r\n\t// ///  or in textual repr: isOwnerOrAdmin(address)\r\n\t// function isOwnerOrAdmin(address user) external view returns (bool);\r\n\r\n\t/// Check that account is the owner or admin of the collection\r\n\t///\r\n\t/// @param user User cross account to verify\r\n\t/// @return \"true\" if account is the owner or admin\r\n\t/// @dev EVM selector for this function is: 0x3e75a905,\r\n\t///  or in textual repr: isOwnerOrAdminCross((address,uint256))\r\n\tfunction isOwnerOrAdminCross(CrossAddress memory user) external view returns (bool);\r\n\r\n\t/// Returns collection type\r\n\t///\r\n\t/// @return `Fungible` or `NFT` or `ReFungible`\r\n\t/// @dev EVM selector for this function is: 0xd34b55b8,\r\n\t///  or in textual repr: uniqueCollectionType()\r\n\tfunction uniqueCollectionType() external view returns (string memory);\r\n\r\n\t/// Get collection owner.\r\n\t///\r\n\t/// @return Tuble with sponsor address and his substrate mirror.\r\n\t/// If address is canonical then substrate mirror is zero and vice versa.\r\n\t/// @dev EVM selector for this function is: 0xdf727d3b,\r\n\t///  or in textual repr: collectionOwner()\r\n\tfunction collectionOwner() external view returns (CrossAddress memory);\r\n\r\n\t// /// Changes collection owner to another account\r\n\t// ///\r\n\t// /// @dev Owner can be changed only by current owner\r\n\t// /// @param newOwner new owner account\r\n\t// /// @dev EVM selector for this function is: 0x4f53e226,\r\n\t// ///  or in textual repr: changeCollectionOwner(address)\r\n\t// function changeCollectionOwner(address newOwner) external;\r\n\r\n\t/// Get collection administrators\r\n\t///\r\n\t/// @return Vector of tuples with admins address and his substrate mirror.\r\n\t/// If address is canonical then substrate mirror is zero and vice versa.\r\n\t/// @dev EVM selector for this function is: 0x5813216b,\r\n\t///  or in textual repr: collectionAdmins()\r\n\tfunction collectionAdmins() external view returns (CrossAddress[] memory);\r\n\r\n\t/// Changes collection owner to another account\r\n\t///\r\n\t/// @dev Owner can be changed only by current owner\r\n\t/// @param newOwner new owner cross account\r\n\t/// @dev EVM selector for this function is: 0x6496c497,\r\n\t///  or in textual repr: changeCollectionOwnerCross((address,uint256))\r\n\tfunction changeCollectionOwnerCross(CrossAddress memory newOwner) external;\r\n}\r\n\r\n/// Cross account struct\r\nstruct CrossAddress {\r\n\taddress eth;\r\n\tuint256 sub;\r\n}\r\n\r\n/// Ethereum representation of `AccessMode` (see [`up_data_structs::AccessMode`]).\r\nenum AccessMode {\r\n\t/// Access grant for owner and admins. Used as default.\r\n\tNormal,\r\n\t/// Like a [`Normal`](AccessMode::Normal) but also users in allow list.\r\n\tAllowList\r\n}\r\n\r\n/// Ethereum representation of `NestingPermissions` (see [`up_data_structs::NestingPermissions`]) field.\r\nstruct CollectionNestingPermission {\r\n\tCollectionPermissionField field;\r\n\tbool value;\r\n}\r\n\r\n/// Ethereum representation of `NestingPermissions` (see [`up_data_structs::NestingPermissions`]) fields as an enumeration.\r\nenum CollectionPermissionField {\r\n\t/// Owner of token can nest tokens under it.\r\n\tTokenOwner,\r\n\t/// Admin of token collection can nest tokens under token.\r\n\tCollectionAdmin\r\n}\r\n\r\n/// Nested collections.\r\nstruct CollectionNesting {\r\n\tbool token_owner;\r\n\tuint256[] ids;\r\n}\r\n\r\n/// [`CollectionLimits`](up_data_structs::CollectionLimits) field representation for EVM.\r\nstruct CollectionLimit {\r\n\tCollectionLimitField field;\r\n\tOptionUint256 value;\r\n}\r\n\r\n/// Optional value\r\nstruct OptionUint256 {\r\n\t/// Shows the status of accessibility of value\r\n\tbool status;\r\n\t/// Actual value if `status` is true\r\n\tuint256 value;\r\n}\r\n\r\n/// [`CollectionLimits`](up_data_structs::CollectionLimits) fields representation for EVM.\r\nenum CollectionLimitField {\r\n\t/// How many tokens can a user have on one account.\r\n\tAccountTokenOwnership,\r\n\t/// How many bytes of data are available for sponsorship.\r\n\tSponsoredDataSize,\r\n\t/// In any case, chain default: [`SponsoringRateLimit::SponsoringDisabled`]\r\n\tSponsoredDataRateLimit,\r\n\t/// How many tokens can be mined into this collection.\r\n\tTokenLimit,\r\n\t/// Timeouts for transfer sponsoring.\r\n\tSponsorTransferTimeout,\r\n\t/// Timeout for sponsoring an approval in passed blocks.\r\n\tSponsorApproveTimeout,\r\n\t/// Whether the collection owner of the collection can send tokens (which belong to other users).\r\n\tOwnerCanTransfer,\r\n\t/// Can the collection owner burn other people's tokens.\r\n\tOwnerCanDestroy,\r\n\t/// Is it possible to send tokens from this collection between users.\r\n\tTransferEnabled\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\r\n/// @dev the ERC-165 identifier for this interface is 0x5b5e139f\r\ninterface ERC721Metadata is Dummy, ERC165 {\r\n\t// /// @notice A descriptive name for a collection of NFTs in this contract\r\n\t// /// @dev real implementation of this function lies in `ERC721UniqueExtensions`\r\n\t// /// @dev EVM selector for this function is: 0x06fdde03,\r\n\t// ///  or in textual repr: name()\r\n\t// function name() external view returns (string memory);\r\n\r\n\t// /// @notice An abbreviated name for NFTs in this contract\r\n\t// /// @dev real implementation of this function lies in `ERC721UniqueExtensions`\r\n\t// /// @dev EVM selector for this function is: 0x95d89b41,\r\n\t// ///  or in textual repr: symbol()\r\n\t// function symbol() external view returns (string memory);\r\n\r\n\t/// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\r\n\t///\r\n\t/// @dev If the token has a `url` property and it is not empty, it is returned.\r\n\t///  Else If the collection does not have a property with key `schemaName` or its value is not equal to `ERC721Metadata`, it return an error `tokenURI not set`.\r\n\t///  If the collection property `baseURI` is empty or absent, return \"\" (empty string)\r\n\t///  otherwise, if token property `suffix` present and is non-empty, return concatenation of baseURI and suffix\r\n\t///  otherwise, return concatenation of `baseURI` and stringified token id (decimal stringifying, without paddings).\r\n\t///\r\n\t/// @return token's const_metadata\r\n\t/// @dev EVM selector for this function is: 0xc87b56dd,\r\n\t///  or in textual repr: tokenURI(uint256)\r\n\tfunction tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n\r\n/// @title ERC721 Token that can be irreversibly burned (destroyed).\r\n/// @dev the ERC-165 identifier for this interface is 0x42966c68\r\ninterface ERC721Burnable is Dummy, ERC165 {\r\n\t/// @notice Burns a specific ERC721 token.\r\n\t/// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n\t///  operator of the current owner.\r\n\t/// @param tokenId The NFT to approve\r\n\t/// @dev EVM selector for this function is: 0x42966c68,\r\n\t///  or in textual repr: burn(uint256)\r\n\tfunction burn(uint256 tokenId) external;\r\n}\r\n\r\n/// @title ERC721 minting logic.\r\n/// @dev the ERC-165 identifier for this interface is 0x3fd94ea6\r\ninterface ERC721UniqueMintable is Dummy, ERC165 {\r\n\t/// @notice Function to mint a token.\r\n\t/// @param to The new owner\r\n\t/// @return uint256 The id of the newly minted token\r\n\t/// @dev EVM selector for this function is: 0x6a627842,\r\n\t///  or in textual repr: mint(address)\r\n\tfunction mint(address to) external returns (uint256);\r\n\r\n\t// /// @notice Function to mint a token.\r\n\t// /// @dev `tokenId` should be obtained with `nextTokenId` method,\r\n\t// ///  unlike standard, you can't specify it manually\r\n\t// /// @param to The new owner\r\n\t// /// @param tokenId ID of the minted NFT\r\n\t// /// @dev EVM selector for this function is: 0x40c10f19,\r\n\t// ///  or in textual repr: mint(address,uint256)\r\n\t// function mint(address to, uint256 tokenId) external returns (bool);\r\n\r\n\t/// @notice Function to mint token with the given tokenUri.\r\n\t/// @param to The new owner\r\n\t/// @param tokenUri Token URI that would be stored in the NFT properties\r\n\t/// @return uint256 The id of the newly minted token\r\n\t/// @dev EVM selector for this function is: 0x45c17782,\r\n\t///  or in textual repr: mintWithTokenURI(address,string)\r\n\tfunction mintWithTokenURI(address to, string memory tokenUri) external returns (uint256);\r\n\t// /// @notice Function to mint token with the given tokenUri.\r\n\t// /// @dev `tokenId` should be obtained with `nextTokenId` method,\r\n\t// ///  unlike standard, you can't specify it manually\r\n\t// /// @param to The new owner\r\n\t// /// @param tokenId ID of the minted NFT\r\n\t// /// @param tokenUri Token URI that would be stored in the NFT properties\r\n\t// /// @dev EVM selector for this function is: 0x50bb4e7f,\r\n\t// ///  or in textual repr: mintWithTokenURI(address,uint256,string)\r\n\t// function mintWithTokenURI(address to, uint256 tokenId, string memory tokenUri) external returns (bool);\r\n\r\n}\r\n\r\n/// @title Unique extensions for ERC721.\r\n/// @dev the ERC-165 identifier for this interface is 0x16de3152\r\ninterface ERC721UniqueExtensions is Dummy, ERC165 {\r\n\t/// @notice A descriptive name for a collection of NFTs in this contract\r\n\t/// @dev EVM selector for this function is: 0x06fdde03,\r\n\t///  or in textual repr: name()\r\n\tfunction name() external view returns (string memory);\r\n\r\n\t/// @notice An abbreviated name for NFTs in this contract\r\n\t/// @dev EVM selector for this function is: 0x95d89b41,\r\n\t///  or in textual repr: symbol()\r\n\tfunction symbol() external view returns (string memory);\r\n\r\n\t/// @notice A description for the collection.\r\n\t/// @dev EVM selector for this function is: 0x7284e416,\r\n\t///  or in textual repr: description()\r\n\tfunction description() external view returns (string memory);\r\n\r\n\t/// Returns the owner (in cross format) of the token.\r\n\t///\r\n\t/// @param tokenId Id for the token.\r\n\t/// @dev EVM selector for this function is: 0x2b29dace,\r\n\t///  or in textual repr: crossOwnerOf(uint256)\r\n\tfunction crossOwnerOf(uint256 tokenId) external view returns (CrossAddress memory);\r\n\r\n\t/// Returns the token properties.\r\n\t///\r\n\t/// @param tokenId Id for the token.\r\n\t/// @param keys Properties keys. Empty keys for all propertyes.\r\n\t/// @return Vector of properties key/value pairs.\r\n\t/// @dev EVM selector for this function is: 0xe07ede7e,\r\n\t///  or in textual repr: properties(uint256,string[])\r\n\tfunction properties(uint256 tokenId, string[] memory keys) external view returns (Property[] memory);\r\n\r\n\t/// @notice Set or reaffirm the approved address for an NFT\r\n\t/// @dev The zero address indicates there is no approved address.\r\n\t/// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n\t///  operator of the current owner.\r\n\t/// @param approved The new substrate address approved NFT controller\r\n\t/// @param tokenId The NFT to approve\r\n\t/// @dev EVM selector for this function is: 0x0ecd0ab0,\r\n\t///  or in textual repr: approveCross((address,uint256),uint256)\r\n\tfunction approveCross(CrossAddress memory approved, uint256 tokenId) external;\r\n\r\n\t/// @notice Transfer ownership of an NFT\r\n\t/// @dev Throws unless `msg.sender` is the current owner. Throws if `to`\r\n\t///  is the zero address. Throws if `tokenId` is not a valid NFT.\r\n\t/// @param to The new owner\r\n\t/// @param tokenId The NFT to transfer\r\n\t/// @dev EVM selector for this function is: 0xa9059cbb,\r\n\t///  or in textual repr: transfer(address,uint256)\r\n\tfunction transfer(address to, uint256 tokenId) external;\r\n\r\n\t/// @notice Transfer ownership of an NFT\r\n\t/// @dev Throws unless `msg.sender` is the current owner. Throws if `to`\r\n\t///  is the zero address. Throws if `tokenId` is not a valid NFT.\r\n\t/// @param to The new owner\r\n\t/// @param tokenId The NFT to transfer\r\n\t/// @dev EVM selector for this function is: 0x2ada85ff,\r\n\t///  or in textual repr: transferCross((address,uint256),uint256)\r\n\tfunction transferCross(CrossAddress memory to, uint256 tokenId) external;\r\n\r\n\t/// @notice Transfer ownership of an NFT from cross account address to cross account address\r\n\t/// @dev Throws unless `msg.sender` is the current owner. Throws if `to`\r\n\t///  is the zero address. Throws if `tokenId` is not a valid NFT.\r\n\t/// @param from Cross acccount address of current owner\r\n\t/// @param to Cross acccount address of new owner\r\n\t/// @param tokenId The NFT to transfer\r\n\t/// @dev EVM selector for this function is: 0xd5cf430b,\r\n\t///  or in textual repr: transferFromCross((address,uint256),(address,uint256),uint256)\r\n\tfunction transferFromCross(\r\n\t\tCrossAddress memory from,\r\n\t\tCrossAddress memory to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t// /// @notice Burns a specific ERC721 token.\r\n\t// /// @dev Throws unless `msg.sender` is the current owner or an authorized\r\n\t// ///  operator for this NFT. Throws if `from` is not the current owner. Throws\r\n\t// ///  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.\r\n\t// /// @param from The current owner of the NFT\r\n\t// /// @param tokenId The NFT to transfer\r\n\t// /// @dev EVM selector for this function is: 0x79cc6790,\r\n\t// ///  or in textual repr: burnFrom(address,uint256)\r\n\t// function burnFrom(address from, uint256 tokenId) external;\r\n\r\n\t/// @notice Burns a specific ERC721 token.\r\n\t/// @dev Throws unless `msg.sender` is the current owner or an authorized\r\n\t///  operator for this NFT. Throws if `from` is not the current owner. Throws\r\n\t///  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.\r\n\t/// @param from The current owner of the NFT\r\n\t/// @param tokenId The NFT to transfer\r\n\t/// @dev EVM selector for this function is: 0xbb2f5a58,\r\n\t///  or in textual repr: burnFromCross((address,uint256),uint256)\r\n\tfunction burnFromCross(CrossAddress memory from, uint256 tokenId) external;\r\n\r\n\t/// @notice Returns next free NFT ID.\r\n\t/// @dev EVM selector for this function is: 0x75794a3c,\r\n\t///  or in textual repr: nextTokenId()\r\n\tfunction nextTokenId() external view returns (uint256);\r\n\r\n\t// /// @notice Function to mint multiple tokens.\r\n\t// /// @dev `tokenIds` should be an array of consecutive numbers and first number\r\n\t// ///  should be obtained with `nextTokenId` method\r\n\t// /// @param to The new owner\r\n\t// /// @param tokenIds IDs of the minted NFTs\r\n\t// /// @dev EVM selector for this function is: 0x44a9945e,\r\n\t// ///  or in textual repr: mintBulk(address,uint256[])\r\n\t// function mintBulk(address to, uint256[] memory tokenIds) external returns (bool);\r\n\r\n\t// /// @notice Function to mint multiple tokens with the given tokenUris.\r\n\t// /// @dev `tokenIds` is array of pairs of token ID and token URI. Token IDs should be consecutive\r\n\t// ///  numbers and first number should be obtained with `nextTokenId` method\r\n\t// /// @param to The new owner\r\n\t// /// @param tokens array of pairs of token ID and token URI for minted tokens\r\n\t// /// @dev EVM selector for this function is: 0x36543006,\r\n\t// ///  or in textual repr: mintBulkWithTokenURI(address,(uint256,string)[])\r\n\t// function mintBulkWithTokenURI(address to, TokenUri[] memory tokens) external returns (bool);\r\n\r\n\t/// @notice Function to mint a token.\r\n\t/// @param to The new owner crossAccountId\r\n\t/// @param properties Properties of minted token\r\n\t/// @return uint256 The id of the newly minted token\r\n\t/// @dev EVM selector for this function is: 0xb904db03,\r\n\t///  or in textual repr: mintCross((address,uint256),(string,bytes)[])\r\n\tfunction mintCross(CrossAddress memory to, Property[] memory properties) external returns (uint256);\r\n\r\n\t/// @notice Returns collection helper contract address\r\n\t/// @dev EVM selector for this function is: 0x1896cce6,\r\n\t///  or in textual repr: collectionHelperAddress()\r\n\tfunction collectionHelperAddress() external view returns (address);\r\n}\r\n\r\n/// Data for creation token with uri.\r\nstruct TokenUri {\r\n\t/// Id of new token.\r\n\tuint256 id;\r\n\t/// Uri of new token.\r\n\tstring uri;\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\r\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\r\n/// @dev the ERC-165 identifier for this interface is 0x780e9d63\r\ninterface ERC721Enumerable is Dummy, ERC165 {\r\n\t/// @notice Enumerate valid NFTs\r\n\t/// @param index A counter less than `totalSupply()`\r\n\t/// @return The token identifier for the `index`th NFT,\r\n\t///  (sort order not specified)\r\n\t/// @dev EVM selector for this function is: 0x4f6ccce7,\r\n\t///  or in textual repr: tokenByIndex(uint256)\r\n\tfunction tokenByIndex(uint256 index) external view returns (uint256);\r\n\r\n\t/// @dev Not implemented\r\n\t/// @dev EVM selector for this function is: 0x2f745c59,\r\n\t///  or in textual repr: tokenOfOwnerByIndex(address,uint256)\r\n\tfunction tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\r\n\r\n\t/// @notice Count NFTs tracked by this contract\r\n\t/// @return A count of valid NFTs tracked by this contract, where each one of\r\n\t///  them has an assigned and queryable owner not equal to the zero address\r\n\t/// @dev EVM selector for this function is: 0x18160ddd,\r\n\t///  or in textual repr: totalSupply()\r\n\tfunction totalSupply() external view returns (uint256);\r\n}\r\n\r\n/// @dev inlined interface\r\ninterface ERC721Events {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\tevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n}\r\n\r\n/// @title ERC-721 Non-Fungible Token Standard\r\n/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\r\n/// @dev the ERC-165 identifier for this interface is 0x80ac58cd\r\ninterface ERC721 is Dummy, ERC165, ERC721Events {\r\n\t/// @notice Count all NFTs assigned to an owner\r\n\t/// @dev NFTs assigned to the zero address are considered invalid, and this\r\n\t///  function throws for queries about the zero address.\r\n\t/// @param owner An address for whom to query the balance\r\n\t/// @return The number of NFTs owned by `owner`, possibly zero\r\n\t/// @dev EVM selector for this function is: 0x70a08231,\r\n\t///  or in textual repr: balanceOf(address)\r\n\tfunction balanceOf(address owner) external view returns (uint256);\r\n\r\n\t/// @notice Find the owner of an NFT\r\n\t/// @dev NFTs assigned to zero address are considered invalid, and queries\r\n\t///  about them do throw.\r\n\t/// @param tokenId The identifier for an NFT\r\n\t/// @return The address of the owner of the NFT\r\n\t/// @dev EVM selector for this function is: 0x6352211e,\r\n\t///  or in textual repr: ownerOf(uint256)\r\n\tfunction ownerOf(uint256 tokenId) external view returns (address);\r\n\r\n\t/// @dev Not implemented\r\n\t/// @dev EVM selector for this function is: 0xb88d4fde,\r\n\t///  or in textual repr: safeTransferFrom(address,address,uint256,bytes)\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId,\r\n\t\tbytes memory data\r\n\t) external;\r\n\r\n\t/// @dev Not implemented\r\n\t/// @dev EVM selector for this function is: 0x42842e0e,\r\n\t///  or in textual repr: safeTransferFrom(address,address,uint256)\r\n\tfunction safeTransferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t/// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\r\n\t///  TO CONFIRM THAT `to` IS CAPABLE OF RECEIVING NFTS OR ELSE\r\n\t///  THEY MAY BE PERMANENTLY LOST\r\n\t/// @dev Throws unless `msg.sender` is the current owner or an authorized\r\n\t///  operator for this NFT. Throws if `from` is not the current owner. Throws\r\n\t///  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.\r\n\t/// @param from The current owner of the NFT\r\n\t/// @param to The new owner\r\n\t/// @param tokenId The NFT to transfer\r\n\t/// @dev EVM selector for this function is: 0x23b872dd,\r\n\t///  or in textual repr: transferFrom(address,address,uint256)\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 tokenId\r\n\t) external;\r\n\r\n\t/// @notice Set or reaffirm the approved address for an NFT\r\n\t/// @dev The zero address indicates there is no approved address.\r\n\t/// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\r\n\t///  operator of the current owner.\r\n\t/// @param approved The new approved NFT controller\r\n\t/// @param tokenId The NFT to approve\r\n\t/// @dev EVM selector for this function is: 0x095ea7b3,\r\n\t///  or in textual repr: approve(address,uint256)\r\n\tfunction approve(address approved, uint256 tokenId) external;\r\n\r\n\t/// @notice Sets or unsets the approval of a given operator.\r\n\t/// The `operator` is allowed to transfer all tokens of the `caller` on their behalf.\r\n\t/// @param operator Operator\r\n\t/// @param approved Should operator status be granted or revoked?\r\n\t/// @dev EVM selector for this function is: 0xa22cb465,\r\n\t///  or in textual repr: setApprovalForAll(address,bool)\r\n\tfunction setApprovalForAll(address operator, bool approved) external;\r\n\r\n\t/// @notice Get the approved address for a single NFT\r\n\t/// @dev Throws if `tokenId` is not a valid NFT\r\n\t/// @param tokenId The NFT to find the approved address for\r\n\t/// @return The approved address for this NFT, or the zero address if there is none\r\n\t/// @dev EVM selector for this function is: 0x081812fc,\r\n\t///  or in textual repr: getApproved(uint256)\r\n\tfunction getApproved(uint256 tokenId) external view returns (address);\r\n\r\n\t/// @notice Tells whether the given `owner` approves the `operator`.\r\n\t/// @dev EVM selector for this function is: 0xe985e9c5,\r\n\t///  or in textual repr: isApprovedForAll(address,address)\r\n\tfunction isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n\r\ninterface UniqueNFT is\r\n\tDummy,\r\n\tERC165,\r\n\tERC721,\r\n\tERC721Enumerable,\r\n\tERC721UniqueExtensions,\r\n\tERC721UniqueMintable,\r\n\tERC721Burnable,\r\n\tERC721Metadata,\r\n\tCollection,\r\n\tTokenProperties\r\n{}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"contracts/UniqueNFT.sol": {
				"Collection": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "newAdmin",
									"type": "tuple"
								}
							],
							"name": "addCollectionAdminCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "user",
									"type": "tuple"
								}
							],
							"name": "addToCollectionAllowListCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "user",
									"type": "tuple"
								}
							],
							"name": "allowlistedCross",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "newOwner",
									"type": "tuple"
								}
							],
							"name": "changeCollectionOwnerCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionAdmins",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionLimits",
							"outputs": [
								{
									"components": [
										{
											"internalType": "enum CollectionLimitField",
											"name": "field",
											"type": "uint8"
										},
										{
											"components": [
												{
													"internalType": "bool",
													"name": "status",
													"type": "bool"
												},
												{
													"internalType": "uint256",
													"name": "value",
													"type": "uint256"
												}
											],
											"internalType": "struct OptionUint256",
											"name": "value",
											"type": "tuple"
										}
									],
									"internalType": "struct CollectionLimit[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionNestingPermissions",
							"outputs": [
								{
									"components": [
										{
											"internalType": "enum CollectionPermissionField",
											"name": "field",
											"type": "uint8"
										},
										{
											"internalType": "bool",
											"name": "value",
											"type": "bool"
										}
									],
									"internalType": "struct CollectionNestingPermission[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionNestingRestrictedCollectionIds",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bool",
											"name": "token_owner",
											"type": "bool"
										},
										{
											"internalType": "uint256[]",
											"name": "ids",
											"type": "uint256[]"
										}
									],
									"internalType": "struct CollectionNesting",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionOwner",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string[]",
									"name": "keys",
									"type": "string[]"
								}
							],
							"name": "collectionProperties",
							"outputs": [
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"internalType": "bytes",
											"name": "value",
											"type": "bytes"
										}
									],
									"internalType": "struct Property[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "key",
									"type": "string"
								}
							],
							"name": "collectionProperty",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionSponsor",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "confirmCollectionSponsorship",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "contractAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string[]",
									"name": "keys",
									"type": "string[]"
								}
							],
							"name": "deleteCollectionProperties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasCollectionPendingSponsor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "user",
									"type": "tuple"
								}
							],
							"name": "isOwnerOrAdminCross",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "admin",
									"type": "tuple"
								}
							],
							"name": "removeCollectionAdminCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "removeCollectionSponsor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "user",
									"type": "tuple"
								}
							],
							"name": "removeFromCollectionAllowListCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "enum AccessMode",
									"name": "mode",
									"type": "uint8"
								}
							],
							"name": "setCollectionAccess",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "enum CollectionLimitField",
											"name": "field",
											"type": "uint8"
										},
										{
											"components": [
												{
													"internalType": "bool",
													"name": "status",
													"type": "bool"
												},
												{
													"internalType": "uint256",
													"name": "value",
													"type": "uint256"
												}
											],
											"internalType": "struct OptionUint256",
											"name": "value",
											"type": "tuple"
										}
									],
									"internalType": "struct CollectionLimit",
									"name": "limit",
									"type": "tuple"
								}
							],
							"name": "setCollectionLimit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "mode",
									"type": "bool"
								}
							],
							"name": "setCollectionMintMode",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "enable",
									"type": "bool"
								}
							],
							"name": "setCollectionNesting",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "enable",
									"type": "bool"
								},
								{
									"internalType": "address[]",
									"name": "collections",
									"type": "address[]"
								}
							],
							"name": "setCollectionNesting",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"internalType": "bytes",
											"name": "value",
											"type": "bytes"
										}
									],
									"internalType": "struct Property[]",
									"name": "properties",
									"type": "tuple[]"
								}
							],
							"name": "setCollectionProperties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "sponsor",
									"type": "tuple"
								}
							],
							"name": "setCollectionSponsorCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceID",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "uniqueCollectionType",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "the ERC-165 identifier for this interface is 0x2a14cfd1",
						"kind": "dev",
						"methods": {
							"addCollectionAdminCross((address,uint256))": {
								"details": "EVM selector for this function is: 0x859aa7d6,  or in textual repr: addCollectionAdminCross((address,uint256))",
								"params": {
									"newAdmin": "Cross account administrator address."
								}
							},
							"addToCollectionAllowListCross((address,uint256))": {
								"details": "EVM selector for this function is: 0xa0184a3a,  or in textual repr: addToCollectionAllowListCross((address,uint256))",
								"params": {
									"user": "User cross account address."
								}
							},
							"allowlistedCross((address,uint256))": {
								"details": "EVM selector for this function is: 0x91b6df49,  or in textual repr: allowlistedCross((address,uint256))",
								"params": {
									"user": "User address to check."
								}
							},
							"changeCollectionOwnerCross((address,uint256))": {
								"details": "Owner can be changed only by current ownerEVM selector for this function is: 0x6496c497,  or in textual repr: changeCollectionOwnerCross((address,uint256))",
								"params": {
									"newOwner": "new owner cross account"
								}
							},
							"collectionAdmins()": {
								"details": "EVM selector for this function is: 0x5813216b,  or in textual repr: collectionAdmins()",
								"returns": {
									"_0": "Vector of tuples with admins address and his substrate mirror. If address is canonical then substrate mirror is zero and vice versa."
								}
							},
							"collectionLimits()": {
								"details": "EVM selector for this function is: 0xf63bc572,  or in textual repr: collectionLimits()",
								"returns": {
									"_0": "Array of collection limits"
								}
							},
							"collectionNestingPermissions()": {
								"details": "EVM selector for this function is: 0x5b2eaf4b,  or in textual repr: collectionNestingPermissions()"
							},
							"collectionNestingRestrictedCollectionIds()": {
								"details": "EVM selector for this function is: 0x22d25bfe,  or in textual repr: collectionNestingRestrictedCollectionIds()"
							},
							"collectionOwner()": {
								"details": "EVM selector for this function is: 0xdf727d3b,  or in textual repr: collectionOwner()",
								"returns": {
									"_0": "Tuble with sponsor address and his substrate mirror. If address is canonical then substrate mirror is zero and vice versa."
								}
							},
							"collectionProperties(string[])": {
								"details": "EVM selector for this function is: 0x285fb8e6,  or in textual repr: collectionProperties(string[])",
								"params": {
									"keys": "Properties keys. Empty keys for all propertyes."
								},
								"returns": {
									"_0": "Vector of properties key/value pairs."
								}
							},
							"collectionProperty(string)": {
								"details": "Throws error if key not found.EVM selector for this function is: 0xcf24fd6d,  or in textual repr: collectionProperty(string)",
								"params": {
									"key": "Property key."
								},
								"returns": {
									"_0": "bytes The property corresponding to the key."
								}
							},
							"collectionSponsor()": {
								"details": "EVM selector for this function is: 0x6ec0a9f1,  or in textual repr: collectionSponsor()",
								"returns": {
									"_0": "Tuble with sponsor address and his substrate mirror. If there is no confirmed sponsor error \"Contract has no sponsor\" throw."
								}
							},
							"confirmCollectionSponsorship()": {
								"details": "After setting the sponsor for the collection, it must be confirmed with this function.EVM selector for this function is: 0x3c50e97a,  or in textual repr: confirmCollectionSponsorship()"
							},
							"contractAddress()": {
								"details": "EVM selector for this function is: 0xf6b4dfb4,  or in textual repr: contractAddress()"
							},
							"deleteCollectionProperties(string[])": {
								"details": "EVM selector for this function is: 0xee206ee3,  or in textual repr: deleteCollectionProperties(string[])",
								"params": {
									"keys": "Properties keys."
								}
							},
							"hasCollectionPendingSponsor()": {
								"details": "EVM selector for this function is: 0x058ac185,  or in textual repr: hasCollectionPendingSponsor()"
							},
							"isOwnerOrAdminCross((address,uint256))": {
								"details": "EVM selector for this function is: 0x3e75a905,  or in textual repr: isOwnerOrAdminCross((address,uint256))",
								"params": {
									"user": "User cross account to verify"
								},
								"returns": {
									"_0": "\"true\" if account is the owner or admin"
								}
							},
							"removeCollectionAdminCross((address,uint256))": {
								"details": "EVM selector for this function is: 0x6c0cd173,  or in textual repr: removeCollectionAdminCross((address,uint256))",
								"params": {
									"admin": "Cross account administrator address."
								}
							},
							"removeCollectionSponsor()": {
								"details": "EVM selector for this function is: 0x6e0326a3,  or in textual repr: removeCollectionSponsor()"
							},
							"removeFromCollectionAllowListCross((address,uint256))": {
								"details": "EVM selector for this function is: 0x09ba452a,  or in textual repr: removeFromCollectionAllowListCross((address,uint256))",
								"params": {
									"user": "User cross account address."
								}
							},
							"setCollectionAccess(uint8)": {
								"details": "EVM selector for this function is: 0x41835d4c,  or in textual repr: setCollectionAccess(uint8)",
								"params": {
									"mode": "Access mode"
								}
							},
							"setCollectionLimit((uint8,(bool,uint256)))": {
								"details": "Throws error if limit not found.EVM selector for this function is: 0x2316ee74,  or in textual repr: setCollectionLimit((uint8,(bool,uint256)))",
								"params": {
									"limit": "Some limit."
								}
							},
							"setCollectionMintMode(bool)": {
								"details": "EVM selector for this function is: 0x00018e84,  or in textual repr: setCollectionMintMode(bool)",
								"params": {
									"mode": "Enable if \"true\"."
								}
							},
							"setCollectionNesting(bool)": {
								"details": "EVM selector for this function is: 0x112d4586,  or in textual repr: setCollectionNesting(bool)",
								"params": {
									"enable": "If \"true\" degenerates to nesting: 'Owner' else to nesting: 'Disabled'"
								}
							},
							"setCollectionNesting(bool,address[])": {
								"details": "EVM selector for this function is: 0x64872396,  or in textual repr: setCollectionNesting(bool,address[])",
								"params": {
									"collections": "Addresses of collections that will be available for nesting.",
									"enable": "If \"true\" degenerates to nesting: {OwnerRestricted: [1, 2, 3]} else to nesting: 'Disabled'"
								}
							},
							"setCollectionProperties((string,bytes)[])": {
								"details": "EVM selector for this function is: 0x50b26b2a,  or in textual repr: setCollectionProperties((string,bytes)[])",
								"params": {
									"properties": "Vector of properties key/value pair."
								}
							},
							"setCollectionSponsorCross((address,uint256))": {
								"details": "In order for sponsorship to work, it must be confirmed on behalf of the sponsor.EVM selector for this function is: 0x84a1d5a8,  or in textual repr: setCollectionSponsorCross((address,uint256))",
								"params": {
									"sponsor": "Cross account address of the sponsor from whose account funds will be debited for operations with the contract."
								}
							},
							"uniqueCollectionType()": {
								"details": "EVM selector for this function is: 0xd34b55b8,  or in textual repr: uniqueCollectionType()",
								"returns": {
									"_0": "`Fungible` or `NFT` or `ReFungible`"
								}
							}
						},
						"title": "A contract that allows you to work with collections.",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addCollectionAdminCross((address,uint256))": "859aa7d6",
							"addToCollectionAllowListCross((address,uint256))": "a0184a3a",
							"allowlistedCross((address,uint256))": "91b6df49",
							"changeCollectionOwnerCross((address,uint256))": "6496c497",
							"collectionAdmins()": "5813216b",
							"collectionLimits()": "f63bc572",
							"collectionNestingPermissions()": "5b2eaf4b",
							"collectionNestingRestrictedCollectionIds()": "22d25bfe",
							"collectionOwner()": "df727d3b",
							"collectionProperties(string[])": "285fb8e6",
							"collectionProperty(string)": "cf24fd6d",
							"collectionSponsor()": "6ec0a9f1",
							"confirmCollectionSponsorship()": "3c50e97a",
							"contractAddress()": "f6b4dfb4",
							"deleteCollectionProperties(string[])": "ee206ee3",
							"hasCollectionPendingSponsor()": "058ac185",
							"isOwnerOrAdminCross((address,uint256))": "3e75a905",
							"removeCollectionAdminCross((address,uint256))": "6c0cd173",
							"removeCollectionSponsor()": "6e0326a3",
							"removeFromCollectionAllowListCross((address,uint256))": "09ba452a",
							"setCollectionAccess(uint8)": "41835d4c",
							"setCollectionLimit((uint8,(bool,uint256)))": "2316ee74",
							"setCollectionMintMode(bool)": "00018e84",
							"setCollectionNesting(bool)": "112d4586",
							"setCollectionNesting(bool,address[])": "64872396",
							"setCollectionProperties((string,bytes)[])": "50b26b2a",
							"setCollectionSponsorCross((address,uint256))": "84a1d5a8",
							"supportsInterface(bytes4)": "01ffc9a7",
							"uniqueCollectionType()": "d34b55b8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"newAdmin\",\"type\":\"tuple\"}],\"name\":\"addCollectionAdminCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"user\",\"type\":\"tuple\"}],\"name\":\"addToCollectionAllowListCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"user\",\"type\":\"tuple\"}],\"name\":\"allowlistedCross\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"newOwner\",\"type\":\"tuple\"}],\"name\":\"changeCollectionOwnerCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionAdmins\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"enum CollectionLimitField\",\"name\":\"field\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionUint256\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct CollectionLimit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionNestingPermissions\",\"outputs\":[{\"components\":[{\"internalType\":\"enum CollectionPermissionField\",\"name\":\"field\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct CollectionNestingPermission[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionNestingRestrictedCollectionIds\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"token_owner\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CollectionNesting\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"collectionProperties\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct Property[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"collectionProperty\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSponsor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmCollectionSponsorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"deleteCollectionProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasCollectionPendingSponsor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"user\",\"type\":\"tuple\"}],\"name\":\"isOwnerOrAdminCross\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"admin\",\"type\":\"tuple\"}],\"name\":\"removeCollectionAdminCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeCollectionSponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"user\",\"type\":\"tuple\"}],\"name\":\"removeFromCollectionAllowListCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AccessMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"setCollectionAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum CollectionLimitField\",\"name\":\"field\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionUint256\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct CollectionLimit\",\"name\":\"limit\",\"type\":\"tuple\"}],\"name\":\"setCollectionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mode\",\"type\":\"bool\"}],\"name\":\"setCollectionMintMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setCollectionNesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"}],\"name\":\"setCollectionNesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct Property[]\",\"name\":\"properties\",\"type\":\"tuple[]\"}],\"name\":\"setCollectionProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"sponsor\",\"type\":\"tuple\"}],\"name\":\"setCollectionSponsorCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueCollectionType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"the ERC-165 identifier for this interface is 0x2a14cfd1\",\"kind\":\"dev\",\"methods\":{\"addCollectionAdminCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0x859aa7d6,  or in textual repr: addCollectionAdminCross((address,uint256))\",\"params\":{\"newAdmin\":\"Cross account administrator address.\"}},\"addToCollectionAllowListCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0xa0184a3a,  or in textual repr: addToCollectionAllowListCross((address,uint256))\",\"params\":{\"user\":\"User cross account address.\"}},\"allowlistedCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0x91b6df49,  or in textual repr: allowlistedCross((address,uint256))\",\"params\":{\"user\":\"User address to check.\"}},\"changeCollectionOwnerCross((address,uint256))\":{\"details\":\"Owner can be changed only by current ownerEVM selector for this function is: 0x6496c497,  or in textual repr: changeCollectionOwnerCross((address,uint256))\",\"params\":{\"newOwner\":\"new owner cross account\"}},\"collectionAdmins()\":{\"details\":\"EVM selector for this function is: 0x5813216b,  or in textual repr: collectionAdmins()\",\"returns\":{\"_0\":\"Vector of tuples with admins address and his substrate mirror. If address is canonical then substrate mirror is zero and vice versa.\"}},\"collectionLimits()\":{\"details\":\"EVM selector for this function is: 0xf63bc572,  or in textual repr: collectionLimits()\",\"returns\":{\"_0\":\"Array of collection limits\"}},\"collectionNestingPermissions()\":{\"details\":\"EVM selector for this function is: 0x5b2eaf4b,  or in textual repr: collectionNestingPermissions()\"},\"collectionNestingRestrictedCollectionIds()\":{\"details\":\"EVM selector for this function is: 0x22d25bfe,  or in textual repr: collectionNestingRestrictedCollectionIds()\"},\"collectionOwner()\":{\"details\":\"EVM selector for this function is: 0xdf727d3b,  or in textual repr: collectionOwner()\",\"returns\":{\"_0\":\"Tuble with sponsor address and his substrate mirror. If address is canonical then substrate mirror is zero and vice versa.\"}},\"collectionProperties(string[])\":{\"details\":\"EVM selector for this function is: 0x285fb8e6,  or in textual repr: collectionProperties(string[])\",\"params\":{\"keys\":\"Properties keys. Empty keys for all propertyes.\"},\"returns\":{\"_0\":\"Vector of properties key/value pairs.\"}},\"collectionProperty(string)\":{\"details\":\"Throws error if key not found.EVM selector for this function is: 0xcf24fd6d,  or in textual repr: collectionProperty(string)\",\"params\":{\"key\":\"Property key.\"},\"returns\":{\"_0\":\"bytes The property corresponding to the key.\"}},\"collectionSponsor()\":{\"details\":\"EVM selector for this function is: 0x6ec0a9f1,  or in textual repr: collectionSponsor()\",\"returns\":{\"_0\":\"Tuble with sponsor address and his substrate mirror. If there is no confirmed sponsor error \\\"Contract has no sponsor\\\" throw.\"}},\"confirmCollectionSponsorship()\":{\"details\":\"After setting the sponsor for the collection, it must be confirmed with this function.EVM selector for this function is: 0x3c50e97a,  or in textual repr: confirmCollectionSponsorship()\"},\"contractAddress()\":{\"details\":\"EVM selector for this function is: 0xf6b4dfb4,  or in textual repr: contractAddress()\"},\"deleteCollectionProperties(string[])\":{\"details\":\"EVM selector for this function is: 0xee206ee3,  or in textual repr: deleteCollectionProperties(string[])\",\"params\":{\"keys\":\"Properties keys.\"}},\"hasCollectionPendingSponsor()\":{\"details\":\"EVM selector for this function is: 0x058ac185,  or in textual repr: hasCollectionPendingSponsor()\"},\"isOwnerOrAdminCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0x3e75a905,  or in textual repr: isOwnerOrAdminCross((address,uint256))\",\"params\":{\"user\":\"User cross account to verify\"},\"returns\":{\"_0\":\"\\\"true\\\" if account is the owner or admin\"}},\"removeCollectionAdminCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0x6c0cd173,  or in textual repr: removeCollectionAdminCross((address,uint256))\",\"params\":{\"admin\":\"Cross account administrator address.\"}},\"removeCollectionSponsor()\":{\"details\":\"EVM selector for this function is: 0x6e0326a3,  or in textual repr: removeCollectionSponsor()\"},\"removeFromCollectionAllowListCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0x09ba452a,  or in textual repr: removeFromCollectionAllowListCross((address,uint256))\",\"params\":{\"user\":\"User cross account address.\"}},\"setCollectionAccess(uint8)\":{\"details\":\"EVM selector for this function is: 0x41835d4c,  or in textual repr: setCollectionAccess(uint8)\",\"params\":{\"mode\":\"Access mode\"}},\"setCollectionLimit((uint8,(bool,uint256)))\":{\"details\":\"Throws error if limit not found.EVM selector for this function is: 0x2316ee74,  or in textual repr: setCollectionLimit((uint8,(bool,uint256)))\",\"params\":{\"limit\":\"Some limit.\"}},\"setCollectionMintMode(bool)\":{\"details\":\"EVM selector for this function is: 0x00018e84,  or in textual repr: setCollectionMintMode(bool)\",\"params\":{\"mode\":\"Enable if \\\"true\\\".\"}},\"setCollectionNesting(bool)\":{\"details\":\"EVM selector for this function is: 0x112d4586,  or in textual repr: setCollectionNesting(bool)\",\"params\":{\"enable\":\"If \\\"true\\\" degenerates to nesting: 'Owner' else to nesting: 'Disabled'\"}},\"setCollectionNesting(bool,address[])\":{\"details\":\"EVM selector for this function is: 0x64872396,  or in textual repr: setCollectionNesting(bool,address[])\",\"params\":{\"collections\":\"Addresses of collections that will be available for nesting.\",\"enable\":\"If \\\"true\\\" degenerates to nesting: {OwnerRestricted: [1, 2, 3]} else to nesting: 'Disabled'\"}},\"setCollectionProperties((string,bytes)[])\":{\"details\":\"EVM selector for this function is: 0x50b26b2a,  or in textual repr: setCollectionProperties((string,bytes)[])\",\"params\":{\"properties\":\"Vector of properties key/value pair.\"}},\"setCollectionSponsorCross((address,uint256))\":{\"details\":\"In order for sponsorship to work, it must be confirmed on behalf of the sponsor.EVM selector for this function is: 0x84a1d5a8,  or in textual repr: setCollectionSponsorCross((address,uint256))\",\"params\":{\"sponsor\":\"Cross account address of the sponsor from whose account funds will be debited for operations with the contract.\"}},\"uniqueCollectionType()\":{\"details\":\"EVM selector for this function is: 0xd34b55b8,  or in textual repr: uniqueCollectionType()\",\"returns\":{\"_0\":\"`Fungible` or `NFT` or `ReFungible`\"}}},\"title\":\"A contract that allows you to work with collections.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollectionAdminCross((address,uint256))\":{\"notice\":\"Add collection admin.\"},\"addToCollectionAllowListCross((address,uint256))\":{\"notice\":\"Add user to allowed list.\"},\"allowlistedCross((address,uint256))\":{\"notice\":\"Checks that user allowed to operate with collection.\"},\"changeCollectionOwnerCross((address,uint256))\":{\"notice\":\"Changes collection owner to another account\"},\"collectionAdmins()\":{\"notice\":\"Get collection administrators\"},\"collectionLimits()\":{\"notice\":\"Get current collection limits.\"},\"collectionNestingPermissions()\":{\"notice\":\"Returns permissions for a collection\"},\"collectionNestingRestrictedCollectionIds()\":{\"notice\":\"Returns nesting for a collection\"},\"collectionOwner()\":{\"notice\":\"Get collection owner.\"},\"collectionProperties(string[])\":{\"notice\":\"Get collection properties.\"},\"collectionProperty(string)\":{\"notice\":\"Get collection property.\"},\"collectionSponsor()\":{\"notice\":\"Get current sponsor.\"},\"confirmCollectionSponsorship()\":{\"notice\":\"Collection sponsorship confirmation.\"},\"contractAddress()\":{\"notice\":\"Get contract address.\"},\"deleteCollectionProperties(string[])\":{\"notice\":\"Delete collection properties.\"},\"hasCollectionPendingSponsor()\":{\"notice\":\"Whether there is a pending sponsor.\"},\"isOwnerOrAdminCross((address,uint256))\":{\"notice\":\"Check that account is the owner or admin of the collection\"},\"removeCollectionAdminCross((address,uint256))\":{\"notice\":\"Remove collection admin.\"},\"removeCollectionSponsor()\":{\"notice\":\"Remove collection sponsor.\"},\"removeFromCollectionAllowListCross((address,uint256))\":{\"notice\":\"Remove user from allowed list.\"},\"setCollectionAccess(uint8)\":{\"notice\":\"Set the collection access method.\"},\"setCollectionLimit((uint8,(bool,uint256)))\":{\"notice\":\"Set limits for the collection.\"},\"setCollectionMintMode(bool)\":{\"notice\":\"Switch permission for minting.\"},\"setCollectionNesting(bool)\":{\"notice\":\"Toggle accessibility of collection nesting.\"},\"setCollectionNesting(bool,address[])\":{\"notice\":\"Toggle accessibility of collection nesting.\"},\"setCollectionProperties((string,bytes)[])\":{\"notice\":\"Set collection properties.\"},\"setCollectionSponsorCross((address,uint256))\":{\"notice\":\"Set the sponsor of the collection.\"},\"uniqueCollectionType()\":{\"notice\":\"Returns collection type\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"Collection\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"addCollectionAdminCross((address,uint256))": {
								"notice": "Add collection admin."
							},
							"addToCollectionAllowListCross((address,uint256))": {
								"notice": "Add user to allowed list."
							},
							"allowlistedCross((address,uint256))": {
								"notice": "Checks that user allowed to operate with collection."
							},
							"changeCollectionOwnerCross((address,uint256))": {
								"notice": "Changes collection owner to another account"
							},
							"collectionAdmins()": {
								"notice": "Get collection administrators"
							},
							"collectionLimits()": {
								"notice": "Get current collection limits."
							},
							"collectionNestingPermissions()": {
								"notice": "Returns permissions for a collection"
							},
							"collectionNestingRestrictedCollectionIds()": {
								"notice": "Returns nesting for a collection"
							},
							"collectionOwner()": {
								"notice": "Get collection owner."
							},
							"collectionProperties(string[])": {
								"notice": "Get collection properties."
							},
							"collectionProperty(string)": {
								"notice": "Get collection property."
							},
							"collectionSponsor()": {
								"notice": "Get current sponsor."
							},
							"confirmCollectionSponsorship()": {
								"notice": "Collection sponsorship confirmation."
							},
							"contractAddress()": {
								"notice": "Get contract address."
							},
							"deleteCollectionProperties(string[])": {
								"notice": "Delete collection properties."
							},
							"hasCollectionPendingSponsor()": {
								"notice": "Whether there is a pending sponsor."
							},
							"isOwnerOrAdminCross((address,uint256))": {
								"notice": "Check that account is the owner or admin of the collection"
							},
							"removeCollectionAdminCross((address,uint256))": {
								"notice": "Remove collection admin."
							},
							"removeCollectionSponsor()": {
								"notice": "Remove collection sponsor."
							},
							"removeFromCollectionAllowListCross((address,uint256))": {
								"notice": "Remove user from allowed list."
							},
							"setCollectionAccess(uint8)": {
								"notice": "Set the collection access method."
							},
							"setCollectionLimit((uint8,(bool,uint256)))": {
								"notice": "Set limits for the collection."
							},
							"setCollectionMintMode(bool)": {
								"notice": "Switch permission for minting."
							},
							"setCollectionNesting(bool)": {
								"notice": "Toggle accessibility of collection nesting."
							},
							"setCollectionNesting(bool,address[])": {
								"notice": "Toggle accessibility of collection nesting."
							},
							"setCollectionProperties((string,bytes)[])": {
								"notice": "Set collection properties."
							},
							"setCollectionSponsorCross((address,uint256))": {
								"notice": "Set the sponsor of the collection."
							},
							"uniqueCollectionType()": {
								"notice": "Returns collection type"
							}
						},
						"version": 1
					}
				},
				"Dummy": {
					"abi": [],
					"devdoc": {
						"details": "common stubs holder",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"common stubs holder\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"Dummy\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceID",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"ERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceID",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.mdthe ERC-165 identifier for this interface is 0x80ac58cd",
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x095ea7b3,  or in textual repr: approve(address,uint256)",
								"params": {
									"approved": "The new approved NFT controller",
									"tokenId": "The NFT to approve"
								}
							},
							"balanceOf(address)": {
								"details": "NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.EVM selector for this function is: 0x70a08231,  or in textual repr: balanceOf(address)",
								"params": {
									"owner": "An address for whom to query the balance"
								},
								"returns": {
									"_0": "The number of NFTs owned by `owner`, possibly zero"
								}
							},
							"getApproved(uint256)": {
								"details": "Throws if `tokenId` is not a valid NFTEVM selector for this function is: 0x081812fc,  or in textual repr: getApproved(uint256)",
								"params": {
									"tokenId": "The NFT to find the approved address for"
								},
								"returns": {
									"_0": "The approved address for this NFT, or the zero address if there is none"
								}
							},
							"isApprovedForAll(address,address)": {
								"details": "EVM selector for this function is: 0xe985e9c5,  or in textual repr: isApprovedForAll(address,address)"
							},
							"ownerOf(uint256)": {
								"details": "NFTs assigned to zero address are considered invalid, and queries  about them do throw.EVM selector for this function is: 0x6352211e,  or in textual repr: ownerOf(uint256)",
								"params": {
									"tokenId": "The identifier for an NFT"
								},
								"returns": {
									"_0": "The address of the owner of the NFT"
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Not implementedEVM selector for this function is: 0x42842e0e,  or in textual repr: safeTransferFrom(address,address,uint256)"
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Not implementedEVM selector for this function is: 0xb88d4fde,  or in textual repr: safeTransferFrom(address,address,uint256,bytes)"
							},
							"setApprovalForAll(address,bool)": {
								"details": "EVM selector for this function is: 0xa22cb465,  or in textual repr: setApprovalForAll(address,bool)",
								"params": {
									"approved": "Should operator status be granted or revoked?",
									"operator": "Operator"
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Throws unless `msg.sender` is the current owner or an authorized  operator for this NFT. Throws if `from` is not the current owner. Throws  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0x23b872dd,  or in textual repr: transferFrom(address,address,uint256)",
								"params": {
									"from": "The current owner of the NFT",
									"to": "The new owner",
									"tokenId": "The NFT to transfer"
								}
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.mdthe ERC-165 identifier for this interface is 0x80ac58cd\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x095ea7b3,  or in textual repr: approve(address,uint256)\",\"params\":{\"approved\":\"The new approved NFT controller\",\"tokenId\":\"The NFT to approve\"}},\"balanceOf(address)\":{\"details\":\"NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.EVM selector for this function is: 0x70a08231,  or in textual repr: balanceOf(address)\",\"params\":{\"owner\":\"An address for whom to query the balance\"},\"returns\":{\"_0\":\"The number of NFTs owned by `owner`, possibly zero\"}},\"getApproved(uint256)\":{\"details\":\"Throws if `tokenId` is not a valid NFTEVM selector for this function is: 0x081812fc,  or in textual repr: getApproved(uint256)\",\"params\":{\"tokenId\":\"The NFT to find the approved address for\"},\"returns\":{\"_0\":\"The approved address for this NFT, or the zero address if there is none\"}},\"isApprovedForAll(address,address)\":{\"details\":\"EVM selector for this function is: 0xe985e9c5,  or in textual repr: isApprovedForAll(address,address)\"},\"ownerOf(uint256)\":{\"details\":\"NFTs assigned to zero address are considered invalid, and queries  about them do throw.EVM selector for this function is: 0x6352211e,  or in textual repr: ownerOf(uint256)\",\"params\":{\"tokenId\":\"The identifier for an NFT\"},\"returns\":{\"_0\":\"The address of the owner of the NFT\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Not implementedEVM selector for this function is: 0x42842e0e,  or in textual repr: safeTransferFrom(address,address,uint256)\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Not implementedEVM selector for this function is: 0xb88d4fde,  or in textual repr: safeTransferFrom(address,address,uint256,bytes)\"},\"setApprovalForAll(address,bool)\":{\"details\":\"EVM selector for this function is: 0xa22cb465,  or in textual repr: setApprovalForAll(address,bool)\",\"params\":{\"approved\":\"Should operator status be granted or revoked?\",\"operator\":\"Operator\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner or an authorized  operator for this NFT. Throws if `from` is not the current owner. Throws  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0x23b872dd,  or in textual repr: transferFrom(address,address,uint256)\",\"params\":{\"from\":\"The current owner of the NFT\",\"to\":\"The new owner\",\"tokenId\":\"The NFT to transfer\"}}},\"title\":\"ERC-721 Non-Fungible Token Standard\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Set or reaffirm the approved address for an NFT\"},\"balanceOf(address)\":{\"notice\":\"Count all NFTs assigned to an owner\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved address for a single NFT\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Tells whether the given `owner` approves the `operator`.\"},\"ownerOf(uint256)\":{\"notice\":\"Find the owner of an NFT\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets the approval of a given operator. The `operator` is allowed to transfer all tokens of the `caller` on their behalf.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"ERC721\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"approve(address,uint256)": {
								"notice": "Set or reaffirm the approved address for an NFT"
							},
							"balanceOf(address)": {
								"notice": "Count all NFTs assigned to an owner"
							},
							"getApproved(uint256)": {
								"notice": "Get the approved address for a single NFT"
							},
							"isApprovedForAll(address,address)": {
								"notice": "Tells whether the given `owner` approves the `operator`."
							},
							"ownerOf(uint256)": {
								"notice": "Find the owner of an NFT"
							},
							"setApprovalForAll(address,bool)": {
								"notice": "Sets or unsets the approval of a given operator. The `operator` is allowed to transfer all tokens of the `caller` on their behalf."
							},
							"transferFrom(address,address,uint256)": {
								"notice": "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"
							}
						},
						"version": 1
					}
				},
				"ERC721Burnable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceID",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "the ERC-165 identifier for this interface is 0x42966c68",
						"kind": "dev",
						"methods": {
							"burn(uint256)": {
								"details": "Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x42966c68,  or in textual repr: burn(uint256)",
								"params": {
									"tokenId": "The NFT to approve"
								}
							}
						},
						"title": "ERC721 Token that can be irreversibly burned (destroyed).",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"burn(uint256)": "42966c68",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"the ERC-165 identifier for this interface is 0x42966c68\",\"kind\":\"dev\",\"methods\":{\"burn(uint256)\":{\"details\":\"Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x42966c68,  or in textual repr: burn(uint256)\",\"params\":{\"tokenId\":\"The NFT to approve\"}}},\"title\":\"ERC721 Token that can be irreversibly burned (destroyed).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"burn(uint256)\":{\"notice\":\"Burns a specific ERC721 token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"ERC721Burnable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"burn(uint256)": {
								"notice": "Burns a specific ERC721 token."
							}
						},
						"version": 1
					}
				},
				"ERC721Enumerable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceID",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721the ERC-165 identifier for this interface is 0x780e9d63",
						"kind": "dev",
						"methods": {
							"tokenByIndex(uint256)": {
								"details": "EVM selector for this function is: 0x4f6ccce7,  or in textual repr: tokenByIndex(uint256)",
								"params": {
									"index": "A counter less than `totalSupply()`"
								},
								"returns": {
									"_0": "The token identifier for the `index`th NFT,  (sort order not specified)"
								}
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Not implementedEVM selector for this function is: 0x2f745c59,  or in textual repr: tokenOfOwnerByIndex(address,uint256)"
							},
							"totalSupply()": {
								"details": "EVM selector for this function is: 0x18160ddd,  or in textual repr: totalSupply()",
								"returns": {
									"_0": "A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address"
								}
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional enumeration extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"totalSupply()": "18160ddd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721the ERC-165 identifier for this interface is 0x780e9d63\",\"kind\":\"dev\",\"methods\":{\"tokenByIndex(uint256)\":{\"details\":\"EVM selector for this function is: 0x4f6ccce7,  or in textual repr: tokenByIndex(uint256)\",\"params\":{\"index\":\"A counter less than `totalSupply()`\"},\"returns\":{\"_0\":\"The token identifier for the `index`th NFT,  (sort order not specified)\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Not implementedEVM selector for this function is: 0x2f745c59,  or in textual repr: tokenOfOwnerByIndex(address,uint256)\"},\"totalSupply()\":{\"details\":\"EVM selector for this function is: 0x18160ddd,  or in textual repr: totalSupply()\",\"returns\":{\"_0\":\"A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address\"}}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional enumeration extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenByIndex(uint256)\":{\"notice\":\"Enumerate valid NFTs\"},\"totalSupply()\":{\"notice\":\"Count NFTs tracked by this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"ERC721Enumerable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"tokenByIndex(uint256)": {
								"notice": "Enumerate valid NFTs"
							},
							"totalSupply()": {
								"notice": "Count NFTs tracked by this contract"
							}
						},
						"version": 1
					}
				},
				"ERC721Events": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "inlined interface",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"inlined interface\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"ERC721Events\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ERC721Metadata": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceID",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721the ERC-165 identifier for this interface is 0x5b5e139f",
						"kind": "dev",
						"methods": {
							"tokenURI(uint256)": {
								"details": "If the token has a `url` property and it is not empty, it is returned.  Else If the collection does not have a property with key `schemaName` or its value is not equal to `ERC721Metadata`, it return an error `tokenURI not set`.  If the collection property `baseURI` is empty or absent, return \"\" (empty string)  otherwise, if token property `suffix` present and is non-empty, return concatenation of baseURI and suffix  otherwise, return concatenation of `baseURI` and stringified token id (decimal stringifying, without paddings).EVM selector for this function is: 0xc87b56dd,  or in textual repr: tokenURI(uint256)",
								"returns": {
									"_0": "token's const_metadata"
								}
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenURI(uint256)": "c87b56dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721the ERC-165 identifier for this interface is 0x5b5e139f\",\"kind\":\"dev\",\"methods\":{\"tokenURI(uint256)\":{\"details\":\"If the token has a `url` property and it is not empty, it is returned.  Else If the collection does not have a property with key `schemaName` or its value is not equal to `ERC721Metadata`, it return an error `tokenURI not set`.  If the collection property `baseURI` is empty or absent, return \\\"\\\" (empty string)  otherwise, if token property `suffix` present and is non-empty, return concatenation of baseURI and suffix  otherwise, return concatenation of `baseURI` and stringified token id (decimal stringifying, without paddings).EVM selector for this function is: 0xc87b56dd,  or in textual repr: tokenURI(uint256)\",\"returns\":{\"_0\":\"token's const_metadata\"}}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"ERC721Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"tokenURI(uint256)": {
								"notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
							}
						},
						"version": 1
					}
				},
				"ERC721TokenEvent": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "TokenChanged",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "inlined interface",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenChanged\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"inlined interface\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"ERC721TokenEvent\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"ERC721UniqueExtensions": {
					"abi": [
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "approved",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approveCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "from",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burnFromCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionHelperAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "crossOwnerOf",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "description",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "to",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"internalType": "bytes",
											"name": "value",
											"type": "bytes"
										}
									],
									"internalType": "struct Property[]",
									"name": "properties",
									"type": "tuple[]"
								}
							],
							"name": "mintCross",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nextTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string[]",
									"name": "keys",
									"type": "string[]"
								}
							],
							"name": "properties",
							"outputs": [
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"internalType": "bytes",
											"name": "value",
											"type": "bytes"
										}
									],
									"internalType": "struct Property[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceID",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "to",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "from",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "to",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFromCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "the ERC-165 identifier for this interface is 0x16de3152",
						"kind": "dev",
						"methods": {
							"approveCross((address,uint256),uint256)": {
								"details": "The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x0ecd0ab0,  or in textual repr: approveCross((address,uint256),uint256)",
								"params": {
									"approved": "The new substrate address approved NFT controller",
									"tokenId": "The NFT to approve"
								}
							},
							"burnFromCross((address,uint256),uint256)": {
								"details": "Throws unless `msg.sender` is the current owner or an authorized  operator for this NFT. Throws if `from` is not the current owner. Throws  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xbb2f5a58,  or in textual repr: burnFromCross((address,uint256),uint256)",
								"params": {
									"from": "The current owner of the NFT",
									"tokenId": "The NFT to transfer"
								}
							},
							"collectionHelperAddress()": {
								"details": "EVM selector for this function is: 0x1896cce6,  or in textual repr: collectionHelperAddress()"
							},
							"crossOwnerOf(uint256)": {
								"details": "EVM selector for this function is: 0x2b29dace,  or in textual repr: crossOwnerOf(uint256)",
								"params": {
									"tokenId": "Id for the token."
								}
							},
							"description()": {
								"details": "EVM selector for this function is: 0x7284e416,  or in textual repr: description()"
							},
							"mintCross((address,uint256),(string,bytes)[])": {
								"details": "EVM selector for this function is: 0xb904db03,  or in textual repr: mintCross((address,uint256),(string,bytes)[])",
								"params": {
									"properties": "Properties of minted token",
									"to": "The new owner crossAccountId"
								},
								"returns": {
									"_0": "uint256 The id of the newly minted token"
								}
							},
							"name()": {
								"details": "EVM selector for this function is: 0x06fdde03,  or in textual repr: name()"
							},
							"nextTokenId()": {
								"details": "EVM selector for this function is: 0x75794a3c,  or in textual repr: nextTokenId()"
							},
							"properties(uint256,string[])": {
								"details": "EVM selector for this function is: 0xe07ede7e,  or in textual repr: properties(uint256,string[])",
								"params": {
									"keys": "Properties keys. Empty keys for all propertyes.",
									"tokenId": "Id for the token."
								},
								"returns": {
									"_0": "Vector of properties key/value pairs."
								}
							},
							"symbol()": {
								"details": "EVM selector for this function is: 0x95d89b41,  or in textual repr: symbol()"
							},
							"transfer(address,uint256)": {
								"details": "Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xa9059cbb,  or in textual repr: transfer(address,uint256)",
								"params": {
									"to": "The new owner",
									"tokenId": "The NFT to transfer"
								}
							},
							"transferCross((address,uint256),uint256)": {
								"details": "Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0x2ada85ff,  or in textual repr: transferCross((address,uint256),uint256)",
								"params": {
									"to": "The new owner",
									"tokenId": "The NFT to transfer"
								}
							},
							"transferFromCross((address,uint256),(address,uint256),uint256)": {
								"details": "Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xd5cf430b,  or in textual repr: transferFromCross((address,uint256),(address,uint256),uint256)",
								"params": {
									"from": "Cross acccount address of current owner",
									"to": "Cross acccount address of new owner",
									"tokenId": "The NFT to transfer"
								}
							}
						},
						"title": "Unique extensions for ERC721.",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approveCross((address,uint256),uint256)": "0ecd0ab0",
							"burnFromCross((address,uint256),uint256)": "bb2f5a58",
							"collectionHelperAddress()": "1896cce6",
							"crossOwnerOf(uint256)": "2b29dace",
							"description()": "7284e416",
							"mintCross((address,uint256),(string,bytes)[])": "b904db03",
							"name()": "06fdde03",
							"nextTokenId()": "75794a3c",
							"properties(uint256,string[])": "e07ede7e",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"transfer(address,uint256)": "a9059cbb",
							"transferCross((address,uint256),uint256)": "2ada85ff",
							"transferFromCross((address,uint256),(address,uint256),uint256)": "d5cf430b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"approved\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"from\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnFromCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionHelperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"crossOwnerOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct Property[]\",\"name\":\"properties\",\"type\":\"tuple[]\"}],\"name\":\"mintCross\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"properties\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct Property[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFromCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"the ERC-165 identifier for this interface is 0x16de3152\",\"kind\":\"dev\",\"methods\":{\"approveCross((address,uint256),uint256)\":{\"details\":\"The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x0ecd0ab0,  or in textual repr: approveCross((address,uint256),uint256)\",\"params\":{\"approved\":\"The new substrate address approved NFT controller\",\"tokenId\":\"The NFT to approve\"}},\"burnFromCross((address,uint256),uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner or an authorized  operator for this NFT. Throws if `from` is not the current owner. Throws  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xbb2f5a58,  or in textual repr: burnFromCross((address,uint256),uint256)\",\"params\":{\"from\":\"The current owner of the NFT\",\"tokenId\":\"The NFT to transfer\"}},\"collectionHelperAddress()\":{\"details\":\"EVM selector for this function is: 0x1896cce6,  or in textual repr: collectionHelperAddress()\"},\"crossOwnerOf(uint256)\":{\"details\":\"EVM selector for this function is: 0x2b29dace,  or in textual repr: crossOwnerOf(uint256)\",\"params\":{\"tokenId\":\"Id for the token.\"}},\"description()\":{\"details\":\"EVM selector for this function is: 0x7284e416,  or in textual repr: description()\"},\"mintCross((address,uint256),(string,bytes)[])\":{\"details\":\"EVM selector for this function is: 0xb904db03,  or in textual repr: mintCross((address,uint256),(string,bytes)[])\",\"params\":{\"properties\":\"Properties of minted token\",\"to\":\"The new owner crossAccountId\"},\"returns\":{\"_0\":\"uint256 The id of the newly minted token\"}},\"name()\":{\"details\":\"EVM selector for this function is: 0x06fdde03,  or in textual repr: name()\"},\"nextTokenId()\":{\"details\":\"EVM selector for this function is: 0x75794a3c,  or in textual repr: nextTokenId()\"},\"properties(uint256,string[])\":{\"details\":\"EVM selector for this function is: 0xe07ede7e,  or in textual repr: properties(uint256,string[])\",\"params\":{\"keys\":\"Properties keys. Empty keys for all propertyes.\",\"tokenId\":\"Id for the token.\"},\"returns\":{\"_0\":\"Vector of properties key/value pairs.\"}},\"symbol()\":{\"details\":\"EVM selector for this function is: 0x95d89b41,  or in textual repr: symbol()\"},\"transfer(address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xa9059cbb,  or in textual repr: transfer(address,uint256)\",\"params\":{\"to\":\"The new owner\",\"tokenId\":\"The NFT to transfer\"}},\"transferCross((address,uint256),uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0x2ada85ff,  or in textual repr: transferCross((address,uint256),uint256)\",\"params\":{\"to\":\"The new owner\",\"tokenId\":\"The NFT to transfer\"}},\"transferFromCross((address,uint256),(address,uint256),uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xd5cf430b,  or in textual repr: transferFromCross((address,uint256),(address,uint256),uint256)\",\"params\":{\"from\":\"Cross acccount address of current owner\",\"to\":\"Cross acccount address of new owner\",\"tokenId\":\"The NFT to transfer\"}}},\"title\":\"Unique extensions for ERC721.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approveCross((address,uint256),uint256)\":{\"notice\":\"Set or reaffirm the approved address for an NFT\"},\"burnFromCross((address,uint256),uint256)\":{\"notice\":\"Burns a specific ERC721 token.\"},\"collectionHelperAddress()\":{\"notice\":\"Returns collection helper contract address\"},\"crossOwnerOf(uint256)\":{\"notice\":\"Returns the owner (in cross format) of the token.\"},\"description()\":{\"notice\":\"A description for the collection.\"},\"mintCross((address,uint256),(string,bytes)[])\":{\"notice\":\"Function to mint a token.\"},\"name()\":{\"notice\":\"A descriptive name for a collection of NFTs in this contract\"},\"nextTokenId()\":{\"notice\":\"Returns next free NFT ID.\"},\"properties(uint256,string[])\":{\"notice\":\"Returns the token properties.\"},\"symbol()\":{\"notice\":\"An abbreviated name for NFTs in this contract\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer ownership of an NFT\"},\"transferCross((address,uint256),uint256)\":{\"notice\":\"Transfer ownership of an NFT\"},\"transferFromCross((address,uint256),(address,uint256),uint256)\":{\"notice\":\"Transfer ownership of an NFT from cross account address to cross account address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"ERC721UniqueExtensions\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"approveCross((address,uint256),uint256)": {
								"notice": "Set or reaffirm the approved address for an NFT"
							},
							"burnFromCross((address,uint256),uint256)": {
								"notice": "Burns a specific ERC721 token."
							},
							"collectionHelperAddress()": {
								"notice": "Returns collection helper contract address"
							},
							"crossOwnerOf(uint256)": {
								"notice": "Returns the owner (in cross format) of the token."
							},
							"description()": {
								"notice": "A description for the collection."
							},
							"mintCross((address,uint256),(string,bytes)[])": {
								"notice": "Function to mint a token."
							},
							"name()": {
								"notice": "A descriptive name for a collection of NFTs in this contract"
							},
							"nextTokenId()": {
								"notice": "Returns next free NFT ID."
							},
							"properties(uint256,string[])": {
								"notice": "Returns the token properties."
							},
							"symbol()": {
								"notice": "An abbreviated name for NFTs in this contract"
							},
							"transfer(address,uint256)": {
								"notice": "Transfer ownership of an NFT"
							},
							"transferCross((address,uint256),uint256)": {
								"notice": "Transfer ownership of an NFT"
							},
							"transferFromCross((address,uint256),(address,uint256),uint256)": {
								"notice": "Transfer ownership of an NFT from cross account address to cross account address"
							}
						},
						"version": 1
					}
				},
				"ERC721UniqueMintable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "tokenUri",
									"type": "string"
								}
							],
							"name": "mintWithTokenURI",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceID",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "the ERC-165 identifier for this interface is 0x3fd94ea6",
						"kind": "dev",
						"methods": {
							"mint(address)": {
								"details": "EVM selector for this function is: 0x6a627842,  or in textual repr: mint(address)",
								"params": {
									"to": "The new owner"
								},
								"returns": {
									"_0": "uint256 The id of the newly minted token"
								}
							},
							"mintWithTokenURI(address,string)": {
								"details": "EVM selector for this function is: 0x45c17782,  or in textual repr: mintWithTokenURI(address,string)",
								"params": {
									"to": "The new owner",
									"tokenUri": "Token URI that would be stored in the NFT properties"
								},
								"returns": {
									"_0": "uint256 The id of the newly minted token"
								}
							}
						},
						"title": "ERC721 minting logic.",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"mint(address)": "6a627842",
							"mintWithTokenURI(address,string)": "45c17782",
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"the ERC-165 identifier for this interface is 0x3fd94ea6\",\"kind\":\"dev\",\"methods\":{\"mint(address)\":{\"details\":\"EVM selector for this function is: 0x6a627842,  or in textual repr: mint(address)\",\"params\":{\"to\":\"The new owner\"},\"returns\":{\"_0\":\"uint256 The id of the newly minted token\"}},\"mintWithTokenURI(address,string)\":{\"details\":\"EVM selector for this function is: 0x45c17782,  or in textual repr: mintWithTokenURI(address,string)\",\"params\":{\"to\":\"The new owner\",\"tokenUri\":\"Token URI that would be stored in the NFT properties\"},\"returns\":{\"_0\":\"uint256 The id of the newly minted token\"}}},\"title\":\"ERC721 minting logic.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mint(address)\":{\"notice\":\"Function to mint a token.\"},\"mintWithTokenURI(address,string)\":{\"notice\":\"Function to mint token with the given tokenUri.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"ERC721UniqueMintable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"mint(address)": {
								"notice": "Function to mint a token."
							},
							"mintWithTokenURI(address,string)": {
								"notice": "Function to mint token with the given tokenUri."
							}
						},
						"version": 1
					}
				},
				"TokenProperties": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "TokenChanged",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string[]",
									"name": "keys",
									"type": "string[]"
								}
							],
							"name": "deleteProperties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "key",
									"type": "string"
								}
							],
							"name": "property",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"internalType": "bytes",
											"name": "value",
											"type": "bytes"
										}
									],
									"internalType": "struct Property[]",
									"name": "properties",
									"type": "tuple[]"
								}
							],
							"name": "setProperties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"components": [
												{
													"internalType": "enum TokenPermissionField",
													"name": "code",
													"type": "uint8"
												},
												{
													"internalType": "bool",
													"name": "value",
													"type": "bool"
												}
											],
											"internalType": "struct PropertyPermission[]",
											"name": "permissions",
											"type": "tuple[]"
										}
									],
									"internalType": "struct TokenPropertyPermission[]",
									"name": "permissions",
									"type": "tuple[]"
								}
							],
							"name": "setTokenPropertyPermissions",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceID",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenPropertyPermissions",
							"outputs": [
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"components": [
												{
													"internalType": "enum TokenPermissionField",
													"name": "code",
													"type": "uint8"
												},
												{
													"internalType": "bool",
													"name": "value",
													"type": "bool"
												}
											],
											"internalType": "struct PropertyPermission[]",
											"name": "permissions",
											"type": "tuple[]"
										}
									],
									"internalType": "struct TokenPropertyPermission[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "the ERC-165 identifier for this interface is 0xde0695c2",
						"kind": "dev",
						"methods": {
							"deleteProperties(uint256,string[])": {
								"details": "Throws error if `msg.sender` has no permission to edit the property.EVM selector for this function is: 0xc472d371,  or in textual repr: deleteProperties(uint256,string[])",
								"params": {
									"keys": "Properties key.",
									"tokenId": "ID of the token."
								}
							},
							"property(uint256,string)": {
								"details": "Throws error if key not foundEVM selector for this function is: 0x7228c327,  or in textual repr: property(uint256,string)",
								"params": {
									"key": "Property key.",
									"tokenId": "ID of the token."
								},
								"returns": {
									"_0": "Property value bytes"
								}
							},
							"setProperties(uint256,(string,bytes)[])": {
								"details": "Throws error if `msg.sender` has no permission to edit the property.EVM selector for this function is: 0x14ed3a6e,  or in textual repr: setProperties(uint256,(string,bytes)[])",
								"params": {
									"properties": "settable properties",
									"tokenId": "ID of the token."
								}
							},
							"setTokenPropertyPermissions((string,(uint8,bool)[])[])": {
								"details": "Throws error if `msg.sender` is not admin or owner of the collection.EVM selector for this function is: 0xbd92983a,  or in textual repr: setTokenPropertyPermissions((string,(uint8,bool)[])[])",
								"params": {
									"permissions": "Permissions for keys."
								}
							},
							"tokenPropertyPermissions()": {
								"details": "EVM selector for this function is: 0xf23d7790,  or in textual repr: tokenPropertyPermissions()"
							}
						},
						"title": "A contract that allows to set and delete token properties and change token property permissions.",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"deleteProperties(uint256,string[])": "c472d371",
							"property(uint256,string)": "7228c327",
							"setProperties(uint256,(string,bytes)[])": "14ed3a6e",
							"setTokenPropertyPermissions((string,(uint8,bool)[])[])": "bd92983a",
							"supportsInterface(bytes4)": "01ffc9a7",
							"tokenPropertyPermissions()": "f23d7790"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"deleteProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"property\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct Property[]\",\"name\":\"properties\",\"type\":\"tuple[]\"}],\"name\":\"setProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"enum TokenPermissionField\",\"name\":\"code\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct PropertyPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokenPropertyPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"name\":\"setTokenPropertyPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPropertyPermissions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"enum TokenPermissionField\",\"name\":\"code\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct PropertyPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokenPropertyPermission[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"the ERC-165 identifier for this interface is 0xde0695c2\",\"kind\":\"dev\",\"methods\":{\"deleteProperties(uint256,string[])\":{\"details\":\"Throws error if `msg.sender` has no permission to edit the property.EVM selector for this function is: 0xc472d371,  or in textual repr: deleteProperties(uint256,string[])\",\"params\":{\"keys\":\"Properties key.\",\"tokenId\":\"ID of the token.\"}},\"property(uint256,string)\":{\"details\":\"Throws error if key not foundEVM selector for this function is: 0x7228c327,  or in textual repr: property(uint256,string)\",\"params\":{\"key\":\"Property key.\",\"tokenId\":\"ID of the token.\"},\"returns\":{\"_0\":\"Property value bytes\"}},\"setProperties(uint256,(string,bytes)[])\":{\"details\":\"Throws error if `msg.sender` has no permission to edit the property.EVM selector for this function is: 0x14ed3a6e,  or in textual repr: setProperties(uint256,(string,bytes)[])\",\"params\":{\"properties\":\"settable properties\",\"tokenId\":\"ID of the token.\"}},\"setTokenPropertyPermissions((string,(uint8,bool)[])[])\":{\"details\":\"Throws error if `msg.sender` is not admin or owner of the collection.EVM selector for this function is: 0xbd92983a,  or in textual repr: setTokenPropertyPermissions((string,(uint8,bool)[])[])\",\"params\":{\"permissions\":\"Permissions for keys.\"}},\"tokenPropertyPermissions()\":{\"details\":\"EVM selector for this function is: 0xf23d7790,  or in textual repr: tokenPropertyPermissions()\"}},\"title\":\"A contract that allows to set and delete token properties and change token property permissions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deleteProperties(uint256,string[])\":{\"notice\":\"Delete token properties value.\"},\"property(uint256,string)\":{\"notice\":\"Get token property value.\"},\"setProperties(uint256,(string,bytes)[])\":{\"notice\":\"Set token properties value.\"},\"setTokenPropertyPermissions((string,(uint8,bool)[])[])\":{\"notice\":\"Set permissions for token property.\"},\"tokenPropertyPermissions()\":{\"notice\":\"Get permissions for token properties.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"TokenProperties\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"deleteProperties(uint256,string[])": {
								"notice": "Delete token properties value."
							},
							"property(uint256,string)": {
								"notice": "Get token property value."
							},
							"setProperties(uint256,(string,bytes)[])": {
								"notice": "Set token properties value."
							},
							"setTokenPropertyPermissions((string,(uint8,bool)[])[])": {
								"notice": "Set permissions for token property."
							},
							"tokenPropertyPermissions()": {
								"notice": "Get permissions for token properties."
							}
						},
						"version": 1
					}
				},
				"UniqueNFT": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "TokenChanged",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "newAdmin",
									"type": "tuple"
								}
							],
							"name": "addCollectionAdminCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "user",
									"type": "tuple"
								}
							],
							"name": "addToCollectionAllowListCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "user",
									"type": "tuple"
								}
							],
							"name": "allowlistedCross",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "approved",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approveCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burn",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "from",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "burnFromCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "newOwner",
									"type": "tuple"
								}
							],
							"name": "changeCollectionOwnerCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionAdmins",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionHelperAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionLimits",
							"outputs": [
								{
									"components": [
										{
											"internalType": "enum CollectionLimitField",
											"name": "field",
											"type": "uint8"
										},
										{
											"components": [
												{
													"internalType": "bool",
													"name": "status",
													"type": "bool"
												},
												{
													"internalType": "uint256",
													"name": "value",
													"type": "uint256"
												}
											],
											"internalType": "struct OptionUint256",
											"name": "value",
											"type": "tuple"
										}
									],
									"internalType": "struct CollectionLimit[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionNestingPermissions",
							"outputs": [
								{
									"components": [
										{
											"internalType": "enum CollectionPermissionField",
											"name": "field",
											"type": "uint8"
										},
										{
											"internalType": "bool",
											"name": "value",
											"type": "bool"
										}
									],
									"internalType": "struct CollectionNestingPermission[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionNestingRestrictedCollectionIds",
							"outputs": [
								{
									"components": [
										{
											"internalType": "bool",
											"name": "token_owner",
											"type": "bool"
										},
										{
											"internalType": "uint256[]",
											"name": "ids",
											"type": "uint256[]"
										}
									],
									"internalType": "struct CollectionNesting",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionOwner",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string[]",
									"name": "keys",
									"type": "string[]"
								}
							],
							"name": "collectionProperties",
							"outputs": [
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"internalType": "bytes",
											"name": "value",
											"type": "bytes"
										}
									],
									"internalType": "struct Property[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "key",
									"type": "string"
								}
							],
							"name": "collectionProperty",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "collectionSponsor",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "confirmCollectionSponsorship",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "contractAddress",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "crossOwnerOf",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string[]",
									"name": "keys",
									"type": "string[]"
								}
							],
							"name": "deleteCollectionProperties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string[]",
									"name": "keys",
									"type": "string[]"
								}
							],
							"name": "deleteProperties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "description",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "hasCollectionPendingSponsor",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "user",
									"type": "tuple"
								}
							],
							"name": "isOwnerOrAdminCross",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								}
							],
							"name": "mint",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "to",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"internalType": "bytes",
											"name": "value",
											"type": "bytes"
										}
									],
									"internalType": "struct Property[]",
									"name": "properties",
									"type": "tuple[]"
								}
							],
							"name": "mintCross",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "tokenUri",
									"type": "string"
								}
							],
							"name": "mintWithTokenURI",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "nextTokenId",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string[]",
									"name": "keys",
									"type": "string[]"
								}
							],
							"name": "properties",
							"outputs": [
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"internalType": "bytes",
											"name": "value",
											"type": "bytes"
										}
									],
									"internalType": "struct Property[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "string",
									"name": "key",
									"type": "string"
								}
							],
							"name": "property",
							"outputs": [
								{
									"internalType": "bytes",
									"name": "",
									"type": "bytes"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "admin",
									"type": "tuple"
								}
							],
							"name": "removeCollectionAdminCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "removeCollectionSponsor",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "user",
									"type": "tuple"
								}
							],
							"name": "removeFromCollectionAllowListCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "enum AccessMode",
									"name": "mode",
									"type": "uint8"
								}
							],
							"name": "setCollectionAccess",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "enum CollectionLimitField",
											"name": "field",
											"type": "uint8"
										},
										{
											"components": [
												{
													"internalType": "bool",
													"name": "status",
													"type": "bool"
												},
												{
													"internalType": "uint256",
													"name": "value",
													"type": "uint256"
												}
											],
											"internalType": "struct OptionUint256",
											"name": "value",
											"type": "tuple"
										}
									],
									"internalType": "struct CollectionLimit",
									"name": "limit",
									"type": "tuple"
								}
							],
							"name": "setCollectionLimit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "mode",
									"type": "bool"
								}
							],
							"name": "setCollectionMintMode",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "enable",
									"type": "bool"
								}
							],
							"name": "setCollectionNesting",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bool",
									"name": "enable",
									"type": "bool"
								},
								{
									"internalType": "address[]",
									"name": "collections",
									"type": "address[]"
								}
							],
							"name": "setCollectionNesting",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"internalType": "bytes",
											"name": "value",
											"type": "bytes"
										}
									],
									"internalType": "struct Property[]",
									"name": "properties",
									"type": "tuple[]"
								}
							],
							"name": "setCollectionProperties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "sponsor",
									"type": "tuple"
								}
							],
							"name": "setCollectionSponsorCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"internalType": "bytes",
											"name": "value",
											"type": "bytes"
										}
									],
									"internalType": "struct Property[]",
									"name": "properties",
									"type": "tuple[]"
								}
							],
							"name": "setProperties",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"components": [
												{
													"internalType": "enum TokenPermissionField",
													"name": "code",
													"type": "uint8"
												},
												{
													"internalType": "bool",
													"name": "value",
													"type": "bool"
												}
											],
											"internalType": "struct PropertyPermission[]",
											"name": "permissions",
											"type": "tuple[]"
										}
									],
									"internalType": "struct TokenPropertyPermission[]",
									"name": "permissions",
									"type": "tuple[]"
								}
							],
							"name": "setTokenPropertyPermissions",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceID",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "index",
									"type": "uint256"
								}
							],
							"name": "tokenOfOwnerByIndex",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "tokenPropertyPermissions",
							"outputs": [
								{
									"components": [
										{
											"internalType": "string",
											"name": "key",
											"type": "string"
										},
										{
											"components": [
												{
													"internalType": "enum TokenPermissionField",
													"name": "code",
													"type": "uint8"
												},
												{
													"internalType": "bool",
													"name": "value",
													"type": "bool"
												}
											],
											"internalType": "struct PropertyPermission[]",
											"name": "permissions",
											"type": "tuple[]"
										}
									],
									"internalType": "struct TokenPropertyPermission[]",
									"name": "",
									"type": "tuple[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "to",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "from",
									"type": "tuple"
								},
								{
									"components": [
										{
											"internalType": "address",
											"name": "eth",
											"type": "address"
										},
										{
											"internalType": "uint256",
											"name": "sub",
											"type": "uint256"
										}
									],
									"internalType": "struct CrossAddress",
									"name": "to",
									"type": "tuple"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFromCross",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "uniqueCollectionType",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addCollectionAdminCross((address,uint256))": {
								"details": "EVM selector for this function is: 0x859aa7d6,  or in textual repr: addCollectionAdminCross((address,uint256))",
								"params": {
									"newAdmin": "Cross account administrator address."
								}
							},
							"addToCollectionAllowListCross((address,uint256))": {
								"details": "EVM selector for this function is: 0xa0184a3a,  or in textual repr: addToCollectionAllowListCross((address,uint256))",
								"params": {
									"user": "User cross account address."
								}
							},
							"allowlistedCross((address,uint256))": {
								"details": "EVM selector for this function is: 0x91b6df49,  or in textual repr: allowlistedCross((address,uint256))",
								"params": {
									"user": "User address to check."
								}
							},
							"approve(address,uint256)": {
								"details": "The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x095ea7b3,  or in textual repr: approve(address,uint256)",
								"params": {
									"approved": "The new approved NFT controller",
									"tokenId": "The NFT to approve"
								}
							},
							"approveCross((address,uint256),uint256)": {
								"details": "The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x0ecd0ab0,  or in textual repr: approveCross((address,uint256),uint256)",
								"params": {
									"approved": "The new substrate address approved NFT controller",
									"tokenId": "The NFT to approve"
								}
							},
							"balanceOf(address)": {
								"details": "NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.EVM selector for this function is: 0x70a08231,  or in textual repr: balanceOf(address)",
								"params": {
									"owner": "An address for whom to query the balance"
								},
								"returns": {
									"_0": "The number of NFTs owned by `owner`, possibly zero"
								}
							},
							"burn(uint256)": {
								"details": "Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x42966c68,  or in textual repr: burn(uint256)",
								"params": {
									"tokenId": "The NFT to approve"
								}
							},
							"burnFromCross((address,uint256),uint256)": {
								"details": "Throws unless `msg.sender` is the current owner or an authorized  operator for this NFT. Throws if `from` is not the current owner. Throws  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xbb2f5a58,  or in textual repr: burnFromCross((address,uint256),uint256)",
								"params": {
									"from": "The current owner of the NFT",
									"tokenId": "The NFT to transfer"
								}
							},
							"changeCollectionOwnerCross((address,uint256))": {
								"details": "Owner can be changed only by current ownerEVM selector for this function is: 0x6496c497,  or in textual repr: changeCollectionOwnerCross((address,uint256))",
								"params": {
									"newOwner": "new owner cross account"
								}
							},
							"collectionAdmins()": {
								"details": "EVM selector for this function is: 0x5813216b,  or in textual repr: collectionAdmins()",
								"returns": {
									"_0": "Vector of tuples with admins address and his substrate mirror. If address is canonical then substrate mirror is zero and vice versa."
								}
							},
							"collectionHelperAddress()": {
								"details": "EVM selector for this function is: 0x1896cce6,  or in textual repr: collectionHelperAddress()"
							},
							"collectionLimits()": {
								"details": "EVM selector for this function is: 0xf63bc572,  or in textual repr: collectionLimits()",
								"returns": {
									"_0": "Array of collection limits"
								}
							},
							"collectionNestingPermissions()": {
								"details": "EVM selector for this function is: 0x5b2eaf4b,  or in textual repr: collectionNestingPermissions()"
							},
							"collectionNestingRestrictedCollectionIds()": {
								"details": "EVM selector for this function is: 0x22d25bfe,  or in textual repr: collectionNestingRestrictedCollectionIds()"
							},
							"collectionOwner()": {
								"details": "EVM selector for this function is: 0xdf727d3b,  or in textual repr: collectionOwner()",
								"returns": {
									"_0": "Tuble with sponsor address and his substrate mirror. If address is canonical then substrate mirror is zero and vice versa."
								}
							},
							"collectionProperties(string[])": {
								"details": "EVM selector for this function is: 0x285fb8e6,  or in textual repr: collectionProperties(string[])",
								"params": {
									"keys": "Properties keys. Empty keys for all propertyes."
								},
								"returns": {
									"_0": "Vector of properties key/value pairs."
								}
							},
							"collectionProperty(string)": {
								"details": "Throws error if key not found.EVM selector for this function is: 0xcf24fd6d,  or in textual repr: collectionProperty(string)",
								"params": {
									"key": "Property key."
								},
								"returns": {
									"_0": "bytes The property corresponding to the key."
								}
							},
							"collectionSponsor()": {
								"details": "EVM selector for this function is: 0x6ec0a9f1,  or in textual repr: collectionSponsor()",
								"returns": {
									"_0": "Tuble with sponsor address and his substrate mirror. If there is no confirmed sponsor error \"Contract has no sponsor\" throw."
								}
							},
							"confirmCollectionSponsorship()": {
								"details": "After setting the sponsor for the collection, it must be confirmed with this function.EVM selector for this function is: 0x3c50e97a,  or in textual repr: confirmCollectionSponsorship()"
							},
							"contractAddress()": {
								"details": "EVM selector for this function is: 0xf6b4dfb4,  or in textual repr: contractAddress()"
							},
							"crossOwnerOf(uint256)": {
								"details": "EVM selector for this function is: 0x2b29dace,  or in textual repr: crossOwnerOf(uint256)",
								"params": {
									"tokenId": "Id for the token."
								}
							},
							"deleteCollectionProperties(string[])": {
								"details": "EVM selector for this function is: 0xee206ee3,  or in textual repr: deleteCollectionProperties(string[])",
								"params": {
									"keys": "Properties keys."
								}
							},
							"deleteProperties(uint256,string[])": {
								"details": "Throws error if `msg.sender` has no permission to edit the property.EVM selector for this function is: 0xc472d371,  or in textual repr: deleteProperties(uint256,string[])",
								"params": {
									"keys": "Properties key.",
									"tokenId": "ID of the token."
								}
							},
							"description()": {
								"details": "EVM selector for this function is: 0x7284e416,  or in textual repr: description()"
							},
							"getApproved(uint256)": {
								"details": "Throws if `tokenId` is not a valid NFTEVM selector for this function is: 0x081812fc,  or in textual repr: getApproved(uint256)",
								"params": {
									"tokenId": "The NFT to find the approved address for"
								},
								"returns": {
									"_0": "The approved address for this NFT, or the zero address if there is none"
								}
							},
							"hasCollectionPendingSponsor()": {
								"details": "EVM selector for this function is: 0x058ac185,  or in textual repr: hasCollectionPendingSponsor()"
							},
							"isApprovedForAll(address,address)": {
								"details": "EVM selector for this function is: 0xe985e9c5,  or in textual repr: isApprovedForAll(address,address)"
							},
							"isOwnerOrAdminCross((address,uint256))": {
								"details": "EVM selector for this function is: 0x3e75a905,  or in textual repr: isOwnerOrAdminCross((address,uint256))",
								"params": {
									"user": "User cross account to verify"
								},
								"returns": {
									"_0": "\"true\" if account is the owner or admin"
								}
							},
							"mint(address)": {
								"details": "EVM selector for this function is: 0x6a627842,  or in textual repr: mint(address)",
								"params": {
									"to": "The new owner"
								},
								"returns": {
									"_0": "uint256 The id of the newly minted token"
								}
							},
							"mintCross((address,uint256),(string,bytes)[])": {
								"details": "EVM selector for this function is: 0xb904db03,  or in textual repr: mintCross((address,uint256),(string,bytes)[])",
								"params": {
									"properties": "Properties of minted token",
									"to": "The new owner crossAccountId"
								},
								"returns": {
									"_0": "uint256 The id of the newly minted token"
								}
							},
							"mintWithTokenURI(address,string)": {
								"details": "EVM selector for this function is: 0x45c17782,  or in textual repr: mintWithTokenURI(address,string)",
								"params": {
									"to": "The new owner",
									"tokenUri": "Token URI that would be stored in the NFT properties"
								},
								"returns": {
									"_0": "uint256 The id of the newly minted token"
								}
							},
							"name()": {
								"details": "EVM selector for this function is: 0x06fdde03,  or in textual repr: name()"
							},
							"nextTokenId()": {
								"details": "EVM selector for this function is: 0x75794a3c,  or in textual repr: nextTokenId()"
							},
							"ownerOf(uint256)": {
								"details": "NFTs assigned to zero address are considered invalid, and queries  about them do throw.EVM selector for this function is: 0x6352211e,  or in textual repr: ownerOf(uint256)",
								"params": {
									"tokenId": "The identifier for an NFT"
								},
								"returns": {
									"_0": "The address of the owner of the NFT"
								}
							},
							"properties(uint256,string[])": {
								"details": "EVM selector for this function is: 0xe07ede7e,  or in textual repr: properties(uint256,string[])",
								"params": {
									"keys": "Properties keys. Empty keys for all propertyes.",
									"tokenId": "Id for the token."
								},
								"returns": {
									"_0": "Vector of properties key/value pairs."
								}
							},
							"property(uint256,string)": {
								"details": "Throws error if key not foundEVM selector for this function is: 0x7228c327,  or in textual repr: property(uint256,string)",
								"params": {
									"key": "Property key.",
									"tokenId": "ID of the token."
								},
								"returns": {
									"_0": "Property value bytes"
								}
							},
							"removeCollectionAdminCross((address,uint256))": {
								"details": "EVM selector for this function is: 0x6c0cd173,  or in textual repr: removeCollectionAdminCross((address,uint256))",
								"params": {
									"admin": "Cross account administrator address."
								}
							},
							"removeCollectionSponsor()": {
								"details": "EVM selector for this function is: 0x6e0326a3,  or in textual repr: removeCollectionSponsor()"
							},
							"removeFromCollectionAllowListCross((address,uint256))": {
								"details": "EVM selector for this function is: 0x09ba452a,  or in textual repr: removeFromCollectionAllowListCross((address,uint256))",
								"params": {
									"user": "User cross account address."
								}
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Not implementedEVM selector for this function is: 0x42842e0e,  or in textual repr: safeTransferFrom(address,address,uint256)"
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Not implementedEVM selector for this function is: 0xb88d4fde,  or in textual repr: safeTransferFrom(address,address,uint256,bytes)"
							},
							"setApprovalForAll(address,bool)": {
								"details": "EVM selector for this function is: 0xa22cb465,  or in textual repr: setApprovalForAll(address,bool)",
								"params": {
									"approved": "Should operator status be granted or revoked?",
									"operator": "Operator"
								}
							},
							"setCollectionAccess(uint8)": {
								"details": "EVM selector for this function is: 0x41835d4c,  or in textual repr: setCollectionAccess(uint8)",
								"params": {
									"mode": "Access mode"
								}
							},
							"setCollectionLimit((uint8,(bool,uint256)))": {
								"details": "Throws error if limit not found.EVM selector for this function is: 0x2316ee74,  or in textual repr: setCollectionLimit((uint8,(bool,uint256)))",
								"params": {
									"limit": "Some limit."
								}
							},
							"setCollectionMintMode(bool)": {
								"details": "EVM selector for this function is: 0x00018e84,  or in textual repr: setCollectionMintMode(bool)",
								"params": {
									"mode": "Enable if \"true\"."
								}
							},
							"setCollectionNesting(bool)": {
								"details": "EVM selector for this function is: 0x112d4586,  or in textual repr: setCollectionNesting(bool)",
								"params": {
									"enable": "If \"true\" degenerates to nesting: 'Owner' else to nesting: 'Disabled'"
								}
							},
							"setCollectionNesting(bool,address[])": {
								"details": "EVM selector for this function is: 0x64872396,  or in textual repr: setCollectionNesting(bool,address[])",
								"params": {
									"collections": "Addresses of collections that will be available for nesting.",
									"enable": "If \"true\" degenerates to nesting: {OwnerRestricted: [1, 2, 3]} else to nesting: 'Disabled'"
								}
							},
							"setCollectionProperties((string,bytes)[])": {
								"details": "EVM selector for this function is: 0x50b26b2a,  or in textual repr: setCollectionProperties((string,bytes)[])",
								"params": {
									"properties": "Vector of properties key/value pair."
								}
							},
							"setCollectionSponsorCross((address,uint256))": {
								"details": "In order for sponsorship to work, it must be confirmed on behalf of the sponsor.EVM selector for this function is: 0x84a1d5a8,  or in textual repr: setCollectionSponsorCross((address,uint256))",
								"params": {
									"sponsor": "Cross account address of the sponsor from whose account funds will be debited for operations with the contract."
								}
							},
							"setProperties(uint256,(string,bytes)[])": {
								"details": "Throws error if `msg.sender` has no permission to edit the property.EVM selector for this function is: 0x14ed3a6e,  or in textual repr: setProperties(uint256,(string,bytes)[])",
								"params": {
									"properties": "settable properties",
									"tokenId": "ID of the token."
								}
							},
							"setTokenPropertyPermissions((string,(uint8,bool)[])[])": {
								"details": "Throws error if `msg.sender` is not admin or owner of the collection.EVM selector for this function is: 0xbd92983a,  or in textual repr: setTokenPropertyPermissions((string,(uint8,bool)[])[])",
								"params": {
									"permissions": "Permissions for keys."
								}
							},
							"symbol()": {
								"details": "EVM selector for this function is: 0x95d89b41,  or in textual repr: symbol()"
							},
							"tokenByIndex(uint256)": {
								"details": "EVM selector for this function is: 0x4f6ccce7,  or in textual repr: tokenByIndex(uint256)",
								"params": {
									"index": "A counter less than `totalSupply()`"
								},
								"returns": {
									"_0": "The token identifier for the `index`th NFT,  (sort order not specified)"
								}
							},
							"tokenOfOwnerByIndex(address,uint256)": {
								"details": "Not implementedEVM selector for this function is: 0x2f745c59,  or in textual repr: tokenOfOwnerByIndex(address,uint256)"
							},
							"tokenPropertyPermissions()": {
								"details": "EVM selector for this function is: 0xf23d7790,  or in textual repr: tokenPropertyPermissions()"
							},
							"tokenURI(uint256)": {
								"details": "If the token has a `url` property and it is not empty, it is returned.  Else If the collection does not have a property with key `schemaName` or its value is not equal to `ERC721Metadata`, it return an error `tokenURI not set`.  If the collection property `baseURI` is empty or absent, return \"\" (empty string)  otherwise, if token property `suffix` present and is non-empty, return concatenation of baseURI and suffix  otherwise, return concatenation of `baseURI` and stringified token id (decimal stringifying, without paddings).EVM selector for this function is: 0xc87b56dd,  or in textual repr: tokenURI(uint256)",
								"returns": {
									"_0": "token's const_metadata"
								}
							},
							"totalSupply()": {
								"details": "EVM selector for this function is: 0x18160ddd,  or in textual repr: totalSupply()",
								"returns": {
									"_0": "A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address"
								}
							},
							"transfer(address,uint256)": {
								"details": "Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xa9059cbb,  or in textual repr: transfer(address,uint256)",
								"params": {
									"to": "The new owner",
									"tokenId": "The NFT to transfer"
								}
							},
							"transferCross((address,uint256),uint256)": {
								"details": "Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0x2ada85ff,  or in textual repr: transferCross((address,uint256),uint256)",
								"params": {
									"to": "The new owner",
									"tokenId": "The NFT to transfer"
								}
							},
							"transferFrom(address,address,uint256)": {
								"details": "Throws unless `msg.sender` is the current owner or an authorized  operator for this NFT. Throws if `from` is not the current owner. Throws  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0x23b872dd,  or in textual repr: transferFrom(address,address,uint256)",
								"params": {
									"from": "The current owner of the NFT",
									"to": "The new owner",
									"tokenId": "The NFT to transfer"
								}
							},
							"transferFromCross((address,uint256),(address,uint256),uint256)": {
								"details": "Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xd5cf430b,  or in textual repr: transferFromCross((address,uint256),(address,uint256),uint256)",
								"params": {
									"from": "Cross acccount address of current owner",
									"to": "Cross acccount address of new owner",
									"tokenId": "The NFT to transfer"
								}
							},
							"uniqueCollectionType()": {
								"details": "EVM selector for this function is: 0xd34b55b8,  or in textual repr: uniqueCollectionType()",
								"returns": {
									"_0": "`Fungible` or `NFT` or `ReFungible`"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addCollectionAdminCross((address,uint256))": "859aa7d6",
							"addToCollectionAllowListCross((address,uint256))": "a0184a3a",
							"allowlistedCross((address,uint256))": "91b6df49",
							"approve(address,uint256)": "095ea7b3",
							"approveCross((address,uint256),uint256)": "0ecd0ab0",
							"balanceOf(address)": "70a08231",
							"burn(uint256)": "42966c68",
							"burnFromCross((address,uint256),uint256)": "bb2f5a58",
							"changeCollectionOwnerCross((address,uint256))": "6496c497",
							"collectionAdmins()": "5813216b",
							"collectionHelperAddress()": "1896cce6",
							"collectionLimits()": "f63bc572",
							"collectionNestingPermissions()": "5b2eaf4b",
							"collectionNestingRestrictedCollectionIds()": "22d25bfe",
							"collectionOwner()": "df727d3b",
							"collectionProperties(string[])": "285fb8e6",
							"collectionProperty(string)": "cf24fd6d",
							"collectionSponsor()": "6ec0a9f1",
							"confirmCollectionSponsorship()": "3c50e97a",
							"contractAddress()": "f6b4dfb4",
							"crossOwnerOf(uint256)": "2b29dace",
							"deleteCollectionProperties(string[])": "ee206ee3",
							"deleteProperties(uint256,string[])": "c472d371",
							"description()": "7284e416",
							"getApproved(uint256)": "081812fc",
							"hasCollectionPendingSponsor()": "058ac185",
							"isApprovedForAll(address,address)": "e985e9c5",
							"isOwnerOrAdminCross((address,uint256))": "3e75a905",
							"mint(address)": "6a627842",
							"mintCross((address,uint256),(string,bytes)[])": "b904db03",
							"mintWithTokenURI(address,string)": "45c17782",
							"name()": "06fdde03",
							"nextTokenId()": "75794a3c",
							"ownerOf(uint256)": "6352211e",
							"properties(uint256,string[])": "e07ede7e",
							"property(uint256,string)": "7228c327",
							"removeCollectionAdminCross((address,uint256))": "6c0cd173",
							"removeCollectionSponsor()": "6e0326a3",
							"removeFromCollectionAllowListCross((address,uint256))": "09ba452a",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"setCollectionAccess(uint8)": "41835d4c",
							"setCollectionLimit((uint8,(bool,uint256)))": "2316ee74",
							"setCollectionMintMode(bool)": "00018e84",
							"setCollectionNesting(bool)": "112d4586",
							"setCollectionNesting(bool,address[])": "64872396",
							"setCollectionProperties((string,bytes)[])": "50b26b2a",
							"setCollectionSponsorCross((address,uint256))": "84a1d5a8",
							"setProperties(uint256,(string,bytes)[])": "14ed3a6e",
							"setTokenPropertyPermissions((string,(uint8,bool)[])[])": "bd92983a",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenByIndex(uint256)": "4f6ccce7",
							"tokenOfOwnerByIndex(address,uint256)": "2f745c59",
							"tokenPropertyPermissions()": "f23d7790",
							"tokenURI(uint256)": "c87b56dd",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferCross((address,uint256),uint256)": "2ada85ff",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferFromCross((address,uint256),(address,uint256),uint256)": "d5cf430b",
							"uniqueCollectionType()": "d34b55b8"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"TokenChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"newAdmin\",\"type\":\"tuple\"}],\"name\":\"addCollectionAdminCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"user\",\"type\":\"tuple\"}],\"name\":\"addToCollectionAllowListCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"user\",\"type\":\"tuple\"}],\"name\":\"allowlistedCross\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"approved\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approveCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"from\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnFromCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"newOwner\",\"type\":\"tuple\"}],\"name\":\"changeCollectionOwnerCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionAdmins\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionHelperAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionLimits\",\"outputs\":[{\"components\":[{\"internalType\":\"enum CollectionLimitField\",\"name\":\"field\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionUint256\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct CollectionLimit[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionNestingPermissions\",\"outputs\":[{\"components\":[{\"internalType\":\"enum CollectionPermissionField\",\"name\":\"field\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct CollectionNestingPermission[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionNestingRestrictedCollectionIds\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"token_owner\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"internalType\":\"struct CollectionNesting\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionOwner\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"collectionProperties\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct Property[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"collectionProperty\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collectionSponsor\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"confirmCollectionSponsorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"crossOwnerOf\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"deleteCollectionProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"deleteProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasCollectionPendingSponsor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"user\",\"type\":\"tuple\"}],\"name\":\"isOwnerOrAdminCross\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct Property[]\",\"name\":\"properties\",\"type\":\"tuple[]\"}],\"name\":\"mintCross\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"}],\"name\":\"properties\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct Property[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"property\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"admin\",\"type\":\"tuple\"}],\"name\":\"removeCollectionAdminCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeCollectionSponsor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"user\",\"type\":\"tuple\"}],\"name\":\"removeFromCollectionAllowListCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum AccessMode\",\"name\":\"mode\",\"type\":\"uint8\"}],\"name\":\"setCollectionAccess\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"enum CollectionLimitField\",\"name\":\"field\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct OptionUint256\",\"name\":\"value\",\"type\":\"tuple\"}],\"internalType\":\"struct CollectionLimit\",\"name\":\"limit\",\"type\":\"tuple\"}],\"name\":\"setCollectionLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"mode\",\"type\":\"bool\"}],\"name\":\"setCollectionMintMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"}],\"name\":\"setCollectionNesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"enable\",\"type\":\"bool\"},{\"internalType\":\"address[]\",\"name\":\"collections\",\"type\":\"address[]\"}],\"name\":\"setCollectionNesting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct Property[]\",\"name\":\"properties\",\"type\":\"tuple[]\"}],\"name\":\"setCollectionProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"sponsor\",\"type\":\"tuple\"}],\"name\":\"setCollectionSponsorCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"value\",\"type\":\"bytes\"}],\"internalType\":\"struct Property[]\",\"name\":\"properties\",\"type\":\"tuple[]\"}],\"name\":\"setProperties\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"enum TokenPermissionField\",\"name\":\"code\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct PropertyPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokenPropertyPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"name\":\"setTokenPropertyPermissions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPropertyPermissions\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"enum TokenPermissionField\",\"name\":\"code\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"internalType\":\"struct PropertyPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokenPropertyPermission[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"from\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"eth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sub\",\"type\":\"uint256\"}],\"internalType\":\"struct CrossAddress\",\"name\":\"to\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFromCross\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniqueCollectionType\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addCollectionAdminCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0x859aa7d6,  or in textual repr: addCollectionAdminCross((address,uint256))\",\"params\":{\"newAdmin\":\"Cross account administrator address.\"}},\"addToCollectionAllowListCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0xa0184a3a,  or in textual repr: addToCollectionAllowListCross((address,uint256))\",\"params\":{\"user\":\"User cross account address.\"}},\"allowlistedCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0x91b6df49,  or in textual repr: allowlistedCross((address,uint256))\",\"params\":{\"user\":\"User address to check.\"}},\"approve(address,uint256)\":{\"details\":\"The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x095ea7b3,  or in textual repr: approve(address,uint256)\",\"params\":{\"approved\":\"The new approved NFT controller\",\"tokenId\":\"The NFT to approve\"}},\"approveCross((address,uint256),uint256)\":{\"details\":\"The zero address indicates there is no approved address.Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x0ecd0ab0,  or in textual repr: approveCross((address,uint256),uint256)\",\"params\":{\"approved\":\"The new substrate address approved NFT controller\",\"tokenId\":\"The NFT to approve\"}},\"balanceOf(address)\":{\"details\":\"NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.EVM selector for this function is: 0x70a08231,  or in textual repr: balanceOf(address)\",\"params\":{\"owner\":\"An address for whom to query the balance\"},\"returns\":{\"_0\":\"The number of NFTs owned by `owner`, possibly zero\"}},\"burn(uint256)\":{\"details\":\"Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.EVM selector for this function is: 0x42966c68,  or in textual repr: burn(uint256)\",\"params\":{\"tokenId\":\"The NFT to approve\"}},\"burnFromCross((address,uint256),uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner or an authorized  operator for this NFT. Throws if `from` is not the current owner. Throws  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xbb2f5a58,  or in textual repr: burnFromCross((address,uint256),uint256)\",\"params\":{\"from\":\"The current owner of the NFT\",\"tokenId\":\"The NFT to transfer\"}},\"changeCollectionOwnerCross((address,uint256))\":{\"details\":\"Owner can be changed only by current ownerEVM selector for this function is: 0x6496c497,  or in textual repr: changeCollectionOwnerCross((address,uint256))\",\"params\":{\"newOwner\":\"new owner cross account\"}},\"collectionAdmins()\":{\"details\":\"EVM selector for this function is: 0x5813216b,  or in textual repr: collectionAdmins()\",\"returns\":{\"_0\":\"Vector of tuples with admins address and his substrate mirror. If address is canonical then substrate mirror is zero and vice versa.\"}},\"collectionHelperAddress()\":{\"details\":\"EVM selector for this function is: 0x1896cce6,  or in textual repr: collectionHelperAddress()\"},\"collectionLimits()\":{\"details\":\"EVM selector for this function is: 0xf63bc572,  or in textual repr: collectionLimits()\",\"returns\":{\"_0\":\"Array of collection limits\"}},\"collectionNestingPermissions()\":{\"details\":\"EVM selector for this function is: 0x5b2eaf4b,  or in textual repr: collectionNestingPermissions()\"},\"collectionNestingRestrictedCollectionIds()\":{\"details\":\"EVM selector for this function is: 0x22d25bfe,  or in textual repr: collectionNestingRestrictedCollectionIds()\"},\"collectionOwner()\":{\"details\":\"EVM selector for this function is: 0xdf727d3b,  or in textual repr: collectionOwner()\",\"returns\":{\"_0\":\"Tuble with sponsor address and his substrate mirror. If address is canonical then substrate mirror is zero and vice versa.\"}},\"collectionProperties(string[])\":{\"details\":\"EVM selector for this function is: 0x285fb8e6,  or in textual repr: collectionProperties(string[])\",\"params\":{\"keys\":\"Properties keys. Empty keys for all propertyes.\"},\"returns\":{\"_0\":\"Vector of properties key/value pairs.\"}},\"collectionProperty(string)\":{\"details\":\"Throws error if key not found.EVM selector for this function is: 0xcf24fd6d,  or in textual repr: collectionProperty(string)\",\"params\":{\"key\":\"Property key.\"},\"returns\":{\"_0\":\"bytes The property corresponding to the key.\"}},\"collectionSponsor()\":{\"details\":\"EVM selector for this function is: 0x6ec0a9f1,  or in textual repr: collectionSponsor()\",\"returns\":{\"_0\":\"Tuble with sponsor address and his substrate mirror. If there is no confirmed sponsor error \\\"Contract has no sponsor\\\" throw.\"}},\"confirmCollectionSponsorship()\":{\"details\":\"After setting the sponsor for the collection, it must be confirmed with this function.EVM selector for this function is: 0x3c50e97a,  or in textual repr: confirmCollectionSponsorship()\"},\"contractAddress()\":{\"details\":\"EVM selector for this function is: 0xf6b4dfb4,  or in textual repr: contractAddress()\"},\"crossOwnerOf(uint256)\":{\"details\":\"EVM selector for this function is: 0x2b29dace,  or in textual repr: crossOwnerOf(uint256)\",\"params\":{\"tokenId\":\"Id for the token.\"}},\"deleteCollectionProperties(string[])\":{\"details\":\"EVM selector for this function is: 0xee206ee3,  or in textual repr: deleteCollectionProperties(string[])\",\"params\":{\"keys\":\"Properties keys.\"}},\"deleteProperties(uint256,string[])\":{\"details\":\"Throws error if `msg.sender` has no permission to edit the property.EVM selector for this function is: 0xc472d371,  or in textual repr: deleteProperties(uint256,string[])\",\"params\":{\"keys\":\"Properties key.\",\"tokenId\":\"ID of the token.\"}},\"description()\":{\"details\":\"EVM selector for this function is: 0x7284e416,  or in textual repr: description()\"},\"getApproved(uint256)\":{\"details\":\"Throws if `tokenId` is not a valid NFTEVM selector for this function is: 0x081812fc,  or in textual repr: getApproved(uint256)\",\"params\":{\"tokenId\":\"The NFT to find the approved address for\"},\"returns\":{\"_0\":\"The approved address for this NFT, or the zero address if there is none\"}},\"hasCollectionPendingSponsor()\":{\"details\":\"EVM selector for this function is: 0x058ac185,  or in textual repr: hasCollectionPendingSponsor()\"},\"isApprovedForAll(address,address)\":{\"details\":\"EVM selector for this function is: 0xe985e9c5,  or in textual repr: isApprovedForAll(address,address)\"},\"isOwnerOrAdminCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0x3e75a905,  or in textual repr: isOwnerOrAdminCross((address,uint256))\",\"params\":{\"user\":\"User cross account to verify\"},\"returns\":{\"_0\":\"\\\"true\\\" if account is the owner or admin\"}},\"mint(address)\":{\"details\":\"EVM selector for this function is: 0x6a627842,  or in textual repr: mint(address)\",\"params\":{\"to\":\"The new owner\"},\"returns\":{\"_0\":\"uint256 The id of the newly minted token\"}},\"mintCross((address,uint256),(string,bytes)[])\":{\"details\":\"EVM selector for this function is: 0xb904db03,  or in textual repr: mintCross((address,uint256),(string,bytes)[])\",\"params\":{\"properties\":\"Properties of minted token\",\"to\":\"The new owner crossAccountId\"},\"returns\":{\"_0\":\"uint256 The id of the newly minted token\"}},\"mintWithTokenURI(address,string)\":{\"details\":\"EVM selector for this function is: 0x45c17782,  or in textual repr: mintWithTokenURI(address,string)\",\"params\":{\"to\":\"The new owner\",\"tokenUri\":\"Token URI that would be stored in the NFT properties\"},\"returns\":{\"_0\":\"uint256 The id of the newly minted token\"}},\"name()\":{\"details\":\"EVM selector for this function is: 0x06fdde03,  or in textual repr: name()\"},\"nextTokenId()\":{\"details\":\"EVM selector for this function is: 0x75794a3c,  or in textual repr: nextTokenId()\"},\"ownerOf(uint256)\":{\"details\":\"NFTs assigned to zero address are considered invalid, and queries  about them do throw.EVM selector for this function is: 0x6352211e,  or in textual repr: ownerOf(uint256)\",\"params\":{\"tokenId\":\"The identifier for an NFT\"},\"returns\":{\"_0\":\"The address of the owner of the NFT\"}},\"properties(uint256,string[])\":{\"details\":\"EVM selector for this function is: 0xe07ede7e,  or in textual repr: properties(uint256,string[])\",\"params\":{\"keys\":\"Properties keys. Empty keys for all propertyes.\",\"tokenId\":\"Id for the token.\"},\"returns\":{\"_0\":\"Vector of properties key/value pairs.\"}},\"property(uint256,string)\":{\"details\":\"Throws error if key not foundEVM selector for this function is: 0x7228c327,  or in textual repr: property(uint256,string)\",\"params\":{\"key\":\"Property key.\",\"tokenId\":\"ID of the token.\"},\"returns\":{\"_0\":\"Property value bytes\"}},\"removeCollectionAdminCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0x6c0cd173,  or in textual repr: removeCollectionAdminCross((address,uint256))\",\"params\":{\"admin\":\"Cross account administrator address.\"}},\"removeCollectionSponsor()\":{\"details\":\"EVM selector for this function is: 0x6e0326a3,  or in textual repr: removeCollectionSponsor()\"},\"removeFromCollectionAllowListCross((address,uint256))\":{\"details\":\"EVM selector for this function is: 0x09ba452a,  or in textual repr: removeFromCollectionAllowListCross((address,uint256))\",\"params\":{\"user\":\"User cross account address.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Not implementedEVM selector for this function is: 0x42842e0e,  or in textual repr: safeTransferFrom(address,address,uint256)\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Not implementedEVM selector for this function is: 0xb88d4fde,  or in textual repr: safeTransferFrom(address,address,uint256,bytes)\"},\"setApprovalForAll(address,bool)\":{\"details\":\"EVM selector for this function is: 0xa22cb465,  or in textual repr: setApprovalForAll(address,bool)\",\"params\":{\"approved\":\"Should operator status be granted or revoked?\",\"operator\":\"Operator\"}},\"setCollectionAccess(uint8)\":{\"details\":\"EVM selector for this function is: 0x41835d4c,  or in textual repr: setCollectionAccess(uint8)\",\"params\":{\"mode\":\"Access mode\"}},\"setCollectionLimit((uint8,(bool,uint256)))\":{\"details\":\"Throws error if limit not found.EVM selector for this function is: 0x2316ee74,  or in textual repr: setCollectionLimit((uint8,(bool,uint256)))\",\"params\":{\"limit\":\"Some limit.\"}},\"setCollectionMintMode(bool)\":{\"details\":\"EVM selector for this function is: 0x00018e84,  or in textual repr: setCollectionMintMode(bool)\",\"params\":{\"mode\":\"Enable if \\\"true\\\".\"}},\"setCollectionNesting(bool)\":{\"details\":\"EVM selector for this function is: 0x112d4586,  or in textual repr: setCollectionNesting(bool)\",\"params\":{\"enable\":\"If \\\"true\\\" degenerates to nesting: 'Owner' else to nesting: 'Disabled'\"}},\"setCollectionNesting(bool,address[])\":{\"details\":\"EVM selector for this function is: 0x64872396,  or in textual repr: setCollectionNesting(bool,address[])\",\"params\":{\"collections\":\"Addresses of collections that will be available for nesting.\",\"enable\":\"If \\\"true\\\" degenerates to nesting: {OwnerRestricted: [1, 2, 3]} else to nesting: 'Disabled'\"}},\"setCollectionProperties((string,bytes)[])\":{\"details\":\"EVM selector for this function is: 0x50b26b2a,  or in textual repr: setCollectionProperties((string,bytes)[])\",\"params\":{\"properties\":\"Vector of properties key/value pair.\"}},\"setCollectionSponsorCross((address,uint256))\":{\"details\":\"In order for sponsorship to work, it must be confirmed on behalf of the sponsor.EVM selector for this function is: 0x84a1d5a8,  or in textual repr: setCollectionSponsorCross((address,uint256))\",\"params\":{\"sponsor\":\"Cross account address of the sponsor from whose account funds will be debited for operations with the contract.\"}},\"setProperties(uint256,(string,bytes)[])\":{\"details\":\"Throws error if `msg.sender` has no permission to edit the property.EVM selector for this function is: 0x14ed3a6e,  or in textual repr: setProperties(uint256,(string,bytes)[])\",\"params\":{\"properties\":\"settable properties\",\"tokenId\":\"ID of the token.\"}},\"setTokenPropertyPermissions((string,(uint8,bool)[])[])\":{\"details\":\"Throws error if `msg.sender` is not admin or owner of the collection.EVM selector for this function is: 0xbd92983a,  or in textual repr: setTokenPropertyPermissions((string,(uint8,bool)[])[])\",\"params\":{\"permissions\":\"Permissions for keys.\"}},\"symbol()\":{\"details\":\"EVM selector for this function is: 0x95d89b41,  or in textual repr: symbol()\"},\"tokenByIndex(uint256)\":{\"details\":\"EVM selector for this function is: 0x4f6ccce7,  or in textual repr: tokenByIndex(uint256)\",\"params\":{\"index\":\"A counter less than `totalSupply()`\"},\"returns\":{\"_0\":\"The token identifier for the `index`th NFT,  (sort order not specified)\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Not implementedEVM selector for this function is: 0x2f745c59,  or in textual repr: tokenOfOwnerByIndex(address,uint256)\"},\"tokenPropertyPermissions()\":{\"details\":\"EVM selector for this function is: 0xf23d7790,  or in textual repr: tokenPropertyPermissions()\"},\"tokenURI(uint256)\":{\"details\":\"If the token has a `url` property and it is not empty, it is returned.  Else If the collection does not have a property with key `schemaName` or its value is not equal to `ERC721Metadata`, it return an error `tokenURI not set`.  If the collection property `baseURI` is empty or absent, return \\\"\\\" (empty string)  otherwise, if token property `suffix` present and is non-empty, return concatenation of baseURI and suffix  otherwise, return concatenation of `baseURI` and stringified token id (decimal stringifying, without paddings).EVM selector for this function is: 0xc87b56dd,  or in textual repr: tokenURI(uint256)\",\"returns\":{\"_0\":\"token's const_metadata\"}},\"totalSupply()\":{\"details\":\"EVM selector for this function is: 0x18160ddd,  or in textual repr: totalSupply()\",\"returns\":{\"_0\":\"A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address\"}},\"transfer(address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xa9059cbb,  or in textual repr: transfer(address,uint256)\",\"params\":{\"to\":\"The new owner\",\"tokenId\":\"The NFT to transfer\"}},\"transferCross((address,uint256),uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0x2ada85ff,  or in textual repr: transferCross((address,uint256),uint256)\",\"params\":{\"to\":\"The new owner\",\"tokenId\":\"The NFT to transfer\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner or an authorized  operator for this NFT. Throws if `from` is not the current owner. Throws  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0x23b872dd,  or in textual repr: transferFrom(address,address,uint256)\",\"params\":{\"from\":\"The current owner of the NFT\",\"to\":\"The new owner\",\"tokenId\":\"The NFT to transfer\"}},\"transferFromCross((address,uint256),(address,uint256),uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner. Throws if `to`  is the zero address. Throws if `tokenId` is not a valid NFT.EVM selector for this function is: 0xd5cf430b,  or in textual repr: transferFromCross((address,uint256),(address,uint256),uint256)\",\"params\":{\"from\":\"Cross acccount address of current owner\",\"to\":\"Cross acccount address of new owner\",\"tokenId\":\"The NFT to transfer\"}},\"uniqueCollectionType()\":{\"details\":\"EVM selector for this function is: 0xd34b55b8,  or in textual repr: uniqueCollectionType()\",\"returns\":{\"_0\":\"`Fungible` or `NFT` or `ReFungible`\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCollectionAdminCross((address,uint256))\":{\"notice\":\"Add collection admin.\"},\"addToCollectionAllowListCross((address,uint256))\":{\"notice\":\"Add user to allowed list.\"},\"allowlistedCross((address,uint256))\":{\"notice\":\"Checks that user allowed to operate with collection.\"},\"approve(address,uint256)\":{\"notice\":\"Set or reaffirm the approved address for an NFT\"},\"approveCross((address,uint256),uint256)\":{\"notice\":\"Set or reaffirm the approved address for an NFT\"},\"balanceOf(address)\":{\"notice\":\"Count all NFTs assigned to an owner\"},\"burn(uint256)\":{\"notice\":\"Burns a specific ERC721 token.\"},\"burnFromCross((address,uint256),uint256)\":{\"notice\":\"Burns a specific ERC721 token.\"},\"changeCollectionOwnerCross((address,uint256))\":{\"notice\":\"Changes collection owner to another account\"},\"collectionAdmins()\":{\"notice\":\"Get collection administrators\"},\"collectionHelperAddress()\":{\"notice\":\"Returns collection helper contract address\"},\"collectionLimits()\":{\"notice\":\"Get current collection limits.\"},\"collectionNestingPermissions()\":{\"notice\":\"Returns permissions for a collection\"},\"collectionNestingRestrictedCollectionIds()\":{\"notice\":\"Returns nesting for a collection\"},\"collectionOwner()\":{\"notice\":\"Get collection owner.\"},\"collectionProperties(string[])\":{\"notice\":\"Get collection properties.\"},\"collectionProperty(string)\":{\"notice\":\"Get collection property.\"},\"collectionSponsor()\":{\"notice\":\"Get current sponsor.\"},\"confirmCollectionSponsorship()\":{\"notice\":\"Collection sponsorship confirmation.\"},\"contractAddress()\":{\"notice\":\"Get contract address.\"},\"crossOwnerOf(uint256)\":{\"notice\":\"Returns the owner (in cross format) of the token.\"},\"deleteCollectionProperties(string[])\":{\"notice\":\"Delete collection properties.\"},\"deleteProperties(uint256,string[])\":{\"notice\":\"Delete token properties value.\"},\"description()\":{\"notice\":\"A description for the collection.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved address for a single NFT\"},\"hasCollectionPendingSponsor()\":{\"notice\":\"Whether there is a pending sponsor.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Tells whether the given `owner` approves the `operator`.\"},\"isOwnerOrAdminCross((address,uint256))\":{\"notice\":\"Check that account is the owner or admin of the collection\"},\"mint(address)\":{\"notice\":\"Function to mint a token.\"},\"mintCross((address,uint256),(string,bytes)[])\":{\"notice\":\"Function to mint a token.\"},\"mintWithTokenURI(address,string)\":{\"notice\":\"Function to mint token with the given tokenUri.\"},\"name()\":{\"notice\":\"A descriptive name for a collection of NFTs in this contract\"},\"nextTokenId()\":{\"notice\":\"Returns next free NFT ID.\"},\"ownerOf(uint256)\":{\"notice\":\"Find the owner of an NFT\"},\"properties(uint256,string[])\":{\"notice\":\"Returns the token properties.\"},\"property(uint256,string)\":{\"notice\":\"Get token property value.\"},\"removeCollectionAdminCross((address,uint256))\":{\"notice\":\"Remove collection admin.\"},\"removeCollectionSponsor()\":{\"notice\":\"Remove collection sponsor.\"},\"removeFromCollectionAllowListCross((address,uint256))\":{\"notice\":\"Remove user from allowed list.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets the approval of a given operator. The `operator` is allowed to transfer all tokens of the `caller` on their behalf.\"},\"setCollectionAccess(uint8)\":{\"notice\":\"Set the collection access method.\"},\"setCollectionLimit((uint8,(bool,uint256)))\":{\"notice\":\"Set limits for the collection.\"},\"setCollectionMintMode(bool)\":{\"notice\":\"Switch permission for minting.\"},\"setCollectionNesting(bool)\":{\"notice\":\"Toggle accessibility of collection nesting.\"},\"setCollectionNesting(bool,address[])\":{\"notice\":\"Toggle accessibility of collection nesting.\"},\"setCollectionProperties((string,bytes)[])\":{\"notice\":\"Set collection properties.\"},\"setCollectionSponsorCross((address,uint256))\":{\"notice\":\"Set the sponsor of the collection.\"},\"setProperties(uint256,(string,bytes)[])\":{\"notice\":\"Set token properties value.\"},\"setTokenPropertyPermissions((string,(uint8,bool)[])[])\":{\"notice\":\"Set permissions for token property.\"},\"symbol()\":{\"notice\":\"An abbreviated name for NFTs in this contract\"},\"tokenByIndex(uint256)\":{\"notice\":\"Enumerate valid NFTs\"},\"tokenPropertyPermissions()\":{\"notice\":\"Get permissions for token properties.\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"totalSupply()\":{\"notice\":\"Count NFTs tracked by this contract\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer ownership of an NFT\"},\"transferCross((address,uint256),uint256)\":{\"notice\":\"Transfer ownership of an NFT\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST\"},\"transferFromCross((address,uint256),(address,uint256),uint256)\":{\"notice\":\"Transfer ownership of an NFT from cross account address to cross account address\"},\"uniqueCollectionType()\":{\"notice\":\"Returns collection type\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/UniqueNFT.sol\":\"UniqueNFT\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/UniqueNFT.sol\":{\"keccak256\":\"0xc148492110ebeaac4699ffeac8dd74d1629204d70948653256ded15c2b1f5d06\",\"license\":\"OTHER\",\"urls\":[\"bzz-raw://dc6f720c79f4c8807e4043592ebaa23566e400d79d312bf5afa4e6a4cae8ff82\",\"dweb:/ipfs/QmNkDq6rVBiDEw5NpP3JfjheUqEY6QAy9Vc7emGsnvr8X8\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {
							"addCollectionAdminCross((address,uint256))": {
								"notice": "Add collection admin."
							},
							"addToCollectionAllowListCross((address,uint256))": {
								"notice": "Add user to allowed list."
							},
							"allowlistedCross((address,uint256))": {
								"notice": "Checks that user allowed to operate with collection."
							},
							"approve(address,uint256)": {
								"notice": "Set or reaffirm the approved address for an NFT"
							},
							"approveCross((address,uint256),uint256)": {
								"notice": "Set or reaffirm the approved address for an NFT"
							},
							"balanceOf(address)": {
								"notice": "Count all NFTs assigned to an owner"
							},
							"burn(uint256)": {
								"notice": "Burns a specific ERC721 token."
							},
							"burnFromCross((address,uint256),uint256)": {
								"notice": "Burns a specific ERC721 token."
							},
							"changeCollectionOwnerCross((address,uint256))": {
								"notice": "Changes collection owner to another account"
							},
							"collectionAdmins()": {
								"notice": "Get collection administrators"
							},
							"collectionHelperAddress()": {
								"notice": "Returns collection helper contract address"
							},
							"collectionLimits()": {
								"notice": "Get current collection limits."
							},
							"collectionNestingPermissions()": {
								"notice": "Returns permissions for a collection"
							},
							"collectionNestingRestrictedCollectionIds()": {
								"notice": "Returns nesting for a collection"
							},
							"collectionOwner()": {
								"notice": "Get collection owner."
							},
							"collectionProperties(string[])": {
								"notice": "Get collection properties."
							},
							"collectionProperty(string)": {
								"notice": "Get collection property."
							},
							"collectionSponsor()": {
								"notice": "Get current sponsor."
							},
							"confirmCollectionSponsorship()": {
								"notice": "Collection sponsorship confirmation."
							},
							"contractAddress()": {
								"notice": "Get contract address."
							},
							"crossOwnerOf(uint256)": {
								"notice": "Returns the owner (in cross format) of the token."
							},
							"deleteCollectionProperties(string[])": {
								"notice": "Delete collection properties."
							},
							"deleteProperties(uint256,string[])": {
								"notice": "Delete token properties value."
							},
							"description()": {
								"notice": "A description for the collection."
							},
							"getApproved(uint256)": {
								"notice": "Get the approved address for a single NFT"
							},
							"hasCollectionPendingSponsor()": {
								"notice": "Whether there is a pending sponsor."
							},
							"isApprovedForAll(address,address)": {
								"notice": "Tells whether the given `owner` approves the `operator`."
							},
							"isOwnerOrAdminCross((address,uint256))": {
								"notice": "Check that account is the owner or admin of the collection"
							},
							"mint(address)": {
								"notice": "Function to mint a token."
							},
							"mintCross((address,uint256),(string,bytes)[])": {
								"notice": "Function to mint a token."
							},
							"mintWithTokenURI(address,string)": {
								"notice": "Function to mint token with the given tokenUri."
							},
							"name()": {
								"notice": "A descriptive name for a collection of NFTs in this contract"
							},
							"nextTokenId()": {
								"notice": "Returns next free NFT ID."
							},
							"ownerOf(uint256)": {
								"notice": "Find the owner of an NFT"
							},
							"properties(uint256,string[])": {
								"notice": "Returns the token properties."
							},
							"property(uint256,string)": {
								"notice": "Get token property value."
							},
							"removeCollectionAdminCross((address,uint256))": {
								"notice": "Remove collection admin."
							},
							"removeCollectionSponsor()": {
								"notice": "Remove collection sponsor."
							},
							"removeFromCollectionAllowListCross((address,uint256))": {
								"notice": "Remove user from allowed list."
							},
							"setApprovalForAll(address,bool)": {
								"notice": "Sets or unsets the approval of a given operator. The `operator` is allowed to transfer all tokens of the `caller` on their behalf."
							},
							"setCollectionAccess(uint8)": {
								"notice": "Set the collection access method."
							},
							"setCollectionLimit((uint8,(bool,uint256)))": {
								"notice": "Set limits for the collection."
							},
							"setCollectionMintMode(bool)": {
								"notice": "Switch permission for minting."
							},
							"setCollectionNesting(bool)": {
								"notice": "Toggle accessibility of collection nesting."
							},
							"setCollectionNesting(bool,address[])": {
								"notice": "Toggle accessibility of collection nesting."
							},
							"setCollectionProperties((string,bytes)[])": {
								"notice": "Set collection properties."
							},
							"setCollectionSponsorCross((address,uint256))": {
								"notice": "Set the sponsor of the collection."
							},
							"setProperties(uint256,(string,bytes)[])": {
								"notice": "Set token properties value."
							},
							"setTokenPropertyPermissions((string,(uint8,bool)[])[])": {
								"notice": "Set permissions for token property."
							},
							"symbol()": {
								"notice": "An abbreviated name for NFTs in this contract"
							},
							"tokenByIndex(uint256)": {
								"notice": "Enumerate valid NFTs"
							},
							"tokenPropertyPermissions()": {
								"notice": "Get permissions for token properties."
							},
							"tokenURI(uint256)": {
								"notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
							},
							"totalSupply()": {
								"notice": "Count NFTs tracked by this contract"
							},
							"transfer(address,uint256)": {
								"notice": "Transfer ownership of an NFT"
							},
							"transferCross((address,uint256),uint256)": {
								"notice": "Transfer ownership of an NFT"
							},
							"transferFrom(address,address,uint256)": {
								"notice": "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"
							},
							"transferFromCross((address,uint256),(address,uint256),uint256)": {
								"notice": "Transfer ownership of an NFT from cross account address to cross account address"
							},
							"uniqueCollectionType()": {
								"notice": "Returns collection type"
							}
						},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"contracts/UniqueNFT.sol": {
				"ast": {
					"absolutePath": "contracts/UniqueNFT.sol",
					"exportedSymbols": {
						"AccessMode": [
							318
						],
						"Collection": [
							308
						],
						"CollectionLimit": [
							344
						],
						"CollectionLimitField": [
							363
						],
						"CollectionNesting": [
							336
						],
						"CollectionNestingPermission": [
							325
						],
						"CollectionPermissionField": [
							329
						],
						"CrossAddress": [
							314
						],
						"Dummy": [
							3
						],
						"ERC165": [
							13
						],
						"ERC721": [
							685
						],
						"ERC721Burnable": [
							389
						],
						"ERC721Enumerable": [
							569
						],
						"ERC721Events": [
							595
						],
						"ERC721Metadata": [
							377
						],
						"ERC721TokenEvent": [
							19
						],
						"ERC721UniqueExtensions": [
							531
						],
						"ERC721UniqueMintable": [
							413
						],
						"OptionUint256": [
							352
						],
						"Property": [
							78
						],
						"PropertyPermission": [
							97
						],
						"TokenPermissionField": [
							102
						],
						"TokenProperties": [
							72
						],
						"TokenPropertyPermission": [
							88
						],
						"TokenUri": [
							539
						],
						"UniqueNFT": [
							706
						]
					},
					"id": 707,
					"license": "OTHER",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								">=",
								"0.8",
								".0",
								"<",
								"0.9",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "78:31:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Dummy",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "113:30:0",
								"text": "@dev common stubs holder"
							},
							"fullyImplemented": true,
							"id": 3,
							"linearizedBaseContracts": [
								3
							],
							"name": "Dummy",
							"nameLocation": "153:5:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 707,
							"src": "143:22:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "Dummy",
										"nameLocations": [
											"189:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3,
										"src": "189:5:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "189:5:0"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 13,
							"linearizedBaseContracts": [
								13,
								3
							],
							"name": "ERC165",
							"nameLocation": "179:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"functionSelector": "01ffc9a7",
									"id": 12,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "208:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 8,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 7,
												"mutability": "mutable",
												"name": "interfaceID",
												"nameLocation": "233:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "226:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 6,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "226:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "225:20:0"
									},
									"returnParameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "269:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 9,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "269:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "268:6:0"
									},
									"scope": 13,
									"src": "199:76:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 707,
							"src": "169:109:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ERC721TokenEvent",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 14,
								"nodeType": "StructuredDocumentation",
								"src": "282:28:0",
								"text": "@dev inlined interface"
							},
							"fullyImplemented": true,
							"id": 19,
							"linearizedBaseContracts": [
								19
							],
							"name": "ERC721TokenEvent",
							"nameLocation": "320:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "9fcaa81ccf2d7c6ac76e92f129d5682af735390f4f6e8c1ede84e4ca94c9a9e7",
									"id": 18,
									"name": "TokenChanged",
									"nameLocation": "347:12:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "376:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "360:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 15,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "360:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "359:25:0"
									},
									"src": "341:44:0"
								}
							],
							"scope": 707,
							"src": "310:78:0",
							"usedErrors": [],
							"usedEvents": [
								18
							]
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 21,
										"name": "Dummy",
										"nameLocations": [
											"596:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3,
										"src": "596:5:0"
									},
									"id": 22,
									"nodeType": "InheritanceSpecifier",
									"src": "596:5:0"
								},
								{
									"baseName": {
										"id": 23,
										"name": "ERC165",
										"nameLocations": [
											"603:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 13,
										"src": "603:6:0"
									},
									"id": 24,
									"nodeType": "InheritanceSpecifier",
									"src": "603:6:0"
								},
								{
									"baseName": {
										"id": 25,
										"name": "ERC721TokenEvent",
										"nameLocations": [
											"611:16:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 19,
										"src": "611:16:0"
									},
									"id": 26,
									"nodeType": "InheritanceSpecifier",
									"src": "611:16:0"
								}
							],
							"canonicalName": "TokenProperties",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 20,
								"nodeType": "StructuredDocumentation",
								"src": "392:175:0",
								"text": "@title A contract that allows to set and delete token properties and change token property permissions.\n @dev the ERC-165 identifier for this interface is 0xde0695c2"
							},
							"fullyImplemented": false,
							"id": 72,
							"linearizedBaseContracts": [
								72,
								19,
								13,
								3
							],
							"name": "TokenProperties",
							"nameLocation": "577:15:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 27,
										"nodeType": "StructuredDocumentation",
										"src": "1330:315:0",
										"text": "@notice Set permissions for token property.\n @dev Throws error if `msg.sender` is not admin or owner of the collection.\n @param permissions Permissions for keys.\n @dev EVM selector for this function is: 0xbd92983a,\n  or in textual repr: setTokenPropertyPermissions((string,(uint8,bool)[])[])"
									},
									"functionSelector": "bd92983a",
									"id": 34,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setTokenPropertyPermissions",
									"nameLocation": "1657:27:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 32,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 31,
												"mutability": "mutable",
												"name": "permissions",
												"nameLocation": "1718:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 34,
												"src": "1685:44:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_TokenPropertyPermission_$88_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct TokenPropertyPermission[]"
												},
												"typeName": {
													"baseType": {
														"id": 29,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 28,
															"name": "TokenPropertyPermission",
															"nameLocations": [
																"1685:23:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 88,
															"src": "1685:23:0"
														},
														"referencedDeclaration": 88,
														"src": "1685:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenPropertyPermission_$88_storage_ptr",
															"typeString": "struct TokenPropertyPermission"
														}
													},
													"id": 30,
													"nodeType": "ArrayTypeName",
													"src": "1685:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_TokenPropertyPermission_$88_storage_$dyn_storage_ptr",
														"typeString": "struct TokenPropertyPermission[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1684:46:0"
									},
									"returnParameters": {
										"id": 33,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1739:0:0"
									},
									"scope": 72,
									"src": "1648:92:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 35,
										"nodeType": "StructuredDocumentation",
										"src": "1745:161:0",
										"text": "@notice Get permissions for token properties.\n @dev EVM selector for this function is: 0xf23d7790,\n  or in textual repr: tokenPropertyPermissions()"
									},
									"functionSelector": "f23d7790",
									"id": 42,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenPropertyPermissions",
									"nameLocation": "1918:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 36,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1942:2:0"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "1968:32:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_TokenPropertyPermission_$88_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct TokenPropertyPermission[]"
												},
												"typeName": {
													"baseType": {
														"id": 38,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 37,
															"name": "TokenPropertyPermission",
															"nameLocations": [
																"1968:23:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 88,
															"src": "1968:23:0"
														},
														"referencedDeclaration": 88,
														"src": "1968:23:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_TokenPropertyPermission_$88_storage_ptr",
															"typeString": "struct TokenPropertyPermission"
														}
													},
													"id": 39,
													"nodeType": "ArrayTypeName",
													"src": "1968:25:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_TokenPropertyPermission_$88_storage_$dyn_storage_ptr",
														"typeString": "struct TokenPropertyPermission[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1967:34:0"
									},
									"scope": 72,
									"src": "1909:93:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "2465:326:0",
										"text": "@notice Set token properties value.\n @dev Throws error if `msg.sender` has no permission to edit the property.\n @param tokenId ID of the token.\n @param properties settable properties\n @dev EVM selector for this function is: 0x14ed3a6e,\n  or in textual repr: setProperties(uint256,(string,bytes)[])"
									},
									"functionSelector": "14ed3a6e",
									"id": 52,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setProperties",
									"nameLocation": "2803:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2825:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2817:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 44,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2817:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "properties",
												"nameLocation": "2852:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 52,
												"src": "2834:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Property_$78_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct Property[]"
												},
												"typeName": {
													"baseType": {
														"id": 47,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 46,
															"name": "Property",
															"nameLocations": [
																"2834:8:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 78,
															"src": "2834:8:0"
														},
														"referencedDeclaration": 78,
														"src": "2834:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Property_$78_storage_ptr",
															"typeString": "struct Property"
														}
													},
													"id": 48,
													"nodeType": "ArrayTypeName",
													"src": "2834:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Property_$78_storage_$dyn_storage_ptr",
														"typeString": "struct Property[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2816:47:0"
									},
									"returnParameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2872:0:0"
									},
									"scope": 72,
									"src": "2794:79:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 53,
										"nodeType": "StructuredDocumentation",
										"src": "3281:314:0",
										"text": "@notice Delete token properties value.\n @dev Throws error if `msg.sender` has no permission to edit the property.\n @param tokenId ID of the token.\n @param keys Properties key.\n @dev EVM selector for this function is: 0xc472d371,\n  or in textual repr: deleteProperties(uint256,string[])"
									},
									"functionSelector": "c472d371",
									"id": 61,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteProperties",
									"nameLocation": "3607:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 59,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 55,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3632:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3624:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 54,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3624:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "keys",
												"nameLocation": "3657:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 61,
												"src": "3641:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
													"typeString": "string[]"
												},
												"typeName": {
													"baseType": {
														"id": 56,
														"name": "string",
														"nodeType": "ElementaryTypeName",
														"src": "3641:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage_ptr",
															"typeString": "string"
														}
													},
													"id": 57,
													"nodeType": "ArrayTypeName",
													"src": "3641:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
														"typeString": "string[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3623:39:0"
									},
									"returnParameters": {
										"id": 60,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3671:0:0"
									},
									"scope": 72,
									"src": "3598:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 62,
										"nodeType": "StructuredDocumentation",
										"src": "3677:292:0",
										"text": "@notice Get token property value.\n @dev Throws error if key not found\n @param tokenId ID of the token.\n @param key Property key.\n @return Property value bytes\n @dev EVM selector for this function is: 0x7228c327,\n  or in textual repr: property(uint256,string)"
									},
									"functionSelector": "7228c327",
									"id": 71,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "property",
									"nameLocation": "3981:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 67,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3998:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "3990:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 63,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3990:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 66,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "4021:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "4007:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 65,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4007:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3989:36:0"
									},
									"returnParameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 69,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 71,
												"src": "4049:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 68,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4049:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4048:14:0"
									},
									"scope": 72,
									"src": "3972:91:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 707,
							"src": "567:3499:0",
							"usedErrors": [],
							"usedEvents": [
								18
							]
						},
						{
							"canonicalName": "Property",
							"documentation": {
								"id": 73,
								"nodeType": "StructuredDocumentation",
								"src": "4070:144:0",
								"text": "Ethereum representation of collection [`PropertyKey`](up_data_structs::PropertyKey) and [`PropertyValue`](up_data_structs::PropertyValue)."
							},
							"id": 78,
							"members": [
								{
									"constant": false,
									"id": 75,
									"mutability": "mutable",
									"name": "key",
									"nameLocation": "4241:3:0",
									"nodeType": "VariableDeclaration",
									"scope": 78,
									"src": "4234:10:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 74,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "4234:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 77,
									"mutability": "mutable",
									"name": "value",
									"nameLocation": "4254:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 78,
									"src": "4248:11:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes_storage_ptr",
										"typeString": "bytes"
									},
									"typeName": {
										"id": 76,
										"name": "bytes",
										"nodeType": "ElementaryTypeName",
										"src": "4248:5:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes_storage_ptr",
											"typeString": "bytes"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "Property",
							"nameLocation": "4221:8:0",
							"nodeType": "StructDefinition",
							"scope": 707,
							"src": "4214:49:0",
							"visibility": "public"
						},
						{
							"canonicalName": "TokenPropertyPermission",
							"documentation": {
								"id": 79,
								"nodeType": "StructuredDocumentation",
								"src": "4267:60:0",
								"text": "Ethereum representation of Token Property Permissions."
							},
							"id": 88,
							"members": [
								{
									"constant": false,
									"id": 82,
									"mutability": "mutable",
									"name": "key",
									"nameLocation": "4395:3:0",
									"nodeType": "VariableDeclaration",
									"scope": 88,
									"src": "4388:10:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 81,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "4388:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 87,
									"mutability": "mutable",
									"name": "permissions",
									"nameLocation": "4457:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 88,
									"src": "4436:32:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_struct$_PropertyPermission_$97_storage_$dyn_storage_ptr",
										"typeString": "struct PropertyPermission[]"
									},
									"typeName": {
										"baseType": {
											"id": 85,
											"nodeType": "UserDefinedTypeName",
											"pathNode": {
												"id": 84,
												"name": "PropertyPermission",
												"nameLocations": [
													"4436:18:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 97,
												"src": "4436:18:0"
											},
											"referencedDeclaration": 97,
											"src": "4436:18:0",
											"typeDescriptions": {
												"typeIdentifier": "t_struct$_PropertyPermission_$97_storage_ptr",
												"typeString": "struct PropertyPermission"
											}
										},
										"id": 86,
										"nodeType": "ArrayTypeName",
										"src": "4436:20:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_struct$_PropertyPermission_$97_storage_$dyn_storage_ptr",
											"typeString": "struct PropertyPermission[]"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "TokenPropertyPermission",
							"nameLocation": "4334:23:0",
							"nodeType": "StructDefinition",
							"scope": 707,
							"src": "4327:145:0",
							"visibility": "public"
						},
						{
							"canonicalName": "PropertyPermission",
							"documentation": {
								"id": 89,
								"nodeType": "StructuredDocumentation",
								"src": "4476:116:0",
								"text": "Ethereum representation of TokenPermissions (see [`up_data_structs::PropertyPermission`]) as an key and value."
							},
							"id": 97,
							"members": [
								{
									"constant": false,
									"id": 93,
									"mutability": "mutable",
									"name": "code",
									"nameLocation": "4672:4:0",
									"nodeType": "VariableDeclaration",
									"scope": 97,
									"src": "4651:25:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_enum$_TokenPermissionField_$102",
										"typeString": "enum TokenPermissionField"
									},
									"typeName": {
										"id": 92,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 91,
											"name": "TokenPermissionField",
											"nameLocations": [
												"4651:20:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 102,
											"src": "4651:20:0"
										},
										"referencedDeclaration": 102,
										"src": "4651:20:0",
										"typeDescriptions": {
											"typeIdentifier": "t_enum$_TokenPermissionField_$102",
											"typeString": "enum TokenPermissionField"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 96,
									"mutability": "mutable",
									"name": "value",
									"nameLocation": "4714:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 97,
									"src": "4709:10:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 95,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "4709:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "PropertyPermission",
							"nameLocation": "4599:18:0",
							"nodeType": "StructDefinition",
							"scope": 707,
							"src": "4592:131:0",
							"visibility": "public"
						},
						{
							"canonicalName": "TokenPermissionField",
							"documentation": {
								"id": 98,
								"nodeType": "StructuredDocumentation",
								"src": "4727:121:0",
								"text": "Ethereum representation of TokenPermissions (see [`up_data_structs::PropertyPermission`]) fields as an enumeration."
							},
							"id": 102,
							"members": [
								{
									"id": 99,
									"name": "Mutable",
									"nameLocation": "4996:7:0",
									"nodeType": "EnumValue",
									"src": "4996:7:0"
								},
								{
									"id": 100,
									"name": "TokenOwner",
									"nameLocation": "5122:10:0",
									"nodeType": "EnumValue",
									"src": "5122:10:0"
								},
								{
									"id": 101,
									"name": "CollectionAdmin",
									"nameLocation": "5266:15:0",
									"nodeType": "EnumValue",
									"src": "5266:15:0"
								}
							],
							"name": "TokenPermissionField",
							"nameLocation": "4853:20:0",
							"nodeType": "EnumDefinition",
							"src": "4848:436:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 104,
										"name": "Dummy",
										"nameLocations": [
											"5443:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3,
										"src": "5443:5:0"
									},
									"id": 105,
									"nodeType": "InheritanceSpecifier",
									"src": "5443:5:0"
								},
								{
									"baseName": {
										"id": 106,
										"name": "ERC165",
										"nameLocations": [
											"5450:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 13,
										"src": "5450:6:0"
									},
									"id": 107,
									"nodeType": "InheritanceSpecifier",
									"src": "5450:6:0"
								}
							],
							"canonicalName": "Collection",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 103,
								"nodeType": "StructuredDocumentation",
								"src": "5288:131:0",
								"text": "@title A contract that allows you to work with collections.\n @dev the ERC-165 identifier for this interface is 0x2a14cfd1"
							},
							"fullyImplemented": false,
							"id": 308,
							"linearizedBaseContracts": [
								308,
								13,
								3
							],
							"name": "Collection",
							"nameLocation": "5429:10:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 108,
										"nodeType": "StructuredDocumentation",
										"src": "5789:224:0",
										"text": "Set collection properties.\n @param properties Vector of properties key/value pair.\n @dev EVM selector for this function is: 0x50b26b2a,\n  or in textual repr: setCollectionProperties((string,bytes)[])"
									},
									"functionSelector": "50b26b2a",
									"id": 115,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCollectionProperties",
									"nameLocation": "6025:23:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 113,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 112,
												"mutability": "mutable",
												"name": "properties",
												"nameLocation": "6067:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 115,
												"src": "6049:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Property_$78_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct Property[]"
												},
												"typeName": {
													"baseType": {
														"id": 110,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 109,
															"name": "Property",
															"nameLocations": [
																"6049:8:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 78,
															"src": "6049:8:0"
														},
														"referencedDeclaration": 78,
														"src": "6049:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Property_$78_storage_ptr",
															"typeString": "struct Property"
														}
													},
													"id": 111,
													"nodeType": "ArrayTypeName",
													"src": "6049:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Property_$78_storage_$dyn_storage_ptr",
														"typeString": "struct Property[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6048:30:0"
									},
									"returnParameters": {
										"id": 114,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6087:0:0"
									},
									"scope": 308,
									"src": "6016:72:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 116,
										"nodeType": "StructuredDocumentation",
										"src": "6367:196:0",
										"text": "Delete collection properties.\n @param keys Properties keys.\n @dev EVM selector for this function is: 0xee206ee3,\n  or in textual repr: deleteCollectionProperties(string[])"
									},
									"functionSelector": "ee206ee3",
									"id": 122,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "deleteCollectionProperties",
									"nameLocation": "6575:26:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "keys",
												"nameLocation": "6618:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 122,
												"src": "6602:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
													"typeString": "string[]"
												},
												"typeName": {
													"baseType": {
														"id": 117,
														"name": "string",
														"nodeType": "ElementaryTypeName",
														"src": "6602:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage_ptr",
															"typeString": "string"
														}
													},
													"id": 118,
													"nodeType": "ArrayTypeName",
													"src": "6602:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
														"typeString": "string[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6601:22:0"
									},
									"returnParameters": {
										"id": 121,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6632:0:0"
									},
									"scope": 308,
									"src": "6566:67:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 123,
										"nodeType": "StructuredDocumentation",
										"src": "6638:284:0",
										"text": "Get collection property.\n @dev Throws error if key not found.\n @param key Property key.\n @return bytes The property corresponding to the key.\n @dev EVM selector for this function is: 0xcf24fd6d,\n  or in textual repr: collectionProperty(string)"
									},
									"functionSelector": "cf24fd6d",
									"id": 130,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectionProperty",
									"nameLocation": "6934:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 126,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 125,
												"mutability": "mutable",
												"name": "key",
												"nameLocation": "6967:3:0",
												"nodeType": "VariableDeclaration",
												"scope": 130,
												"src": "6953:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 124,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6953:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6952:19:0"
									},
									"returnParameters": {
										"id": 129,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 128,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 130,
												"src": "6995:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 127,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6995:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6994:14:0"
									},
									"scope": 308,
									"src": "6925:84:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 131,
										"nodeType": "StructuredDocumentation",
										"src": "7014:270:0",
										"text": "Get collection properties.\n @param keys Properties keys. Empty keys for all propertyes.\n @return Vector of properties key/value pairs.\n @dev EVM selector for this function is: 0x285fb8e6,\n  or in textual repr: collectionProperties(string[])"
									},
									"functionSelector": "285fb8e6",
									"id": 141,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectionProperties",
									"nameLocation": "7296:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "keys",
												"nameLocation": "7333:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "7317:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
													"typeString": "string[]"
												},
												"typeName": {
													"baseType": {
														"id": 132,
														"name": "string",
														"nodeType": "ElementaryTypeName",
														"src": "7317:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage_ptr",
															"typeString": "string"
														}
													},
													"id": 133,
													"nodeType": "ArrayTypeName",
													"src": "7317:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
														"typeString": "string[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7316:22:0"
									},
									"returnParameters": {
										"id": 140,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 139,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 141,
												"src": "7362:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Property_$78_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct Property[]"
												},
												"typeName": {
													"baseType": {
														"id": 137,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 136,
															"name": "Property",
															"nameLocations": [
																"7362:8:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 78,
															"src": "7362:8:0"
														},
														"referencedDeclaration": 78,
														"src": "7362:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Property_$78_storage_ptr",
															"typeString": "struct Property"
														}
													},
													"id": 138,
													"nodeType": "ArrayTypeName",
													"src": "7362:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Property_$78_storage_$dyn_storage_ptr",
														"typeString": "struct Property[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7361:19:0"
									},
									"scope": 308,
									"src": "7287:94:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "7850:405:0",
										"text": "Set the sponsor of the collection.\n @dev In order for sponsorship to work, it must be confirmed on behalf of the sponsor.\n @param sponsor Cross account address of the sponsor from whose account funds will be debited for operations with the contract.\n @dev EVM selector for this function is: 0x84a1d5a8,\n  or in textual repr: setCollectionSponsorCross((address,uint256))"
									},
									"functionSelector": "84a1d5a8",
									"id": 148,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCollectionSponsorCross",
									"nameLocation": "8267:25:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 146,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 145,
												"mutability": "mutable",
												"name": "sponsor",
												"nameLocation": "8313:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 148,
												"src": "8293:27:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 144,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 143,
														"name": "CrossAddress",
														"nameLocations": [
															"8293:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "8293:12:0"
													},
													"referencedDeclaration": 314,
													"src": "8293:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8292:29:0"
									},
									"returnParameters": {
										"id": 147,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8330:0:0"
									},
									"scope": 308,
									"src": "8258:73:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 149,
										"nodeType": "StructuredDocumentation",
										"src": "8336:154:0",
										"text": "Whether there is a pending sponsor.\n @dev EVM selector for this function is: 0x058ac185,\n  or in textual repr: hasCollectionPendingSponsor()"
									},
									"functionSelector": "058ac185",
									"id": 154,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "hasCollectionPendingSponsor",
									"nameLocation": "8502:27:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 150,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8529:2:0"
									},
									"returnParameters": {
										"id": 153,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 152,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 154,
												"src": "8555:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 151,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8555:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8554:6:0"
									},
									"scope": 308,
									"src": "8493:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 155,
										"nodeType": "StructuredDocumentation",
										"src": "8566:260:0",
										"text": "Collection sponsorship confirmation.\n @dev After setting the sponsor for the collection, it must be confirmed with this function.\n @dev EVM selector for this function is: 0x3c50e97a,\n  or in textual repr: confirmCollectionSponsorship()"
									},
									"functionSelector": "3c50e97a",
									"id": 158,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "confirmCollectionSponsorship",
									"nameLocation": "8838:28:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 156,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8866:2:0"
									},
									"returnParameters": {
										"id": 157,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8877:0:0"
									},
									"scope": 308,
									"src": "8829:49:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 159,
										"nodeType": "StructuredDocumentation",
										"src": "8883:141:0",
										"text": "Remove collection sponsor.\n @dev EVM selector for this function is: 0x6e0326a3,\n  or in textual repr: removeCollectionSponsor()"
									},
									"functionSelector": "6e0326a3",
									"id": 162,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeCollectionSponsor",
									"nameLocation": "9036:23:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 160,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9059:2:0"
									},
									"returnParameters": {
										"id": 161,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9070:0:0"
									},
									"scope": 308,
									"src": "9027:44:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 163,
										"nodeType": "StructuredDocumentation",
										"src": "9076:274:0",
										"text": "Get current sponsor.\n @return Tuble with sponsor address and his substrate mirror. If there is no confirmed sponsor error \"Contract has no sponsor\" throw.\n @dev EVM selector for this function is: 0x6ec0a9f1,\n  or in textual repr: collectionSponsor()"
									},
									"functionSelector": "6ec0a9f1",
									"id": 169,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectionSponsor",
									"nameLocation": "9362:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9379:2:0"
									},
									"returnParameters": {
										"id": 168,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 167,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 169,
												"src": "9405:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 166,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 165,
														"name": "CrossAddress",
														"nameLocations": [
															"9405:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "9405:12:0"
													},
													"referencedDeclaration": 314,
													"src": "9405:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9404:21:0"
									},
									"scope": 308,
									"src": "9353:73:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 170,
										"nodeType": "StructuredDocumentation",
										"src": "9431:185:0",
										"text": "Get current collection limits.\n @return Array of collection limits\n @dev EVM selector for this function is: 0xf63bc572,\n  or in textual repr: collectionLimits()"
									},
									"functionSelector": "f63bc572",
									"id": 177,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectionLimits",
									"nameLocation": "9628:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9644:2:0"
									},
									"returnParameters": {
										"id": 176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 175,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 177,
												"src": "9670:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_CollectionLimit_$344_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct CollectionLimit[]"
												},
												"typeName": {
													"baseType": {
														"id": 173,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 172,
															"name": "CollectionLimit",
															"nameLocations": [
																"9670:15:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 344,
															"src": "9670:15:0"
														},
														"referencedDeclaration": 344,
														"src": "9670:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_CollectionLimit_$344_storage_ptr",
															"typeString": "struct CollectionLimit"
														}
													},
													"id": 174,
													"nodeType": "ArrayTypeName",
													"src": "9670:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_CollectionLimit_$344_storage_$dyn_storage_ptr",
														"typeString": "struct CollectionLimit[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9669:26:0"
									},
									"scope": 308,
									"src": "9619:77:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 178,
										"nodeType": "StructuredDocumentation",
										"src": "9701:237:0",
										"text": "Set limits for the collection.\n @dev Throws error if limit not found.\n @param limit Some limit.\n @dev EVM selector for this function is: 0x2316ee74,\n  or in textual repr: setCollectionLimit((uint8,(bool,uint256)))"
									},
									"functionSelector": "2316ee74",
									"id": 184,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCollectionLimit",
									"nameLocation": "9950:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "limit",
												"nameLocation": "9992:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 184,
												"src": "9969:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectionLimit_$344_memory_ptr",
													"typeString": "struct CollectionLimit"
												},
												"typeName": {
													"id": 180,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 179,
														"name": "CollectionLimit",
														"nameLocations": [
															"9969:15:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 344,
														"src": "9969:15:0"
													},
													"referencedDeclaration": 344,
													"src": "9969:15:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectionLimit_$344_storage_ptr",
														"typeString": "struct CollectionLimit"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9968:30:0"
									},
									"returnParameters": {
										"id": 183,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10007:0:0"
									},
									"scope": 308,
									"src": "9941:67:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 185,
										"nodeType": "StructuredDocumentation",
										"src": "10013:128:0",
										"text": "Get contract address.\n @dev EVM selector for this function is: 0xf6b4dfb4,\n  or in textual repr: contractAddress()"
									},
									"functionSelector": "f6b4dfb4",
									"id": 190,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "contractAddress",
									"nameLocation": "10153:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 186,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10168:2:0"
									},
									"returnParameters": {
										"id": 189,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 188,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 190,
												"src": "10194:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 187,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10194:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10193:9:0"
									},
									"scope": 308,
									"src": "10144:59:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 191,
										"nodeType": "StructuredDocumentation",
										"src": "10208:212:0",
										"text": "Add collection admin.\n @param newAdmin Cross account administrator address.\n @dev EVM selector for this function is: 0x859aa7d6,\n  or in textual repr: addCollectionAdminCross((address,uint256))"
									},
									"functionSelector": "859aa7d6",
									"id": 197,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addCollectionAdminCross",
									"nameLocation": "10432:23:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 195,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 194,
												"mutability": "mutable",
												"name": "newAdmin",
												"nameLocation": "10476:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 197,
												"src": "10456:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 193,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 192,
														"name": "CrossAddress",
														"nameLocations": [
															"10456:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "10456:12:0"
													},
													"referencedDeclaration": 314,
													"src": "10456:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10455:30:0"
									},
									"returnParameters": {
										"id": 196,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10494:0:0"
									},
									"scope": 308,
									"src": "10423:72:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 198,
										"nodeType": "StructuredDocumentation",
										"src": "10500:215:0",
										"text": "Remove collection admin.\n @param admin Cross account administrator address.\n @dev EVM selector for this function is: 0x6c0cd173,\n  or in textual repr: removeCollectionAdminCross((address,uint256))"
									},
									"functionSelector": "6c0cd173",
									"id": 204,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeCollectionAdminCross",
									"nameLocation": "10727:26:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 201,
												"mutability": "mutable",
												"name": "admin",
												"nameLocation": "10774:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 204,
												"src": "10754:25:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 200,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 199,
														"name": "CrossAddress",
														"nameLocations": [
															"10754:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "10754:12:0"
													},
													"referencedDeclaration": 314,
													"src": "10754:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10753:27:0"
									},
									"returnParameters": {
										"id": 203,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10789:0:0"
									},
									"scope": 308,
									"src": "10718:72:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 205,
										"nodeType": "StructuredDocumentation",
										"src": "11357:255:0",
										"text": "Toggle accessibility of collection nesting.\n @param enable If \"true\" degenerates to nesting: 'Owner' else to nesting: 'Disabled'\n @dev EVM selector for this function is: 0x112d4586,\n  or in textual repr: setCollectionNesting(bool)"
									},
									"functionSelector": "112d4586",
									"id": 210,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCollectionNesting",
									"nameLocation": "11624:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 208,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 207,
												"mutability": "mutable",
												"name": "enable",
												"nameLocation": "11650:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 210,
												"src": "11645:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 206,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11645:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11644:13:0"
									},
									"returnParameters": {
										"id": 209,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11666:0:0"
									},
									"scope": 308,
									"src": "11615:52:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 211,
										"nodeType": "StructuredDocumentation",
										"src": "11672:372:0",
										"text": "Toggle accessibility of collection nesting.\n @param enable If \"true\" degenerates to nesting: {OwnerRestricted: [1, 2, 3]} else to nesting: 'Disabled'\n @param collections Addresses of collections that will be available for nesting.\n @dev EVM selector for this function is: 0x64872396,\n  or in textual repr: setCollectionNesting(bool,address[])"
									},
									"functionSelector": "64872396",
									"id": 219,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCollectionNesting",
									"nameLocation": "12056:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 213,
												"mutability": "mutable",
												"name": "enable",
												"nameLocation": "12082:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "12077:11:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 212,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12077:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "collections",
												"nameLocation": "12107:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 219,
												"src": "12090:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 214,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "12090:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 215,
													"nodeType": "ArrayTypeName",
													"src": "12090:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12076:43:0"
									},
									"returnParameters": {
										"id": 218,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12128:0:0"
									},
									"scope": 308,
									"src": "12047:82:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 220,
										"nodeType": "StructuredDocumentation",
										"src": "12134:164:0",
										"text": "Returns nesting for a collection\n @dev EVM selector for this function is: 0x22d25bfe,\n  or in textual repr: collectionNestingRestrictedCollectionIds()"
									},
									"functionSelector": "22d25bfe",
									"id": 226,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectionNestingRestrictedCollectionIds",
									"nameLocation": "12310:40:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 221,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12350:2:0"
									},
									"returnParameters": {
										"id": 225,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 224,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 226,
												"src": "12376:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CollectionNesting_$336_memory_ptr",
													"typeString": "struct CollectionNesting"
												},
												"typeName": {
													"id": 223,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 222,
														"name": "CollectionNesting",
														"nameLocations": [
															"12376:17:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 336,
														"src": "12376:17:0"
													},
													"referencedDeclaration": 336,
													"src": "12376:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CollectionNesting_$336_storage_ptr",
														"typeString": "struct CollectionNesting"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12375:26:0"
									},
									"scope": 308,
									"src": "12301:101:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "12407:156:0",
										"text": "Returns permissions for a collection\n @dev EVM selector for this function is: 0x5b2eaf4b,\n  or in textual repr: collectionNestingPermissions()"
									},
									"functionSelector": "5b2eaf4b",
									"id": 234,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectionNestingPermissions",
									"nameLocation": "12575:28:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12603:2:0"
									},
									"returnParameters": {
										"id": 233,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 232,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 234,
												"src": "12629:36:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_CollectionNestingPermission_$325_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct CollectionNestingPermission[]"
												},
												"typeName": {
													"baseType": {
														"id": 230,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 229,
															"name": "CollectionNestingPermission",
															"nameLocations": [
																"12629:27:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 325,
															"src": "12629:27:0"
														},
														"referencedDeclaration": 325,
														"src": "12629:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_CollectionNestingPermission_$325_storage_ptr",
															"typeString": "struct CollectionNestingPermission"
														}
													},
													"id": 231,
													"nodeType": "ArrayTypeName",
													"src": "12629:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_CollectionNestingPermission_$325_storage_$dyn_storage_ptr",
														"typeString": "struct CollectionNestingPermission[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12628:38:0"
									},
									"scope": 308,
									"src": "12566:101:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 235,
										"nodeType": "StructuredDocumentation",
										"src": "12672:179:0",
										"text": "Set the collection access method.\n @param mode Access mode\n @dev EVM selector for this function is: 0x41835d4c,\n  or in textual repr: setCollectionAccess(uint8)"
									},
									"functionSelector": "41835d4c",
									"id": 241,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCollectionAccess",
									"nameLocation": "12863:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 239,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 238,
												"mutability": "mutable",
												"name": "mode",
												"nameLocation": "12894:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 241,
												"src": "12883:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_AccessMode_$318",
													"typeString": "enum AccessMode"
												},
												"typeName": {
													"id": 237,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 236,
														"name": "AccessMode",
														"nameLocations": [
															"12883:10:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 318,
														"src": "12883:10:0"
													},
													"referencedDeclaration": 318,
													"src": "12883:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_AccessMode_$318",
														"typeString": "enum AccessMode"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12882:17:0"
									},
									"returnParameters": {
										"id": 240,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12908:0:0"
									},
									"scope": 308,
									"src": "12854:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 242,
										"nodeType": "StructuredDocumentation",
										"src": "12914:224:0",
										"text": "Checks that user allowed to operate with collection.\n @param user User address to check.\n @dev EVM selector for this function is: 0x91b6df49,\n  or in textual repr: allowlistedCross((address,uint256))"
									},
									"functionSelector": "91b6df49",
									"id": 250,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowlistedCross",
									"nameLocation": "13150:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 246,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 245,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "13187:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "13167:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 244,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 243,
														"name": "CrossAddress",
														"nameLocations": [
															"13167:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "13167:12:0"
													},
													"referencedDeclaration": 314,
													"src": "13167:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13166:26:0"
									},
									"returnParameters": {
										"id": 249,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 248,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 250,
												"src": "13216:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 247,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "13216:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13215:6:0"
									},
									"scope": 308,
									"src": "13141:81:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 251,
										"nodeType": "StructuredDocumentation",
										"src": "13517:215:0",
										"text": "Add user to allowed list.\n @param user User cross account address.\n @dev EVM selector for this function is: 0xa0184a3a,\n  or in textual repr: addToCollectionAllowListCross((address,uint256))"
									},
									"functionSelector": "a0184a3a",
									"id": 257,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addToCollectionAllowListCross",
									"nameLocation": "13744:29:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 255,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 254,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "13794:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 257,
												"src": "13774:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 253,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 252,
														"name": "CrossAddress",
														"nameLocations": [
															"13774:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "13774:12:0"
													},
													"referencedDeclaration": 314,
													"src": "13774:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13773:26:0"
									},
									"returnParameters": {
										"id": 256,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13808:0:0"
									},
									"scope": 308,
									"src": "13735:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 258,
										"nodeType": "StructuredDocumentation",
										"src": "14119:225:0",
										"text": "Remove user from allowed list.\n @param user User cross account address.\n @dev EVM selector for this function is: 0x09ba452a,\n  or in textual repr: removeFromCollectionAllowListCross((address,uint256))"
									},
									"functionSelector": "09ba452a",
									"id": 264,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeFromCollectionAllowListCross",
									"nameLocation": "14356:34:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 262,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "14411:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 264,
												"src": "14391:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 260,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 259,
														"name": "CrossAddress",
														"nameLocations": [
															"14391:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "14391:12:0"
													},
													"referencedDeclaration": 314,
													"src": "14391:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14390:26:0"
									},
									"returnParameters": {
										"id": 263,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14425:0:0"
									},
									"scope": 308,
									"src": "14347:79:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 265,
										"nodeType": "StructuredDocumentation",
										"src": "14431:189:0",
										"text": "Switch permission for minting.\n @param mode Enable if \"true\".\n @dev EVM selector for this function is: 0x00018e84,\n  or in textual repr: setCollectionMintMode(bool)"
									},
									"functionSelector": "00018e84",
									"id": 270,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setCollectionMintMode",
									"nameLocation": "14632:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 268,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "mode",
												"nameLocation": "14659:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 270,
												"src": "14654:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 266,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "14654:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14653:11:0"
									},
									"returnParameters": {
										"id": 269,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14673:0:0"
									},
									"scope": 308,
									"src": "14623:51:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 271,
										"nodeType": "StructuredDocumentation",
										"src": "15042:293:0",
										"text": "Check that account is the owner or admin of the collection\n @param user User cross account to verify\n @return \"true\" if account is the owner or admin\n @dev EVM selector for this function is: 0x3e75a905,\n  or in textual repr: isOwnerOrAdminCross((address,uint256))"
									},
									"functionSelector": "3e75a905",
									"id": 279,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isOwnerOrAdminCross",
									"nameLocation": "15347:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 275,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 274,
												"mutability": "mutable",
												"name": "user",
												"nameLocation": "15387:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "15367:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 273,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 272,
														"name": "CrossAddress",
														"nameLocations": [
															"15367:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "15367:12:0"
													},
													"referencedDeclaration": 314,
													"src": "15367:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15366:26:0"
									},
									"returnParameters": {
										"id": 278,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 277,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 279,
												"src": "15416:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 276,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15416:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15415:6:0"
									},
									"scope": 308,
									"src": "15338:84:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 280,
										"nodeType": "StructuredDocumentation",
										"src": "15427:191:0",
										"text": "Returns collection type\n @return `Fungible` or `NFT` or `ReFungible`\n @dev EVM selector for this function is: 0xd34b55b8,\n  or in textual repr: uniqueCollectionType()"
									},
									"functionSelector": "d34b55b8",
									"id": 285,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "uniqueCollectionType",
									"nameLocation": "15630:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 281,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15650:2:0"
									},
									"returnParameters": {
										"id": 284,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 283,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 285,
												"src": "15676:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 282,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "15676:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15675:15:0"
									},
									"scope": 308,
									"src": "15621:70:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 286,
										"nodeType": "StructuredDocumentation",
										"src": "15696:277:0",
										"text": "Get collection owner.\n @return Tuble with sponsor address and his substrate mirror.\n If address is canonical then substrate mirror is zero and vice versa.\n @dev EVM selector for this function is: 0xdf727d3b,\n  or in textual repr: collectionOwner()"
									},
									"functionSelector": "df727d3b",
									"id": 292,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectionOwner",
									"nameLocation": "15985:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 287,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16000:2:0"
									},
									"returnParameters": {
										"id": 291,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 290,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 292,
												"src": "16026:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 289,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 288,
														"name": "CrossAddress",
														"nameLocations": [
															"16026:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "16026:12:0"
													},
													"referencedDeclaration": 314,
													"src": "16026:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16025:21:0"
									},
									"scope": 308,
									"src": "15976:71:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 293,
										"nodeType": "StructuredDocumentation",
										"src": "16402:296:0",
										"text": "Get collection administrators\n @return Vector of tuples with admins address and his substrate mirror.\n If address is canonical then substrate mirror is zero and vice versa.\n @dev EVM selector for this function is: 0x5813216b,\n  or in textual repr: collectionAdmins()"
									},
									"functionSelector": "5813216b",
									"id": 300,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectionAdmins",
									"nameLocation": "16710:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16726:2:0"
									},
									"returnParameters": {
										"id": 299,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 298,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 300,
												"src": "16752:21:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_CrossAddress_$314_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct CrossAddress[]"
												},
												"typeName": {
													"baseType": {
														"id": 296,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 295,
															"name": "CrossAddress",
															"nameLocations": [
																"16752:12:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 314,
															"src": "16752:12:0"
														},
														"referencedDeclaration": 314,
														"src": "16752:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
															"typeString": "struct CrossAddress"
														}
													},
													"id": 297,
													"nodeType": "ArrayTypeName",
													"src": "16752:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_CrossAddress_$314_storage_$dyn_storage_ptr",
														"typeString": "struct CrossAddress[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16751:23:0"
									},
									"scope": 308,
									"src": "16701:74:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 301,
										"nodeType": "StructuredDocumentation",
										"src": "16780:284:0",
										"text": "Changes collection owner to another account\n @dev Owner can be changed only by current owner\n @param newOwner new owner cross account\n @dev EVM selector for this function is: 0x6496c497,\n  or in textual repr: changeCollectionOwnerCross((address,uint256))"
									},
									"functionSelector": "6496c497",
									"id": 307,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "changeCollectionOwnerCross",
									"nameLocation": "17076:26:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "17123:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 307,
												"src": "17103:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 303,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 302,
														"name": "CrossAddress",
														"nameLocations": [
															"17103:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "17103:12:0"
													},
													"referencedDeclaration": 314,
													"src": "17103:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17102:30:0"
									},
									"returnParameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17141:0:0"
									},
									"scope": 308,
									"src": "17067:75:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 707,
							"src": "5419:11726:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"canonicalName": "CrossAddress",
							"documentation": {
								"id": 309,
								"nodeType": "StructuredDocumentation",
								"src": "17149:26:0",
								"text": "Cross account struct"
							},
							"id": 314,
							"members": [
								{
									"constant": false,
									"id": 311,
									"mutability": "mutable",
									"name": "eth",
									"nameLocation": "17207:3:0",
									"nodeType": "VariableDeclaration",
									"scope": 314,
									"src": "17199:11:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 310,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "17199:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 313,
									"mutability": "mutable",
									"name": "sub",
									"nameLocation": "17222:3:0",
									"nodeType": "VariableDeclaration",
									"scope": 314,
									"src": "17214:11:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 312,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "17214:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "CrossAddress",
							"nameLocation": "17182:12:0",
							"nodeType": "StructDefinition",
							"scope": 707,
							"src": "17175:54:0",
							"visibility": "public"
						},
						{
							"canonicalName": "AccessMode",
							"documentation": {
								"id": 315,
								"nodeType": "StructuredDocumentation",
								"src": "17233:84:0",
								"text": "Ethereum representation of `AccessMode` (see [`up_data_structs::AccessMode`])."
							},
							"id": 318,
							"members": [
								{
									"id": 316,
									"name": "Normal",
									"nameLocation": "17395:6:0",
									"nodeType": "EnumValue",
									"src": "17395:6:0"
								},
								{
									"id": 317,
									"name": "AllowList",
									"nameLocation": "17479:9:0",
									"nodeType": "EnumValue",
									"src": "17479:9:0"
								}
							],
							"name": "AccessMode",
							"nameLocation": "17322:10:0",
							"nodeType": "EnumDefinition",
							"src": "17317:174:0"
						},
						{
							"canonicalName": "CollectionNestingPermission",
							"documentation": {
								"id": 319,
								"nodeType": "StructuredDocumentation",
								"src": "17495:106:0",
								"text": "Ethereum representation of `NestingPermissions` (see [`up_data_structs::NestingPermissions`]) field."
							},
							"id": 325,
							"members": [
								{
									"constant": false,
									"id": 322,
									"mutability": "mutable",
									"name": "field",
									"nameLocation": "17666:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 325,
									"src": "17640:31:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_enum$_CollectionPermissionField_$329",
										"typeString": "enum CollectionPermissionField"
									},
									"typeName": {
										"id": 321,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 320,
											"name": "CollectionPermissionField",
											"nameLocations": [
												"17640:25:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 329,
											"src": "17640:25:0"
										},
										"referencedDeclaration": 329,
										"src": "17640:25:0",
										"typeDescriptions": {
											"typeIdentifier": "t_enum$_CollectionPermissionField_$329",
											"typeString": "enum CollectionPermissionField"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 324,
									"mutability": "mutable",
									"name": "value",
									"nameLocation": "17680:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 325,
									"src": "17675:10:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 323,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "17675:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "CollectionNestingPermission",
							"nameLocation": "17608:27:0",
							"nodeType": "StructDefinition",
							"scope": 707,
							"src": "17601:88:0",
							"visibility": "public"
						},
						{
							"canonicalName": "CollectionPermissionField",
							"documentation": {
								"id": 326,
								"nodeType": "StructuredDocumentation",
								"src": "17693:125:0",
								"text": "Ethereum representation of `NestingPermissions` (see [`up_data_structs::NestingPermissions`]) fields as an enumeration."
							},
							"id": 329,
							"members": [
								{
									"id": 327,
									"name": "TokenOwner",
									"nameLocation": "17900:10:0",
									"nodeType": "EnumValue",
									"src": "17900:10:0"
								},
								{
									"id": 328,
									"name": "CollectionAdmin",
									"nameLocation": "17975:15:0",
									"nodeType": "EnumValue",
									"src": "17975:15:0"
								}
							],
							"name": "CollectionPermissionField",
							"nameLocation": "17823:25:0",
							"nodeType": "EnumDefinition",
							"src": "17818:175:0"
						},
						{
							"canonicalName": "CollectionNesting",
							"documentation": {
								"id": 330,
								"nodeType": "StructuredDocumentation",
								"src": "17997:25:0",
								"text": "Nested collections."
							},
							"id": 336,
							"members": [
								{
									"constant": false,
									"id": 332,
									"mutability": "mutable",
									"name": "token_owner",
									"nameLocation": "18056:11:0",
									"nodeType": "VariableDeclaration",
									"scope": 336,
									"src": "18051:16:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 331,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "18051:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 335,
									"mutability": "mutable",
									"name": "ids",
									"nameLocation": "18081:3:0",
									"nodeType": "VariableDeclaration",
									"scope": 336,
									"src": "18071:13:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
										"typeString": "uint256[]"
									},
									"typeName": {
										"baseType": {
											"id": 333,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "18071:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 334,
										"nodeType": "ArrayTypeName",
										"src": "18071:9:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
											"typeString": "uint256[]"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "CollectionNesting",
							"nameLocation": "18029:17:0",
							"nodeType": "StructDefinition",
							"scope": 707,
							"src": "18022:66:0",
							"visibility": "public"
						},
						{
							"canonicalName": "CollectionLimit",
							"documentation": {
								"id": 337,
								"nodeType": "StructuredDocumentation",
								"src": "18092:91:0",
								"text": "[`CollectionLimits`](up_data_structs::CollectionLimits) field representation for EVM."
							},
							"id": 344,
							"members": [
								{
									"constant": false,
									"id": 340,
									"mutability": "mutable",
									"name": "field",
									"nameLocation": "18231:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 344,
									"src": "18210:26:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_enum$_CollectionLimitField_$363",
										"typeString": "enum CollectionLimitField"
									},
									"typeName": {
										"id": 339,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 338,
											"name": "CollectionLimitField",
											"nameLocations": [
												"18210:20:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 363,
											"src": "18210:20:0"
										},
										"referencedDeclaration": 363,
										"src": "18210:20:0",
										"typeDescriptions": {
											"typeIdentifier": "t_enum$_CollectionLimitField_$363",
											"typeString": "enum CollectionLimitField"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 343,
									"mutability": "mutable",
									"name": "value",
									"nameLocation": "18254:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 344,
									"src": "18240:19:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_struct$_OptionUint256_$352_storage_ptr",
										"typeString": "struct OptionUint256"
									},
									"typeName": {
										"id": 342,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 341,
											"name": "OptionUint256",
											"nameLocations": [
												"18240:13:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 352,
											"src": "18240:13:0"
										},
										"referencedDeclaration": 352,
										"src": "18240:13:0",
										"typeDescriptions": {
											"typeIdentifier": "t_struct$_OptionUint256_$352_storage_ptr",
											"typeString": "struct OptionUint256"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "CollectionLimit",
							"nameLocation": "18190:15:0",
							"nodeType": "StructDefinition",
							"scope": 707,
							"src": "18183:80:0",
							"visibility": "public"
						},
						{
							"canonicalName": "OptionUint256",
							"documentation": {
								"id": 345,
								"nodeType": "StructuredDocumentation",
								"src": "18267:20:0",
								"text": "Optional value"
							},
							"id": 352,
							"members": [
								{
									"constant": false,
									"id": 348,
									"mutability": "mutable",
									"name": "status",
									"nameLocation": "18366:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 352,
									"src": "18361:11:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 347,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "18361:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 351,
									"mutability": "mutable",
									"name": "value",
									"nameLocation": "18423:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 352,
									"src": "18415:13:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 350,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "18415:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "OptionUint256",
							"nameLocation": "18294:13:0",
							"nodeType": "StructDefinition",
							"scope": 707,
							"src": "18287:145:0",
							"visibility": "public"
						},
						{
							"canonicalName": "CollectionLimitField",
							"documentation": {
								"id": 353,
								"nodeType": "StructuredDocumentation",
								"src": "18436:92:0",
								"text": "[`CollectionLimits`](up_data_structs::CollectionLimits) fields representation for EVM."
							},
							"id": 363,
							"members": [
								{
									"id": 354,
									"name": "AccountTokenOwnership",
									"nameLocation": "18612:21:0",
									"nodeType": "EnumValue",
									"src": "18612:21:0"
								},
								{
									"id": 355,
									"name": "SponsoredDataSize",
									"nameLocation": "18697:17:0",
									"nodeType": "EnumValue",
									"src": "18697:17:0"
								},
								{
									"id": 356,
									"name": "SponsoredDataRateLimit",
									"nameLocation": "18796:22:0",
									"nodeType": "EnumValue",
									"src": "18796:22:0"
								},
								{
									"id": 357,
									"name": "TokenLimit",
									"nameLocation": "18879:10:0",
									"nodeType": "EnumValue",
									"src": "18879:10:0"
								},
								{
									"id": 358,
									"name": "SponsorTransferTimeout",
									"nameLocation": "18933:22:0",
									"nodeType": "EnumValue",
									"src": "18933:22:0"
								},
								{
									"id": 359,
									"name": "SponsorApproveTimeout",
									"nameLocation": "19018:21:0",
									"nodeType": "EnumValue",
									"src": "19018:21:0"
								},
								{
									"id": 360,
									"name": "OwnerCanTransfer",
									"nameLocation": "19143:16:0",
									"nodeType": "EnumValue",
									"src": "19143:16:0"
								},
								{
									"id": 361,
									"name": "OwnerCanDestroy",
									"nameLocation": "19222:15:0",
									"nodeType": "EnumValue",
									"src": "19222:15:0"
								},
								{
									"id": 362,
									"name": "TransferEnabled",
									"nameLocation": "19313:15:0",
									"nodeType": "EnumValue",
									"src": "19313:15:0"
								}
							],
							"name": "CollectionLimitField",
							"nameLocation": "18533:20:0",
							"nodeType": "EnumDefinition",
							"src": "18528:803:0"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 365,
										"name": "Dummy",
										"nameLocations": [
											"19559:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3,
										"src": "19559:5:0"
									},
									"id": 366,
									"nodeType": "InheritanceSpecifier",
									"src": "19559:5:0"
								},
								{
									"baseName": {
										"id": 367,
										"name": "ERC165",
										"nameLocations": [
											"19566:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 13,
										"src": "19566:6:0"
									},
									"id": 368,
									"nodeType": "InheritanceSpecifier",
									"src": "19566:6:0"
								}
							],
							"canonicalName": "ERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 364,
								"nodeType": "StructuredDocumentation",
								"src": "19335:196:0",
								"text": "@title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev the ERC-165 identifier for this interface is 0x5b5e139f"
							},
							"fullyImplemented": false,
							"id": 377,
							"linearizedBaseContracts": [
								377,
								13,
								3
							],
							"name": "ERC721Metadata",
							"nameLocation": "19541:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 369,
										"nodeType": "StructuredDocumentation",
										"src": "20210:794:0",
										"text": "@notice A distinct Uniform Resource Identifier (URI) for a given asset.\n @dev If the token has a `url` property and it is not empty, it is returned.\n  Else If the collection does not have a property with key `schemaName` or its value is not equal to `ERC721Metadata`, it return an error `tokenURI not set`.\n  If the collection property `baseURI` is empty or absent, return \"\" (empty string)\n  otherwise, if token property `suffix` present and is non-empty, return concatenation of baseURI and suffix\n  otherwise, return concatenation of `baseURI` and stringified token id (decimal stringifying, without paddings).\n @return token's const_metadata\n @dev EVM selector for this function is: 0xc87b56dd,\n  or in textual repr: tokenURI(uint256)"
									},
									"functionSelector": "c87b56dd",
									"id": 376,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "21016:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "21033:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "21025:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 370,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21025:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21024:17:0"
									},
									"returnParameters": {
										"id": 375,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 374,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 376,
												"src": "21065:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 373,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "21065:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21064:15:0"
									},
									"scope": 377,
									"src": "21007:73:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 707,
							"src": "19531:1552:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 379,
										"name": "Dummy",
										"nameLocations": [
											"21251:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3,
										"src": "21251:5:0"
									},
									"id": 380,
									"nodeType": "InheritanceSpecifier",
									"src": "21251:5:0"
								},
								{
									"baseName": {
										"id": 381,
										"name": "ERC165",
										"nameLocations": [
											"21258:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 13,
										"src": "21258:6:0"
									},
									"id": 382,
									"nodeType": "InheritanceSpecifier",
									"src": "21258:6:0"
								}
							],
							"canonicalName": "ERC721Burnable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 378,
								"nodeType": "StructuredDocumentation",
								"src": "21087:136:0",
								"text": "@title ERC721 Token that can be irreversibly burned (destroyed).\n @dev the ERC-165 identifier for this interface is 0x42966c68"
							},
							"fullyImplemented": false,
							"id": 389,
							"linearizedBaseContracts": [
								389,
								13,
								3
							],
							"name": "ERC721Burnable",
							"nameLocation": "21233:14:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 383,
										"nodeType": "StructuredDocumentation",
										"src": "21269:300:0",
										"text": "@notice Burns a specific ERC721 token.\n @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\n  operator of the current owner.\n @param tokenId The NFT to approve\n @dev EVM selector for this function is: 0x42966c68,\n  or in textual repr: burn(uint256)"
									},
									"functionSelector": "42966c68",
									"id": 388,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burn",
									"nameLocation": "21581:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 386,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "21594:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 388,
												"src": "21586:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 384,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "21586:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "21585:17:0"
									},
									"returnParameters": {
										"id": 387,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "21611:0:0"
									},
									"scope": 389,
									"src": "21572:40:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 707,
							"src": "21223:392:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 391,
										"name": "Dummy",
										"nameLocations": [
											"21753:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3,
										"src": "21753:5:0"
									},
									"id": 392,
									"nodeType": "InheritanceSpecifier",
									"src": "21753:5:0"
								},
								{
									"baseName": {
										"id": 393,
										"name": "ERC165",
										"nameLocations": [
											"21760:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 13,
										"src": "21760:6:0"
									},
									"id": 394,
									"nodeType": "InheritanceSpecifier",
									"src": "21760:6:0"
								}
							],
							"canonicalName": "ERC721UniqueMintable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 390,
								"nodeType": "StructuredDocumentation",
								"src": "21619:100:0",
								"text": "@title ERC721 minting logic.\n @dev the ERC-165 identifier for this interface is 0x3fd94ea6"
							},
							"fullyImplemented": false,
							"id": 413,
							"linearizedBaseContracts": [
								413,
								13,
								3
							],
							"name": "ERC721UniqueMintable",
							"nameLocation": "21729:20:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 395,
										"nodeType": "StructuredDocumentation",
										"src": "21771:221:0",
										"text": "@notice Function to mint a token.\n @param to The new owner\n @return uint256 The id of the newly minted token\n @dev EVM selector for this function is: 0x6a627842,\n  or in textual repr: mint(address)"
									},
									"functionSelector": "6a627842",
									"id": 402,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mint",
									"nameLocation": "22004:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 398,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 397,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "22017:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "22009:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 396,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "22009:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22008:12:0"
									},
									"returnParameters": {
										"id": 401,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 400,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 402,
												"src": "22039:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 399,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22039:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22038:9:0"
									},
									"scope": 413,
									"src": "21995:53:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 403,
										"nodeType": "StructuredDocumentation",
										"src": "22489:337:0",
										"text": "@notice Function to mint token with the given tokenUri.\n @param to The new owner\n @param tokenUri Token URI that would be stored in the NFT properties\n @return uint256 The id of the newly minted token\n @dev EVM selector for this function is: 0x45c17782,\n  or in textual repr: mintWithTokenURI(address,string)"
									},
									"functionSelector": "45c17782",
									"id": 412,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintWithTokenURI",
									"nameLocation": "22838:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 408,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 405,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "22863:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "22855:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 404,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "22855:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 407,
												"mutability": "mutable",
												"name": "tokenUri",
												"nameLocation": "22881:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "22867:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 406,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "22867:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22854:36:0"
									},
									"returnParameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 412,
												"src": "22909:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 409,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "22909:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "22908:9:0"
									},
									"scope": 413,
									"src": "22829:89:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 707,
							"src": "21719:1793:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 415,
										"name": "Dummy",
										"nameLocations": [
											"23660:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3,
										"src": "23660:5:0"
									},
									"id": 416,
									"nodeType": "InheritanceSpecifier",
									"src": "23660:5:0"
								},
								{
									"baseName": {
										"id": 417,
										"name": "ERC165",
										"nameLocations": [
											"23667:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 13,
										"src": "23667:6:0"
									},
									"id": 418,
									"nodeType": "InheritanceSpecifier",
									"src": "23667:6:0"
								}
							],
							"canonicalName": "ERC721UniqueExtensions",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 414,
								"nodeType": "StructuredDocumentation",
								"src": "23516:108:0",
								"text": "@title Unique extensions for ERC721.\n @dev the ERC-165 identifier for this interface is 0x16de3152"
							},
							"fullyImplemented": false,
							"id": 531,
							"linearizedBaseContracts": [
								531,
								13,
								3
							],
							"name": "ERC721UniqueExtensions",
							"nameLocation": "23634:22:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 419,
										"nodeType": "StructuredDocumentation",
										"src": "23678:164:0",
										"text": "@notice A descriptive name for a collection of NFTs in this contract\n @dev EVM selector for this function is: 0x06fdde03,\n  or in textual repr: name()"
									},
									"functionSelector": "06fdde03",
									"id": 424,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "23854:4:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 420,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "23858:2:0"
									},
									"returnParameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 422,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 424,
												"src": "23884:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 421,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "23884:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "23883:15:0"
									},
									"scope": 531,
									"src": "23845:54:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 425,
										"nodeType": "StructuredDocumentation",
										"src": "23904:151:0",
										"text": "@notice An abbreviated name for NFTs in this contract\n @dev EVM selector for this function is: 0x95d89b41,\n  or in textual repr: symbol()"
									},
									"functionSelector": "95d89b41",
									"id": 430,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "24067:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "24073:2:0"
									},
									"returnParameters": {
										"id": 429,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 428,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 430,
												"src": "24099:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 427,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "24099:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24098:15:0"
									},
									"scope": 531,
									"src": "24058:56:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 431,
										"nodeType": "StructuredDocumentation",
										"src": "24119:144:0",
										"text": "@notice A description for the collection.\n @dev EVM selector for this function is: 0x7284e416,\n  or in textual repr: description()"
									},
									"functionSelector": "7284e416",
									"id": 436,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "description",
									"nameLocation": "24275:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "24286:2:0"
									},
									"returnParameters": {
										"id": 435,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 434,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 436,
												"src": "24312:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 433,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "24312:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24311:15:0"
									},
									"scope": 531,
									"src": "24266:61:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 437,
										"nodeType": "StructuredDocumentation",
										"src": "24332:205:0",
										"text": "Returns the owner (in cross format) of the token.\n @param tokenId Id for the token.\n @dev EVM selector for this function is: 0x2b29dace,\n  or in textual repr: crossOwnerOf(uint256)"
									},
									"functionSelector": "2b29dace",
									"id": 445,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "crossOwnerOf",
									"nameLocation": "24549:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 440,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 439,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "24570:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "24562:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 438,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "24562:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24561:17:0"
									},
									"returnParameters": {
										"id": 444,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 443,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 445,
												"src": "24602:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 442,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 441,
														"name": "CrossAddress",
														"nameLocations": [
															"24602:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "24602:12:0"
													},
													"referencedDeclaration": 314,
													"src": "24602:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24601:21:0"
									},
									"scope": 531,
									"src": "24540:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 446,
										"nodeType": "StructuredDocumentation",
										"src": "24628:310:0",
										"text": "Returns the token properties.\n @param tokenId Id for the token.\n @param keys Properties keys. Empty keys for all propertyes.\n @return Vector of properties key/value pairs.\n @dev EVM selector for this function is: 0xe07ede7e,\n  or in textual repr: properties(uint256,string[])"
									},
									"functionSelector": "e07ede7e",
									"id": 458,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "properties",
									"nameLocation": "24950:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 452,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 448,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "24969:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "24961:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 447,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "24961:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 451,
												"mutability": "mutable",
												"name": "keys",
												"nameLocation": "24994:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "24978:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_string_memory_ptr_$dyn_memory_ptr",
													"typeString": "string[]"
												},
												"typeName": {
													"baseType": {
														"id": 449,
														"name": "string",
														"nodeType": "ElementaryTypeName",
														"src": "24978:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage_ptr",
															"typeString": "string"
														}
													},
													"id": 450,
													"nodeType": "ArrayTypeName",
													"src": "24978:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_string_storage_$dyn_storage_ptr",
														"typeString": "string[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "24960:39:0"
									},
									"returnParameters": {
										"id": 457,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 456,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 458,
												"src": "25023:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Property_$78_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct Property[]"
												},
												"typeName": {
													"baseType": {
														"id": 454,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 453,
															"name": "Property",
															"nameLocations": [
																"25023:8:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 78,
															"src": "25023:8:0"
														},
														"referencedDeclaration": 78,
														"src": "25023:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Property_$78_storage_ptr",
															"typeString": "struct Property"
														}
													},
													"id": 455,
													"nodeType": "ArrayTypeName",
													"src": "25023:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Property_$78_storage_$dyn_storage_ptr",
														"typeString": "struct Property[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "25022:19:0"
									},
									"scope": 531,
									"src": "24941:101:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 459,
										"nodeType": "StructuredDocumentation",
										"src": "25047:483:0",
										"text": "@notice Set or reaffirm the approved address for an NFT\n @dev The zero address indicates there is no approved address.\n @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\n  operator of the current owner.\n @param approved The new substrate address approved NFT controller\n @param tokenId The NFT to approve\n @dev EVM selector for this function is: 0x0ecd0ab0,\n  or in textual repr: approveCross((address,uint256),uint256)"
									},
									"functionSelector": "0ecd0ab0",
									"id": 467,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approveCross",
									"nameLocation": "25542:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 462,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "25575:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "25555:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 461,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 460,
														"name": "CrossAddress",
														"nameLocations": [
															"25555:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "25555:12:0"
													},
													"referencedDeclaration": 314,
													"src": "25555:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 464,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "25593:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 467,
												"src": "25585:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 463,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "25585:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "25554:47:0"
									},
									"returnParameters": {
										"id": 466,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "25610:0:0"
									},
									"scope": 531,
									"src": "25533:78:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 468,
										"nodeType": "StructuredDocumentation",
										"src": "25616:365:0",
										"text": "@notice Transfer ownership of an NFT\n @dev Throws unless `msg.sender` is the current owner. Throws if `to`\n  is the zero address. Throws if `tokenId` is not a valid NFT.\n @param to The new owner\n @param tokenId The NFT to transfer\n @dev EVM selector for this function is: 0xa9059cbb,\n  or in textual repr: transfer(address,uint256)"
									},
									"functionSelector": "a9059cbb",
									"id": 475,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "25993:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 470,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "26010:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "26002:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 469,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "26002:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "26022:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 475,
												"src": "26014:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 471,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26014:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "26001:29:0"
									},
									"returnParameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "26039:0:0"
									},
									"scope": 531,
									"src": "25984:56:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 476,
										"nodeType": "StructuredDocumentation",
										"src": "26045:380:0",
										"text": "@notice Transfer ownership of an NFT\n @dev Throws unless `msg.sender` is the current owner. Throws if `to`\n  is the zero address. Throws if `tokenId` is not a valid NFT.\n @param to The new owner\n @param tokenId The NFT to transfer\n @dev EVM selector for this function is: 0x2ada85ff,\n  or in textual repr: transferCross((address,uint256),uint256)"
									},
									"functionSelector": "2ada85ff",
									"id": 484,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferCross",
									"nameLocation": "26437:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 482,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 479,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "26471:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "26451:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 478,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 477,
														"name": "CrossAddress",
														"nameLocations": [
															"26451:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "26451:12:0"
													},
													"referencedDeclaration": 314,
													"src": "26451:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 481,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "26483:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 484,
												"src": "26475:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 480,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "26475:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "26450:41:0"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "26500:0:0"
									},
									"scope": 531,
									"src": "26428:73:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 485,
										"nodeType": "StructuredDocumentation",
										"src": "26506:534:0",
										"text": "@notice Transfer ownership of an NFT from cross account address to cross account address\n @dev Throws unless `msg.sender` is the current owner. Throws if `to`\n  is the zero address. Throws if `tokenId` is not a valid NFT.\n @param from Cross acccount address of current owner\n @param to Cross acccount address of new owner\n @param tokenId The NFT to transfer\n @dev EVM selector for this function is: 0xd5cf430b,\n  or in textual repr: transferFromCross((address,uint256),(address,uint256),uint256)"
									},
									"functionSelector": "d5cf430b",
									"id": 496,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFromCross",
									"nameLocation": "27052:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 494,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 488,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "27094:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 496,
												"src": "27074:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 487,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 486,
														"name": "CrossAddress",
														"nameLocations": [
															"27074:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "27074:12:0"
													},
													"referencedDeclaration": 314,
													"src": "27074:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 491,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "27123:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 496,
												"src": "27103:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 490,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 489,
														"name": "CrossAddress",
														"nameLocations": [
															"27103:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "27103:12:0"
													},
													"referencedDeclaration": 314,
													"src": "27103:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 493,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "27138:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 496,
												"src": "27130:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 492,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "27130:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "27069:80:0"
									},
									"returnParameters": {
										"id": 495,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "27158:0:0"
									},
									"scope": 531,
									"src": "27043:116:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 497,
										"nodeType": "StructuredDocumentation",
										"src": "27730:488:0",
										"text": "@notice Burns a specific ERC721 token.\n @dev Throws unless `msg.sender` is the current owner or an authorized\n  operator for this NFT. Throws if `from` is not the current owner. Throws\n  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.\n @param from The current owner of the NFT\n @param tokenId The NFT to transfer\n @dev EVM selector for this function is: 0xbb2f5a58,\n  or in textual repr: burnFromCross((address,uint256),uint256)"
									},
									"functionSelector": "bb2f5a58",
									"id": 505,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "burnFromCross",
									"nameLocation": "28230:13:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 500,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "28264:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "28244:24:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 499,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 498,
														"name": "CrossAddress",
														"nameLocations": [
															"28244:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "28244:12:0"
													},
													"referencedDeclaration": 314,
													"src": "28244:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 502,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "28278:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 505,
												"src": "28270:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 501,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "28270:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28243:43:0"
									},
									"returnParameters": {
										"id": 504,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "28295:0:0"
									},
									"scope": 531,
									"src": "28221:75:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 506,
										"nodeType": "StructuredDocumentation",
										"src": "28301:136:0",
										"text": "@notice Returns next free NFT ID.\n @dev EVM selector for this function is: 0x75794a3c,\n  or in textual repr: nextTokenId()"
									},
									"functionSelector": "75794a3c",
									"id": 511,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nextTokenId",
									"nameLocation": "28449:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 507,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "28460:2:0"
									},
									"returnParameters": {
										"id": 510,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 509,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 511,
												"src": "28486:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 508,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "28486:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "28485:9:0"
									},
									"scope": 531,
									"src": "28440:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 512,
										"nodeType": "StructuredDocumentation",
										"src": "29592:319:0",
										"text": "@notice Function to mint a token.\n @param to The new owner crossAccountId\n @param properties Properties of minted token\n @return uint256 The id of the newly minted token\n @dev EVM selector for this function is: 0xb904db03,\n  or in textual repr: mintCross((address,uint256),(string,bytes)[])"
									},
									"functionSelector": "b904db03",
									"id": 524,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "mintCross",
									"nameLocation": "29923:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 520,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 515,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "29953:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "29933:22:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_CrossAddress_$314_memory_ptr",
													"typeString": "struct CrossAddress"
												},
												"typeName": {
													"id": 514,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 513,
														"name": "CrossAddress",
														"nameLocations": [
															"29933:12:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 314,
														"src": "29933:12:0"
													},
													"referencedDeclaration": 314,
													"src": "29933:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_CrossAddress_$314_storage_ptr",
														"typeString": "struct CrossAddress"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 519,
												"mutability": "mutable",
												"name": "properties",
												"nameLocation": "29975:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "29957:28:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_struct$_Property_$78_memory_ptr_$dyn_memory_ptr",
													"typeString": "struct Property[]"
												},
												"typeName": {
													"baseType": {
														"id": 517,
														"nodeType": "UserDefinedTypeName",
														"pathNode": {
															"id": 516,
															"name": "Property",
															"nameLocations": [
																"29957:8:0"
															],
															"nodeType": "IdentifierPath",
															"referencedDeclaration": 78,
															"src": "29957:8:0"
														},
														"referencedDeclaration": 78,
														"src": "29957:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_Property_$78_storage_ptr",
															"typeString": "struct Property"
														}
													},
													"id": 518,
													"nodeType": "ArrayTypeName",
													"src": "29957:10:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_struct$_Property_$78_storage_$dyn_storage_ptr",
														"typeString": "struct Property[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "29932:54:0"
									},
									"returnParameters": {
										"id": 523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 522,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 524,
												"src": "30005:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 521,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "30005:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "30004:9:0"
									},
									"scope": 531,
									"src": "29914:100:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 525,
										"nodeType": "StructuredDocumentation",
										"src": "30019:165:0",
										"text": "@notice Returns collection helper contract address\n @dev EVM selector for this function is: 0x1896cce6,\n  or in textual repr: collectionHelperAddress()"
									},
									"functionSelector": "1896cce6",
									"id": 530,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "collectionHelperAddress",
									"nameLocation": "30196:23:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 526,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "30219:2:0"
									},
									"returnParameters": {
										"id": 529,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 528,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 530,
												"src": "30245:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "30245:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "30244:9:0"
									},
									"scope": 531,
									"src": "30187:67:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 707,
							"src": "23624:6633:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"canonicalName": "TokenUri",
							"documentation": {
								"id": 532,
								"nodeType": "StructuredDocumentation",
								"src": "30261:39:0",
								"text": "Data for creation token with uri."
							},
							"id": 539,
							"members": [
								{
									"constant": false,
									"id": 535,
									"mutability": "mutable",
									"name": "id",
									"nameLocation": "30351:2:0",
									"nodeType": "VariableDeclaration",
									"scope": 539,
									"src": "30343:10:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 534,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "30343:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 538,
									"mutability": "mutable",
									"name": "uri",
									"nameLocation": "30388:3:0",
									"nodeType": "VariableDeclaration",
									"scope": 539,
									"src": "30381:10:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 537,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "30381:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "TokenUri",
							"nameLocation": "30307:8:0",
							"nodeType": "StructDefinition",
							"scope": 707,
							"src": "30300:95:0",
							"visibility": "public"
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 541,
										"name": "Dummy",
										"nameLocations": [
											"30628:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3,
										"src": "30628:5:0"
									},
									"id": 542,
									"nodeType": "InheritanceSpecifier",
									"src": "30628:5:0"
								},
								{
									"baseName": {
										"id": 543,
										"name": "ERC165",
										"nameLocations": [
											"30635:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 13,
										"src": "30635:6:0"
									},
									"id": 544,
									"nodeType": "InheritanceSpecifier",
									"src": "30635:6:0"
								}
							],
							"canonicalName": "ERC721Enumerable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 540,
								"nodeType": "StructuredDocumentation",
								"src": "30399:199:0",
								"text": "@title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev the ERC-165 identifier for this interface is 0x780e9d63"
							},
							"fullyImplemented": false,
							"id": 569,
							"linearizedBaseContracts": [
								569,
								13,
								3
							],
							"name": "ERC721Enumerable",
							"nameLocation": "30608:16:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 545,
										"nodeType": "StructuredDocumentation",
										"src": "30646:286:0",
										"text": "@notice Enumerate valid NFTs\n @param index A counter less than `totalSupply()`\n @return The token identifier for the `index`th NFT,\n  (sort order not specified)\n @dev EVM selector for this function is: 0x4f6ccce7,\n  or in textual repr: tokenByIndex(uint256)"
									},
									"functionSelector": "4f6ccce7",
									"id": 552,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenByIndex",
									"nameLocation": "30944:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 548,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 547,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "30965:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 552,
												"src": "30957:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 546,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "30957:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "30956:15:0"
									},
									"returnParameters": {
										"id": 551,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 550,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 552,
												"src": "30995:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 549,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "30995:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "30994:9:0"
									},
									"scope": 569,
									"src": "30935:69:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 553,
										"nodeType": "StructuredDocumentation",
										"src": "31009:146:0",
										"text": "@dev Not implemented\n @dev EVM selector for this function is: 0x2f745c59,\n  or in textual repr: tokenOfOwnerByIndex(address,uint256)"
									},
									"functionSelector": "2f745c59",
									"id": 562,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenOfOwnerByIndex",
									"nameLocation": "31167:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 558,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 555,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "31195:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "31187:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 554,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31187:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 557,
												"mutability": "mutable",
												"name": "index",
												"nameLocation": "31210:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "31202:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 556,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "31202:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "31186:30:0"
									},
									"returnParameters": {
										"id": 561,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 560,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 562,
												"src": "31240:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 559,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "31240:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "31239:9:0"
									},
									"scope": 569,
									"src": "31158:91:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 563,
										"nodeType": "StructuredDocumentation",
										"src": "31254:304:0",
										"text": "@notice Count NFTs tracked by this contract\n @return A count of valid NFTs tracked by this contract, where each one of\n  them has an assigned and queryable owner not equal to the zero address\n @dev EVM selector for this function is: 0x18160ddd,\n  or in textual repr: totalSupply()"
									},
									"functionSelector": "18160ddd",
									"id": 568,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "31570:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 564,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "31581:2:0"
									},
									"returnParameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "31607:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 565,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "31607:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "31606:9:0"
									},
									"scope": 569,
									"src": "31561:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 707,
							"src": "30598:1021:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "ERC721Events",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 570,
								"nodeType": "StructuredDocumentation",
								"src": "31623:28:0",
								"text": "@dev inlined interface"
							},
							"fullyImplemented": true,
							"id": 595,
							"linearizedBaseContracts": [
								595
							],
							"name": "ERC721Events",
							"nameLocation": "31661:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 578,
									"name": "Transfer",
									"nameLocation": "31684:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 577,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 572,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "31709:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "31693:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 571,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31693:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 574,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "31731:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "31715:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 573,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31715:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 576,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "31751:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 578,
												"src": "31735:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 575,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "31735:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "31692:67:0"
									},
									"src": "31678:82:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 586,
									"name": "Approval",
									"nameLocation": "31769:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 585,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 580,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "31794:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "31778:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 579,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31778:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 582,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "31817:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "31801:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 581,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31801:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 584,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "31843:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "31827:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 583,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "31827:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "31777:74:0"
									},
									"src": "31763:89:0"
								},
								{
									"anonymous": false,
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 594,
									"name": "ApprovalForAll",
									"nameLocation": "31861:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 588,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "31892:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "31876:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 587,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31876:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 590,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "31915:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "31899:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 589,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "31899:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 592,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "31930:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 594,
												"src": "31925:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 591,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "31925:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "31875:64:0"
									},
									"src": "31855:85:0"
								}
							],
							"scope": 707,
							"src": "31651:292:0",
							"usedErrors": [],
							"usedEvents": [
								578,
								586,
								594
							]
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 597,
										"name": "Dummy",
										"nameLocations": [
											"32156:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3,
										"src": "32156:5:0"
									},
									"id": 598,
									"nodeType": "InheritanceSpecifier",
									"src": "32156:5:0"
								},
								{
									"baseName": {
										"id": 599,
										"name": "ERC165",
										"nameLocations": [
											"32163:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 13,
										"src": "32163:6:0"
									},
									"id": 600,
									"nodeType": "InheritanceSpecifier",
									"src": "32163:6:0"
								},
								{
									"baseName": {
										"id": 601,
										"name": "ERC721Events",
										"nameLocations": [
											"32171:12:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 595,
										"src": "32171:12:0"
									},
									"id": 602,
									"nodeType": "InheritanceSpecifier",
									"src": "32171:12:0"
								}
							],
							"canonicalName": "ERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 596,
								"nodeType": "StructuredDocumentation",
								"src": "31947:189:0",
								"text": "@title ERC-721 Non-Fungible Token Standard\n @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n @dev the ERC-165 identifier for this interface is 0x80ac58cd"
							},
							"fullyImplemented": false,
							"id": 685,
							"linearizedBaseContracts": [
								685,
								595,
								13,
								3
							],
							"name": "ERC721",
							"nameLocation": "32146:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 603,
										"nodeType": "StructuredDocumentation",
										"src": "32188:413:0",
										"text": "@notice Count all NFTs assigned to an owner\n @dev NFTs assigned to the zero address are considered invalid, and this\n  function throws for queries about the zero address.\n @param owner An address for whom to query the balance\n @return The number of NFTs owned by `owner`, possibly zero\n @dev EVM selector for this function is: 0x70a08231,\n  or in textual repr: balanceOf(address)"
									},
									"functionSelector": "70a08231",
									"id": 610,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "32613:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 606,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 605,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "32631:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "32623:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 604,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "32623:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "32622:15:0"
									},
									"returnParameters": {
										"id": 609,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 608,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 610,
												"src": "32661:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 607,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "32661:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "32660:9:0"
									},
									"scope": 685,
									"src": "32604:66:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 611,
										"nodeType": "StructuredDocumentation",
										"src": "32675:340:0",
										"text": "@notice Find the owner of an NFT\n @dev NFTs assigned to zero address are considered invalid, and queries\n  about them do throw.\n @param tokenId The identifier for an NFT\n @return The address of the owner of the NFT\n @dev EVM selector for this function is: 0x6352211e,\n  or in textual repr: ownerOf(uint256)"
									},
									"functionSelector": "6352211e",
									"id": 618,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "33027:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 613,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "33043:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 618,
												"src": "33035:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 612,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "33035:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "33034:17:0"
									},
									"returnParameters": {
										"id": 617,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 616,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 618,
												"src": "33075:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 615,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33075:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "33074:9:0"
									},
									"scope": 685,
									"src": "33018:66:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 619,
										"nodeType": "StructuredDocumentation",
										"src": "33089:157:0",
										"text": "@dev Not implemented\n @dev EVM selector for this function is: 0xb88d4fde,\n  or in textual repr: safeTransferFrom(address,address,uint256,bytes)"
									},
									"functionSelector": "b88d4fde",
									"id": 630,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "33258:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 621,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "33287:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "33279:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 620,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33279:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "33304:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "33296:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 622,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33296:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 625,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "33319:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "33311:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 624,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "33311:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 627,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "33344:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 630,
												"src": "33331:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 626,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "33331:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "33274:78:0"
									},
									"returnParameters": {
										"id": 629,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "33361:0:0"
									},
									"scope": 685,
									"src": "33249:113:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 631,
										"nodeType": "StructuredDocumentation",
										"src": "33367:151:0",
										"text": "@dev Not implemented\n @dev EVM selector for this function is: 0x42842e0e,\n  or in textual repr: safeTransferFrom(address,address,uint256)"
									},
									"functionSelector": "42842e0e",
									"id": 640,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "33530:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 633,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "33559:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "33551:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 632,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33551:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 635,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "33576:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "33568:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 634,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "33568:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 637,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "33591:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 640,
												"src": "33583:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 636,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "33583:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "33546:56:0"
									},
									"returnParameters": {
										"id": 639,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "33611:0:0"
									},
									"scope": 685,
									"src": "33521:91:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 641,
										"nodeType": "StructuredDocumentation",
										"src": "33617:643:0",
										"text": "@notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n  TO CONFIRM THAT `to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n  THEY MAY BE PERMANENTLY LOST\n @dev Throws unless `msg.sender` is the current owner or an authorized\n  operator for this NFT. Throws if `from` is not the current owner. Throws\n  if `to` is the zero address. Throws if `tokenId` is not a valid NFT.\n @param from The current owner of the NFT\n @param to The new owner\n @param tokenId The NFT to transfer\n @dev EVM selector for this function is: 0x23b872dd,\n  or in textual repr: transferFrom(address,address,uint256)"
									},
									"functionSelector": "23b872dd",
									"id": 650,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "34272:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 648,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 643,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "34297:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "34289:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 642,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "34289:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 645,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "34314:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "34306:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 644,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "34306:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 647,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "34329:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 650,
												"src": "34321:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 646,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "34321:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34284:56:0"
									},
									"returnParameters": {
										"id": 649,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "34349:0:0"
									},
									"scope": 685,
									"src": "34263:87:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 651,
										"nodeType": "StructuredDocumentation",
										"src": "34355:450:0",
										"text": "@notice Set or reaffirm the approved address for an NFT\n @dev The zero address indicates there is no approved address.\n @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\n  operator of the current owner.\n @param approved The new approved NFT controller\n @param tokenId The NFT to approve\n @dev EVM selector for this function is: 0x095ea7b3,\n  or in textual repr: approve(address,uint256)"
									},
									"functionSelector": "095ea7b3",
									"id": 658,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "34817:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "34833:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "34825:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "34825:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 655,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "34851:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 658,
												"src": "34843:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 654,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "34843:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "34824:35:0"
									},
									"returnParameters": {
										"id": 657,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "34868:0:0"
									},
									"scope": 685,
									"src": "34808:61:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 659,
										"nodeType": "StructuredDocumentation",
										"src": "34874:364:0",
										"text": "@notice Sets or unsets the approval of a given operator.\n The `operator` is allowed to transfer all tokens of the `caller` on their behalf.\n @param operator Operator\n @param approved Should operator status be granted or revoked?\n @dev EVM selector for this function is: 0xa22cb465,\n  or in textual repr: setApprovalForAll(address,bool)"
									},
									"functionSelector": "a22cb465",
									"id": 666,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "35250:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 661,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "35276:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "35268:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 660,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "35268:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 663,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "35291:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 666,
												"src": "35286:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 662,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "35286:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "35267:33:0"
									},
									"returnParameters": {
										"id": 665,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "35309:0:0"
									},
									"scope": 685,
									"src": "35241:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 667,
										"nodeType": "StructuredDocumentation",
										"src": "35315:357:0",
										"text": "@notice Get the approved address for a single NFT\n @dev Throws if `tokenId` is not a valid NFT\n @param tokenId The NFT to find the approved address for\n @return The approved address for this NFT, or the zero address if there is none\n @dev EVM selector for this function is: 0x081812fc,\n  or in textual repr: getApproved(uint256)"
									},
									"functionSelector": "081812fc",
									"id": 674,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "35684:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "35704:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "35696:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 668,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "35696:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "35695:17:0"
									},
									"returnParameters": {
										"id": 673,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 672,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 674,
												"src": "35736:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 671,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "35736:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "35735:9:0"
									},
									"scope": 685,
									"src": "35675:70:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 675,
										"nodeType": "StructuredDocumentation",
										"src": "35750:187:0",
										"text": "@notice Tells whether the given `owner` approves the `operator`.\n @dev EVM selector for this function is: 0xe985e9c5,\n  or in textual repr: isApprovedForAll(address,address)"
									},
									"functionSelector": "e985e9c5",
									"id": 684,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "35949:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 680,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "35974:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 684,
												"src": "35966:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "35966:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 679,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "35989:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 684,
												"src": "35981:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 678,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "35981:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "35965:33:0"
									},
									"returnParameters": {
										"id": 683,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 682,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 684,
												"src": "36022:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 681,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "36022:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "36021:6:0"
									},
									"scope": 685,
									"src": "35940:88:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 707,
							"src": "32136:3895:0",
							"usedErrors": [],
							"usedEvents": [
								578,
								586,
								594
							]
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 686,
										"name": "Dummy",
										"nameLocations": [
											"36060:5:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 3,
										"src": "36060:5:0"
									},
									"id": 687,
									"nodeType": "InheritanceSpecifier",
									"src": "36060:5:0"
								},
								{
									"baseName": {
										"id": 688,
										"name": "ERC165",
										"nameLocations": [
											"36069:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 13,
										"src": "36069:6:0"
									},
									"id": 689,
									"nodeType": "InheritanceSpecifier",
									"src": "36069:6:0"
								},
								{
									"baseName": {
										"id": 690,
										"name": "ERC721",
										"nameLocations": [
											"36079:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 685,
										"src": "36079:6:0"
									},
									"id": 691,
									"nodeType": "InheritanceSpecifier",
									"src": "36079:6:0"
								},
								{
									"baseName": {
										"id": 692,
										"name": "ERC721Enumerable",
										"nameLocations": [
											"36089:16:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 569,
										"src": "36089:16:0"
									},
									"id": 693,
									"nodeType": "InheritanceSpecifier",
									"src": "36089:16:0"
								},
								{
									"baseName": {
										"id": 694,
										"name": "ERC721UniqueExtensions",
										"nameLocations": [
											"36109:22:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 531,
										"src": "36109:22:0"
									},
									"id": 695,
									"nodeType": "InheritanceSpecifier",
									"src": "36109:22:0"
								},
								{
									"baseName": {
										"id": 696,
										"name": "ERC721UniqueMintable",
										"nameLocations": [
											"36135:20:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 413,
										"src": "36135:20:0"
									},
									"id": 697,
									"nodeType": "InheritanceSpecifier",
									"src": "36135:20:0"
								},
								{
									"baseName": {
										"id": 698,
										"name": "ERC721Burnable",
										"nameLocations": [
											"36159:14:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 389,
										"src": "36159:14:0"
									},
									"id": 699,
									"nodeType": "InheritanceSpecifier",
									"src": "36159:14:0"
								},
								{
									"baseName": {
										"id": 700,
										"name": "ERC721Metadata",
										"nameLocations": [
											"36177:14:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 377,
										"src": "36177:14:0"
									},
									"id": 701,
									"nodeType": "InheritanceSpecifier",
									"src": "36177:14:0"
								},
								{
									"baseName": {
										"id": 702,
										"name": "Collection",
										"nameLocations": [
											"36195:10:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 308,
										"src": "36195:10:0"
									},
									"id": 703,
									"nodeType": "InheritanceSpecifier",
									"src": "36195:10:0"
								},
								{
									"baseName": {
										"id": 704,
										"name": "TokenProperties",
										"nameLocations": [
											"36209:15:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 72,
										"src": "36209:15:0"
									},
									"id": 705,
									"nodeType": "InheritanceSpecifier",
									"src": "36209:15:0"
								}
							],
							"canonicalName": "UniqueNFT",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 706,
							"linearizedBaseContracts": [
								706,
								72,
								19,
								308,
								377,
								389,
								413,
								531,
								569,
								685,
								595,
								13,
								3
							],
							"name": "UniqueNFT",
							"nameLocation": "36045:9:0",
							"nodeType": "ContractDefinition",
							"nodes": [],
							"scope": 707,
							"src": "36035:193:0",
							"usedErrors": [],
							"usedEvents": [
								18,
								578,
								586,
								594
							]
						}
					],
					"src": "78:36150:0"
				},
				"id": 0
			}
		}
	}
}